/*
  Генератор лексических анализаторов.
*/

$INCLUDE "LibraryEx";


*$FROM ParseCmdLine
$EXTERN ParseCommandLine;

*$FROM DFA-Lexer
$EXTERN DFA-Tokens;

*$FROM DFA-Parser
$EXTERN DFA-Parse;

*$FROM DFA-Compiler
$EXTERN DFA-Compile;

*$FROM Generator
$EXTERN GenerateFromDFA;

*$FROM Error
$EXTERN ErrorAt;

*$FROM Flex-Lexer
$EXTERN Flex-Tokens;

*$FROM Flex-Parser
$EXTERN Flex-Parse;

*$FROM Flex-Checker
$EXTERN Flex-Check;

*$FROM Flex-Desugar
$EXTERN Flex-Desugar;

$ENTRY Go {
  = <ArgList> : (e.ProgName) e.Options
  = <ParseCommandLine e.Options>
  : {
      InPlace e.FileName
        = <SaveFile
            (e.FileName)
            <Transform (e.FileName) <LoadFile e.FileName>>
          >;

      From (e.From) To (e.To)
         = <SaveFile
            (e.To)
            ('/* Automatically generated file, don\'t edit! */')
            ('/* Edit file \'' e.From '\' */')
            ()
            ()
            <Transform (e.From) <LoadFile e.From>>
          >;
    }
}

Transform {
  (e.Source) e.Lines
    = <SplitSource (e.Source) e.Lines>
    : s.Length (e.LinesBefore) (e.GenMode) e.Description
    = <GetTranslator s.Length (e.Source) e.GenMode> : t.Translator
    = e.LinesBefore
      ('/*GEN:' e.GenMode)
      e.Description
      ('GEN:END*/')
      <Apply t.Translator s.Length e.Description>
}

SplitSource {
  (e.Source)
  e.LinesBefore ('/*GEN:' e.GenMode) e.Description ('GEN:END*/') e.Skipped
    = <Lenw e.LinesBefore> : s.Length e.LinesBefore^
    = <Inc s.Length> (e.LinesBefore) (e.GenMode) e.Description;

  (e.Source)
  e.LinesBefore ('/*GEN:' e.GenMode) e.DescriptionAndTail
    = <Lenw e.LinesBefore ('/*GEN:' e.GenMode)> : s.CommentPos e.LinesBefore^
    = <ErrorAt (s.CommentPos e.Source) 'End of description not found'>;

  (e.Source) e.Lines = <ErrorAt (1 e.Source) 'Lexer description not found'>;
}

GetTranslator {
  s.Length (e.Source) 'TOKENS' = <GetDFATranslator e.Source>;
  s.Length (e.Source) 'FLEX' = <GetFlexTranslator e.Source>;
  s.Length (e.Source) e.OtherGenMode
    = <ErrorAt (s.Length e.Source) 'Unknown generation mode ' e.OtherGenMode>;
}

GetDFATranslator {
  e.Source
    = <Pipe
        &DFA-Tokens
        (&FillSourceToTokens (e.Source))
        &DFA-Parse
        &DFA-Compile
        &GenerateFromDFA
      >
}

GetFlexTranslator {
  e.Source
    = <Pipe
        &Flex-Tokens
        (&FillSourceToTokens (e.Source))
        &Flex-Parse
        {
          e.AST = <Flex-Check e.AST> e.AST;
        }
        &Flex-Desugar
        &Flex-Compile
        /* GenerateFromDFA */
      >
}

Flex-Compile {
  e.AnyInput =
    /* пусто */;
}

FillSourceToTokens {
  (e.Source) e.Tokens = <Map (&FillSourceToToken e.Source) e.Tokens>
}

FillSourceToToken {
  e.Source (TError s.LineNumber e.Text)
    = <ErrorAt (s.LineNumber e.Source) e.Text>;

  e.Source (s.TokType s.LineNumber e.Info)
    = (s.TokType (s.LineNumber e.Source) e.Info);
}
