*$FROM LibraryEx
$EXTERN Fetch, Pipe, MapReduce, Map;

*$FROM GetOpt
$EXTERN GetOpt;

*$FROM Config
$EXTERN
  Config-Create,
  Config-SetCppCompilerExe,
  Config-SetCppCompilerLib,
  Config-SetPrefix,
  Config-AddReference,
  Config-AddFolder,
  Config-SetSrefCompiler,
  Config-AddSrefCompilerFlag,
  Config-SetTargetFileName,
  Config-SetTargetMode,
  Config-SetPrelude,
  Config-AddRuntimeFile,
  Config-SetSourceFile,
  Config-AddIncorporated,
  Config-SetKeepRasls,
  Config-SetTempDir,
  Config-SetOverwriteExistRasls,
  Config-SetCppCompilerExeSuf,
  Config-SetCppCompilerLibSuf;

*$FROM Version
$EXTERN PrintVersion;


/**
  <ParseCommandLine e.Arguments>
    == Success t.Config
    == Fails (s.ArgNum e.Message)*

  e.Folders ::= (s.FolderType e.Path)*
  s.FolderType ::= Search | Runtime
  t.Target ::= (e.TargetFile) | DefaultTarget
*/
$ENTRY ParseCommandLine {
  e.Arguments =
    <Fetch
      <GetOpt
        (
          (CppCompilerExe Required 'c' ('cpp-command') ('cpp-command-exe'))
          (CppCompilerLib Required ('cpp-command-lib'))
          (Prefix Required 'p' ('prefix'))
          (Reference Required 'r' ('reference'))
          (RuntimeFolder Required 'D' ('runtime-dir') ('runtime-directory'))
          (SearchFolder Required 'd' ('dir') ('directory'))
          (SrefCompiler Required 's' ('sref-command') ('srefc-command'))
          (SrefCompilerOption Required 'X' ('thru') ('through'))
          (TargetFileName Required 'o' ('target-file'))
          (TargetMode-Exe None 'x' ('makeexe'))
          (TargetMode-Lib None 'l' ('makelib'))
          (TargetMode-R None 'R')
          (TargetMode-C None 'C' ('compile-only'))
          (Prelude Required ('prelude'))
          (Runtime Required ('runtime'))
          (Incorporated Required ('incorporated'))
          (Help None 'h?' ('help'))
          (Version None 'v' ('version'))
          (KeepRasls None ('keep-rasl') ('keep-rasls'))
          (DontKeepRasls None ('dont-keep-rasl') ('dont-keep-rasls'))
          (TempDir Required ('tmp-dir') ('temp-dir'))
          (REF5RSL-Env None ('ref5rsl'))
          (OverwriteExistRasls None
            ('overwrite-exist-rasls') ('overwrite-exist-rasl')
          )
          (DontOverwriteExistRasls None
            ('dont-overwrite-exist-rasls') ('dont-overwrite-exist-rasl')
          )
          (CppCompilerExeSuf Required ('cpp-command-exe-suf'))
          (CppCompilerLibSuf Required ('cpp-command-lib-suf'))
        )
        e.Arguments
      >
      <Pipe
        (&CheckRequiredOptions (FILE))
        {
          (e.Errors) e.Options
            = (<Config-Create> e.Errors) e.Options;
        }
        (&MapReduce
          {
            (t.Config e.Errors) (CppCompilerExe s.Num e.CppCompilerExe)
              = <Update
                  t.Config (e.Errors)
                  &Config-SetCppCompilerExe s.Num e.CppCompilerExe
                >;

            (t.Config e.Errors) (CppCompilerLib s.Num e.CppCompilerLib)
              = <Update
                  t.Config (e.Errors)
                  &Config-SetCppCompilerLib s.Num e.CppCompilerLib
                >;

            (t.Config e.Errors) (Prefix s.Num e.Prefix)
              = <Update t.Config (e.Errors) &Config-SetPrefix s.Num e.Prefix>;

            (t.Config e.Errors) (Reference s.Num e.Reference)
              = <Update
                  t.Config (e.Errors) &Config-AddReference s.Num e.Reference
                >;

            (t.Config e.Errors) (RuntimeFolder s.Num e.Folder)
              = <Update
                  t.Config (e.Errors) &Config-AddFolder s.Num Runtime e.Folder
                >;

            (t.Config e.Errors) (SearchFolder s.Num e.Folder)
              = <Update
                  t.Config (e.Errors) &Config-AddFolder s.Num Search e.Folder
                >;

            (t.Config e.Errors) (SrefCompiler s.Num e.SrefCompiler)
              = <Update
                  t.Config (e.Errors)
                  &Config-SetSrefCompiler s.Num e.SrefCompiler
                >;

            (t.Config e.Errors) (SrefCompilerOption s.Num e.Flag)
              = <Update
                  t.Config (e.Errors) &Config-AddSrefCompilerFlag s.Num e.Flag
                >;

            (t.Config e.Errors) (TargetFileName s.Num e.TargetFile)
              = <Update
                  t.Config (e.Errors)
                  &Config-SetTargetFileName s.Num e.TargetFile
                >;

            (t.Config e.Errors) (TargetMode-Exe s.Num)
              = <Update t.Config (e.Errors) &Config-SetTargetMode s.Num EXE>;

            (t.Config e.Errors) (TargetMode-Lib s.Num)
              = <Update t.Config (e.Errors) &Config-SetTargetMode s.Num LIB>;

            (t.Config e.Errors) (TargetMode-R s.Num)
              = <Update t.Config (e.Errors) &Config-SetTargetMode s.Num R>;

            (t.Config e.Errors) (TargetMode-C s.Num)
              = <Update
                  t.Config (e.Errors) &Config-SetTargetMode s.Num CompileOnly
                >;

            (t.Config e.Errors) (Prelude s.Num e.Prelude)
              = <Update t.Config (e.Errors) &Config-SetPrelude s.Num e.Prelude>;

            (t.Config e.Errors) (Runtime s.Num e.File)
              = <Update t.Config (e.Errors) &Config-AddRuntimeFile s.Num e.File>;

            (t.Config e.Errors) (Incorporated s.Num e.LibName)
              = <Update
                  t.Config (e.Errors) &Config-AddIncorporated s.Num e.LibName
                >;

            (t.Config e.Errors) (FILE s.Num e.SourceFile)
              = <Update
                  t.Config (e.Errors) &Config-SetSourceFile s.Num e.SourceFile
                >;

            (t.Config e.Errors) (Help s.Num) = <PrintHelp> (t.Config e.Errors);

            (t.Config e.Errors) (Version s.Num)
              = <PrintVersion 'SRMake'> (t.Config e.Errors);

            (t.Config e.Errors) (KeepRasls s.Num)
              = <Update t.Config (e.Errors) &Config-SetKeepRasls s.Num True>;

            (t.Config e.Errors) (DontKeepRasls s.Num)
              = <Update t.Config (e.Errors) &Config-SetKeepRasls s.Num False>;

            (t.Config e.Errors) (TempDir s.Num e.Name)
              = <Update t.Config (e.Errors) &Config-SetTempDir s.Num e.Name>;

            (t.Config e.Errors) (REF5RSL-Env s.Num)
              = <Update
                  t.Config (e.Errors) &Config-AddFolder s.Num REF5RSL
                >;

            (t.Config e.Errors) (OverwriteExistRasls s.Num)
              = <Update
                  t.Config (e.Errors) &Config-SetOverwriteExistRasls s.Num True
                >;

            (t.Config e.Errors) (DontOverwriteExistRasls s.Num)
              = <Update
                  t.Config (e.Errors) &Config-SetOverwriteExistRasls s.Num False
                >;

            (t.Config e.Errors) (CppCompilerExeSuf s.Num e.CppCompilerExeSuf)
              = <Update
                  t.Config (e.Errors)
                  &Config-SetCppCompilerExeSuf s.Num e.CppCompilerExeSuf
                >;

            (t.Config e.Errors) (CppCompilerLibSuf s.Num e.CppCompilerLibSuf)
              = <Update
                  t.Config (e.Errors)
                  &Config-SetCppCompilerLibSuf s.Num e.CppCompilerLibSuf
                >;

            (t.Config e.Errors) t.Option
              = (t.Config e.Errors) t.Option;
          }
        )
        {
          (t.Config /* нет ошибок */) =
            Success t.Config;

          (t.Config e.Errors) =
            Fails
            <Map
              {
                (s.Pos NoRequiredParam e.Param) =
                  (s.Pos 'option ' e.Param ' expects parameter');

                (s.Pos UnknownShortOption s.Option) =
                  (s.Pos 'unknown option -' s.Option);

                (s.Pos UnknownLongOption e.Option) =
                  (s.Pos 'unknown option --' e.Option);

                /* У нас все опции с параметрами, не должно возникать */
                /* (s.Pos UnexpectedLongOptionParam (e.Option) e.Param) = */

                (s.Pos ManySourceFiles) =
                  (s.Pos 'many source files in command line');

                (s.Pos No FILE) =
                  (s.Pos 'expected source filename in command line');

                (s.Pos TargetModeAlreadySet)
                  = (s.Pos
                      'options --makeexe (-x), --makelib (-l) and -R '
                      'must appear one time'
                    );
              }
              e.Errors
            >;
        }
      >
    >;
}

CheckRequiredOptions {
  (s.Flag e.Required) (e.Errors) e.Options-B (s.Flag s.Num e.Value) e.Options-E
    = <CheckRequiredOptions
        (e.Required) (e.Errors) e.Options-B (s.Flag s.Num e.Value) e.Options-E
      >;

  (s.Flag e.Required) (e.Errors) e.Options
    = <CheckRequiredOptions
        (e.Required) (e.Errors (1 No s.Flag)) e.Options
      >;

  (/* пусто */) (e.Errors) e.Options
    = (e.Errors) e.Options;
}

Update {
  t.Config (e.Errors) s.Updater s.LineNum e.Option
    = <s.Updater t.Config e.Option>
    : {
        Success t.Config^ = (t.Config e.Errors);

        Fails e.ErrorMessage
          = (t.Config e.Errors (s.LineNum e.ErrorMessage));
      }
}

$ENTRY PrintHelp {
  = <Prout
'  srmake flags... MainFileName[.ref]\n'
'\n'
'flags:\n'
'-c, --cpp-command, --cpp-command-exe command-line\n'
'        C++ command line prefix for building executable module\n'
'--cpp-command-lib command-line\n'
'        C++ command line prefix for building library module\n'
'-p, --prefix prefix-name\n'
'        set prefix file name\n'
'-r, --reference reference-name\n'
'        Compiled module depends from the reference\n'
'-D, --runtime-dir, --runtime-directory dir\n'
'        Add the directory to search list and include list for C++ compiler\n'
'-d, --dir, --directory dir\n'
'        Add the directory to search list\n'
'-s, --sref-command, --srefc-command command-line\n'
'        srefc command line prefix for run Refal-5-Lambda compiler\n'
'-X, --thru, --through srefc-command\n'
'        Additional flags for srefc compiler, don\'t quoted in command line\n'
'-o, --target-file target-file-name\n'
'        Name of target file\n'
'-x, --makeexe\n'
'        Compile to executable file\n'
'-l, --makelib\n'
'        Compile to library file (with or w/o native code)\n'
'-R      Compile to library RASL module (w/o native code)\n'
'-C, --compile-only\n'
'        Compile sources w/o linking\n'
'--prelude filename.refi\n'
'        Prelude file with builtin functions declarations\n'
'--runtime filename.ref\n'
'        Auxiliary files -- search roots\n'
'--incorporated filename\n'
'        Marks that a module with the name is statically linked to this module\n'
'--help  Print this help\n'
'--version\n'
'        Print version\n'
'--keep-rasl, --keep-rasls, --dont-keep-rasl, --dont-keep-rasls\n'
'        Save or don\'t save temporary .rasl after compilation\n'
'--tmp-dir, --temp-dir directory\n'
'        Directory for intermediate .rasl files, current is default\n'
'--ref5rsl\n'
'        Use environment variable REF5RSL as search path\n'
'--overwrite-exist-rasls, --dont-overwrite-exist-rasls,\n'
'--overwrite-exist-rasl, --dont-overwrite-exist-rasl\n'
'        If tmp-dir already contain file with name that being produced\n'
'        new file use new name\n'
    >;
}
