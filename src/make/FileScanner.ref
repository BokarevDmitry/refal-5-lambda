*$FROM LibraryEx
$EXTERN Map, LoadFile, MapReduce, Inc, Trim;

*$FROM Config
$EXTERN
  Config-GetPrelude,
  Config-AddReference,
  Config-GetTargetMode,
  Config-GetFolders,
  Config-GetPrefix,
  Config-SetPrefix;

*$FROM FindFile
$EXTERN FindFiles, FindInclude;

*$FROM Escape
$EXTERN UnEscapeString-SR;


$ENTRY CreateFileList {
  t.Config e.Units
    = <DoCreateFileList
        t.Config ()
        <Map
          {
            (e.Unit) = <FindFileEx t.Config CMD-LINE e.Unit>;
          }
          e.Units
        >
      >;
}

DoCreateFileList {
  t.Config (e.Modules) = t.Config e.Modules;

  t.Config (e.Modules-B (e.NextModule) e.Modules-E)
  (e.NextModule) e.NotScanned
    = <DoCreateFileList
        t.Config (e.Modules-B (e.NextModule) e.Modules-E)
        e.NotScanned
      >;

  t.Config (e.Modules) (e.NextModule) e.NotScanned
    = <FindImports t.Config e.NextModule> : t.Config^ e.NewNotScanned
    = <DoCreateFileList
        t.Config (e.Modules (e.NextModule))
        e.NewNotScanned e.NotScanned
      >;
}

FindImports {
  t.Config Source (RSL e.NextModule) e.Output
    = <FindImports-Aux t.Config Froms e.NextModule '.froms'>;

  t.Config Source (s.Dialect e.NextModule) e.Output
    = <FindImports-Aux t.Config s.Dialect e.NextModule>;

  t.Config Output e.Output
    = <FindImports-Aux t.Config Froms e.Output '.froms'>;

  t.Config OutputWithNative (e.Output) e.Native
    = <FindImports-Aux t.Config Froms e.Output '.froms'> : t.Config^ e.FromsUnits
    = <FindImports-Aux t.Config "C++" e.Native> : t.Config^ e.NativeUnits
    = t.Config e.FromsUnits e.NativeUnits;

  t.Config Include s.Dialect e.IncludeFile
    = <FindImports-Aux t.Config s.Dialect e.IncludeFile>;

  t.Config Error t.SrcPos e.Message = t.Config /* пусто */;
}

CommentForDialect {
  R5 = '*$';
  SR = '//';
  Froms = '//';
  "C++" = '//';
}

PreludePseudoIncludeLine {
  t.Config R5
    = <Config-GetPrelude t.Config>
    : {
        /* пусто */ = /* пусто */;
        e.Prelude = (Prelude e.Prelude);
      };

  t.Config s.Other = /* пусто */;
}

FindImports-Aux {
  t.OriginConfig s.Dialect e.FileName
    = <CommentForDialect s.Dialect> : e.CommentPrefix
    = <ExistFile e.FileName>
    : {
        True = <LoadFile e.FileName>;
        False = /* пусто */;
      }
    : e.FileContents
    = <PreludePseudoIncludeLine t.OriginConfig s.Dialect> : e.PseudoLine
    = <MapReduce
        {
          (t.Config s.LineNum) (e.CommentPrefix 'FROM ' e.Name)
            = (t.Config <Inc s.LineNum>)
              <FindFileEx t.Config (s.LineNum e.FileName) <Trim e.Name>>;

          (t.Config s.LineNum) (e.CommentPrefix 'PREFIX ' e.Name)
            = <UpdatePrefix t.Config (s.LineNum e.FileName) <Trim e.Name>>
            : t.Config^ e.Error
            = (t.Config <Inc s.LineNum>)
              e.Error;

          (t.Config s.LineNum) (e.CommentPrefix 'REFERENCE ' e.Name)
            = <Config-AddReference t.Config <Trim e.Name>> : Success t.Config^
            = (t.Config <Inc s.LineNum>);

          (t.Config s.LineNum) ('$INCLUDE "' e.EscapedName '";')
            = (t.Config <Inc s.LineNum>)
              <FindIncludeEx
                t.Config (s.LineNum e.FileName)
                <UnEscapeString s.Dialect e.EscapedName>
              >;

          (t.Config s.LineNum) (Prelude e.PreludeName)
            = (t.Config s.LineNum)  /* не инкрементируем, это псевдострочка */
              <FindIncludeEx
                t.Config (s.LineNum e.FileName) Success e.PreludeName
              >;

          (t.Config s.LineNum) (e.OtherLine) = (t.Config <Inc s.LineNum>);
        }
        (t.OriginConfig 1)
        e.PseudoLine e.FileContents
      >
    : (t.Config s.LineNum) e.Units
    = t.Config e.Units;
}

FindFileEx {
  t.Config t.SrcPos e.UnitName
    = <Config-GetTargetMode t.Config> : s.TargetMode
    = <FindFiles s.TargetMode (<GetFolders t.Config>) (e.UnitName)>
    : {
        (NotFound e.Unit) = (Error t.SrcPos 'Unit ' e.Unit ' not found');

        t.FoundUnit = t.FoundUnit;
      };
}

GetFolders {
  t.Config
    = <Map
        {
          REF5RSL = REF5RSL;
          (s.FolderTag e.Folder) = (e.Folder);
        }
        <Config-GetFolders t.Config>
      >;
}

UpdatePrefix {
  t.Config t.SrcPos e.Prefix
    = <Config-GetPrefix t.Config>
    : {
        NotSet
          = <Config-SetPrefix t.Config e.Prefix> : Success t.Config^
          = t.Config;

        e.Prefix /* тот же самый */ = t.Config;

        e.OtherPrefix = t.Config (Error t.SrcPos 'prefix already defined');
      };
}

FindIncludeEx {
  t.Config t.SrcPos Fails e.ErrorMessage
    = (Error t.SrcPos <FormatEscapeError e.ErrorMessage>);

  t.Config t.SrcPos Success e.FileName
    = <FindInclude (<GetFolders t.Config>) e.FileName>
    : {
        Success s.Dialect e.FullPath = (Include s.Dialect e.FullPath);

        Fails = (Error t.SrcPos 'Include ' e.FileName ' not found');
      };
}

UnEscapeString {
  SR e.EscapedName = <UnEscapeString-SR e.EscapedName>;
  R5 e.EscapedName = <UnEscapeString-R5 e.EscapedName>;
}

FormatEscapeError {
  BadEscapeCode e.Text = 'Bad escape code ' e.Text;
  BadEscapeSymbol e.BadSymbol = 'Bad escaped symbol ' e.BadSymbol;
  EOLAfterSlash = 'End-of-line after \\';
}


UnEscapeString-R5 {
  e.String = <DoUnEscapeString-R5 () e.String>;
}

DoUnEscapeString-R5 {
  (e.Scanned) '\\' s.Escaped e.Tail
    , ('\'\'') ('""') ('n\n') ('r\r') ('t\t') ('((') ('))') ('<<') ('>>')
    : e.Begin (s.Escaped s.Char) e.End
    = <DoUnEscapeString-R5 (e.Scanned s.Char) e.Tail>;

  (e.Scanned) '\\x' s.Hex1 s.Hex2 e.Tail
    , <HexDigit s.Hex1> : s.Num1
    , <HexDigit s.Hex2> : s.Num2
    = <DoUnEscapeString-R5
        (e.Scanned <Chr <Add <Mul s.Num1 16> s.Num2>>) e.Tail
      >;

  (e.Scanned) '\\x' e.Tail = Fail BadEscapeCode '\\x' <Prefix3 e.Tail>;
  (e.Scanned) '\\' s.Next e.Tail = Fail BadEscapeSymbol '\\' s.Next;
  (e.Scanned) '\\' /* EOL */ = Fail EOLAfterSlash;

  (e.Scanned) s.Char e.Tail = <DoUnEscapeString-R5 (e.Scanned s.Char) e.Tail>;

  (e.Scanned) /* empty */ = Success e.Scanned;
}

HexDigit {
  '0' = 0; '1' = 1; '2' = 2; '3' = 3; '4' = 4;
  '5' = 5; '6' = 6; '7' = 7; '8' = 8; '9' = 9;

  'A' = 10; 'B' = 11; 'C' = 12; 'D' = 13; 'E' = 14; 'F' = 15;
  'a' = 10; 'b' = 11; 'c' = 12; 'd' = 13; 'e' = 14; 'f' = 15;

  s.Other = /* empty */;
}

Prefix3 {
  s.1 s.2 s.3 s.4 e.Tail = s.1 s.2 s.3 '...';
  e.ShortExpr = e.ShortExpr;
}
