/*
  Внутреннее представление:

  [Config (s.Option e.Value)*]
*/
$ENUM Config;

/**
  <Config-Create> == t.Config
*/
$ENTRY Config-Create {
  /* пусто */
    = [Config
        (CppCompilerExe /* пусто */)
        (CppCompilerLib /* пусто */)
        (Folders /* пусто */)
        (SrefCompiler ('srefc-core') /* флаги */)
        (TargetFileName DefaultTarget)
        (SourceFile NotSet)
        (Prefix NotSet)
        (References /* пусто */)
        (TargetMode DefaultEXE)
        (Prelude /* пусто */)
        (Runtime /* пусто */)
        (Incorporateds /* пусто */)
        (KeepRasls False)
        (TempDir /* пусто */)
        (OverwriteExistRasls False)
        (CppCompilerExeSuf /* пусто */)
        (CppCompilerLibSuf /* пусто */)
      ];
}

/**
  <Config-GetCppCompilerExe t.Config>
    == e.CppCompilerExe
*/
$ENTRY Config-GetCppCompilerExe {
  [Config e.Params-B (CppCompilerExe e.CppCompilerExe) e.Params-E]
    = e.CppCompilerExe;
}

/**
  <Config-SetCppCompilerExe t.Config e.CppCompilerExe>
    == Success t.Config
*/
$ENTRY Config-SetCppCompilerExe {
  [Config e.Params-B (CppCompilerExe e.OldCppCompilerExe) e.Params-E]
  e.CppCompilerExe
    = Success
      [Config e.Params-B (CppCompilerExe e.CppCompilerExe) e.Params-E];
}

/**
  <Config-GetCppCompilerLib t.Config>
    == e.CppCompilerLib
*/
$ENTRY Config-GetCppCompilerLib {
  [Config e.Params-B (CppCompilerLib e.CppCompilerLib) e.Params-E]
    = e.CppCompilerLib;
}

/**
  <Config-SetCppCompilerLib t.Config e.CppCompilerLib>
    == Success t.Config
*/
$ENTRY Config-SetCppCompilerLib {
  [Config e.Params-B (CppCompilerLib e.OldCppCompilerLib) e.Params-E]
  e.CppCompilerLib
    = Success
      [Config e.Params-B (CppCompilerLib e.CppCompilerLib) e.Params-E];
}

/**
  <Config-GetFolders t.Config>
    == (s.FolderType e.Path)*

  s.FolderType ::= Search | Runtime
*/
$ENTRY Config-GetFolders {
  [Config e.Params-B (Folders e.Folders) e.Params-E]
    = e.Folders;
}

/**
  <Config-AddFolder t.Config s.FolderType e.Path>
    == Success t.Config
*/
$ENTRY Config-AddFolder {
  [Config e.Params-B (Folders e.Folders) e.Params-E] Search e.Path
    = Success
      [Config e.Params-B (Folders e.Folders (Search e.Path)) e.Params-E];

  [Config e.Params-B (Folders e.Folders) e.Params-E] Runtime e.Path
    = Success
      [Config e.Params-B (Folders e.Folders (Runtime e.Path)) e.Params-E];

  [Config e.Params-B (Folders e.Folders) e.Params-E] REF5RSL
    = Success
      [Config e.Params-B (Folders e.Folders REF5RSL) e.Params-E];
}

/**
  <Config-GetSrefCompiler t.Config>
    == e.SrefCompiler
*/
$ENTRY Config-GetSrefCompiler {
  [Config e.Params-B (SrefCompiler (e.Compiler) e.Flags) e.Params-E]
    = e.Compiler e.Flags;
}

/**
  <Config-SetSrefCompiler t.Config e.Compiler>
    == Success t.Config
*/
$ENTRY Config-SetSrefCompiler {
  [Config e.Params-B (SrefCompiler (e.OldCompiler) e.Flags) e.Params-E]
  e.SrefCompiler
    = Success
      [Config e.Params-B (SrefCompiler (e.SrefCompiler) e.Flags) e.Params-E];
}

/**
  <Config-AddSrefCompilerFlag t.Config e.Flags>
    == Success t.Config
*/
$ENTRY Config-AddSrefCompilerFlag {
  [Config e.Params-B (SrefCompiler t.SrefCompiler e.Flags) e.Params-E]
  e.NewFlags
    = Success
      [Config
        e.Params-B
        (SrefCompiler t.SrefCompiler e.Flags ' "' e.NewFlags '"')
        e.Params-E
      ];
}

/**
  <Config-GetTargetFileName t.Config>
    == DefaultTarget
    == e.TargetFileName
*/
$ENTRY Config-GetTargetFileName {
  [Config e.Params-B (TargetFileName e.TargetFileName) e.Params-E]
    = e.TargetFileName;
}

/**
  <Config-SetTargetFileName t.Config e.TargetFileName>
    == Success t.Config
*/
$ENTRY Config-SetTargetFileName {
  [Config e.Params-B (TargetFileName e.OldTargetFileName) e.Params-E]
  e.NewTargetFileName
    = Success
      [Config e.Params-B (TargetFileName e.NewTargetFileName) e.Params-E];
}

/**
  <Config-GetSourceFile t.Config>
    == e.SourceFile
*/
$ENTRY Config-GetSourceFile {
  [Config e.Params-B (SourceFile e.FileName) e.Params-E]
    = e.FileName;
}

/**
  <Config-SetSourceFile t.Config e.SourceFile>
    == Success t.Config
    == Fails ManySourceFiles
*/
$ENTRY Config-SetSourceFile {
  [Config e.Params-B (SourceFile NotSet) e.Params-E] e.SourceFile
    = Success [Config e.Params-B (SourceFile e.SourceFile) e.Params-E];

  [Config e.Params-B (SourceFile e.OldSourceFile) e.Params-E] e.SourceFile
    = Fails ManySourceFiles;
}

/**
  <Config-GetPrefix t.Config>
    == NotSet
    == e.Prefix

  При этом пустое значение префикса является допустимым — это означает,
  что пользователь его не указал.
*/
$ENTRY Config-GetPrefix {
  [Config e.Params-B (Prefix e.Prefix) e.Params-E] = e.Prefix;
}

/**
  <Config-SetPrefix t.Config e.Prefix>
    == Success t.Config
*/
$ENTRY Config-SetPrefix {
  [Config e.Params-B (Prefix e.OldPrefix) e.Params-E] e.NewPrefix
    = Success [Config e.Params-B (Prefix e.NewPrefix) e.Params-E];
}

/**
  <Config-GetReferences t.Config>
    == (e.Reference)*
*/
$ENTRY Config-GetReferences {
  [Config e.Params-B (References e.References) e.Params-E]
    = e.References;
}

/**
  <Config-AddReference t.Config e.Reference>
    = Success t.Config
*/
$ENTRY Config-AddReference {
  [Config e.Params-B (References e.References) e.Params-E] e.NewReference
    = Success
      [Config
        e.Params-B (References e.References (e.NewReference)) e.Params-E
      ];
}

/**
  <Config-GetTargetMode t.Config>
    == DefaultEXE
    == s.TargetMode

  s.TargetMode ::= EXE | LIB | R | CompileOnly
*/
$ENTRY Config-GetTargetMode {
  [Config e.Params-B (TargetMode s.TargetMode) e.Params-E]
    = s.TargetMode;
}

/**
  <Config-SetTargetMode t.Config s.TargetMode>
    == Success t.Config
    == Fails TargetModeAlreadySet
*/
$ENTRY Config-SetTargetMode {
  [Config e.Params-B (TargetMode DefaultEXE) e.Params-E] s.NewTargetMode
    = Success
      [Config e.Params-B (TargetMode s.NewTargetMode) e.Params-E];

  /* Допускаем повторное определение того же режима */
  [Config e.Params-B (TargetMode s.TargetMode) e.Params-E] s.TargetMode
    = Success [Config e.Params-B (TargetMode s.TargetMode) e.Params-E];

  [Config e.Params-B (TargetMode s.OldTargetMode) e.Params-E] e.NewTargetMode
    = Fails TargetModeAlreadySet;
}

/**
  <Config-GetPrelude t.Config> == e.Prelude

  Пустое значение является допустимым — означает, что стандартное вступление
  подключать не надо.
*/
$ENTRY Config-GetPrelude {
  [Config e.Params-B (Prelude e.Prelude) e.Params-E] = e.Prelude;
}

/**
  <Config-SetPrelude t.Config e.Prelude>
    == Success t.Config
*/
$ENTRY Config-SetPrelude {
  [Config e.Params-B (Prelude e.OldPrelude) e.Params-E] e.NewPrelude
    = Success [Config e.Params-B (Prelude e.NewPrelude) e.Params-E];
}

/**
  <Config-GetRuntimeFiles t.Config> == (e.FileName)*
*/
$ENTRY Config-GetRuntimeFiles {
  [Config e.Params-B (Runtime e.Files) e.Params-E] = e.Files;
}

/**
  <Config-AddRuntimeFile t.Config e.FileName>
    == Success t.Config
*/
$ENTRY Config-AddRuntimeFile {
  [Config e.Params-B (Runtime e.Files) e.Params-E] e.NewFile
    = Success
      [Config e.Params-B (Runtime e.Files (e.NewFile)) e.Params-E];
}

/**
  <Config-GetIncorporateds t.Config>
    == (e.LibName)*
*/
$ENTRY Config-GetIncorporateds {
  [Config e.Params-B (Incorporateds e.LibNames) e.Params-E] = e.LibNames;
}

/**
  <Config-AddIncorporated t.Config e.LibName>
    = Success t.Config
*/
$ENTRY Config-AddIncorporated {
  [Config e.Params-B (Incorporateds e.LibNames) e.Params-E] e.NewLibName
    = Success
      [Config
        e.Params-B (Incorporateds e.LibNames (e.NewLibName)) e.Params-E
      ];
}

/**
  <Config-GetKeepRasls t.Config> == s.Bool
*/
$ENTRY Config-GetKeepRasls {
  [Config e.Params-B (KeepRasls s.Value) e.Params-E] = s.Value;
}

/**
  <Config-SetKeepRasls t.Config s.Bool> == Success t.Config
*/
$ENTRY Config-SetKeepRasls {
  [Config e.Params-B (KeepRasls s.OldValue) e.Params-E] s.NewValue
    = Success [Config e.Params-B (KeepRasls s.NewValue) e.Params-E];
}

/**
  <Config-GetTempDir t.Config> == e.DirName
*/
$ENTRY Config-GetTempDir {
  [Config e.Params-B (TempDir e.DirName) e.Params-E] = e.DirName;
}

/**
  <Config-SetTempDir t.Config e.DirName> == Success t.Config
*/
$ENTRY Config-SetTempDir {
  [Config e.Params-B (TempDir e.OldDirName) e.Params-E] e.NewDirName
    = Success [Config e.Params-B (TempDir e.NewDirName) e.Params-E];
}

/**
  <Config-GetOverwriteExistRasls t.Config> == s.Bool
*/
$ENTRY Config-GetOverwriteExistRasls {
  [Config e.Params-B (OverwriteExistRasls s.Value) e.Params-E] = s.Value;
}
/**
  <Config-SetOverwriteExistRasls t.Config s.Bool> == Success t.Config
*/
$ENTRY Config-SetOverwriteExistRasls {
  [Config e.Params-B (OverwriteExistRasls s.OldValue) e.Params-E] s.NewValue
    = Success [Config e.Params-B (OverwriteExistRasls s.NewValue) e.Params-E];
}

/**
  <Config-GetCppCompilerExeSuf t.Config>
    == e.CppCompilerExeSuf
*/
$ENTRY Config-GetCppCompilerExeSuf {
  [Config e.Params-B (CppCompilerExeSuf e.CppCompilerExeSuf) e.Params-E]
    = e.CppCompilerExeSuf;
}

/**
  <Config-SetCppCompilerExeSuf t.Config e.CppCompilerExeSuf>
    == Success t.Config
*/
$ENTRY Config-SetCppCompilerExeSuf {
  [Config e.Params-B (CppCompilerExeSuf e.OldCppCompilerExeSuf) e.Params-E]
  e.CppCompilerExeSuf
    = Success
      [Config e.Params-B (CppCompilerExeSuf e.CppCompilerExeSuf) e.Params-E];
}

/**
  <Config-GetCppCompilerLibSuf t.Config>
    == e.CppCompilerLibSuf
*/
$ENTRY Config-GetCppCompilerLibSuf {
  [Config e.Params-B (CppCompilerLibSuf e.CppCompilerLibSuf) e.Params-E]
    = e.CppCompilerLibSuf;
}

/**
  <Config-SetCppCompilerLibSuf t.Config e.CppCompilerLibSuf>
    == Success t.Config
*/
$ENTRY Config-SetCppCompilerLibSuf {
  [Config e.Params-B (CppCompilerLibSuf e.OldCppCompilerLibSuf) e.Params-E]
  e.CppCompilerLibSuf
    = Success
      [Config e.Params-B (CppCompilerLibSuf e.CppCompilerLibSuf) e.Params-E];
}
