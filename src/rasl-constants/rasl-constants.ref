$INCLUDE "LibraryEx";


$ENTRY Go {
  =
    <Fetch
      <ArgList>
      {
        (e.ProgName) (e.refalrts-h) (e.Opcodes-sref) =
          <Generate (e.refalrts-h) (e.Opcodes-sref) <Parse e.refalrts-h>>;

        (e.ProgName) e.Other =
          <Help>;
      }
    >;
}

Help {
  =
    <Prout 'rasl-constants - generates mnemonic->opcode map from runtime header'>
    <Prout>
    <Prout 'Usage:'>
    <Prout '\trasl-constants refalrts.h Opcodes.sref'>;
}

Parse {
  e.Source =
    <MapAccum
      {
        Scan
        ('enum ' e.EnumName '{ /*' e.FuncName ':' e.Prefix ';' e.Words '*/') =
          <Fetch
            <SplitWords <Trim e.Words>>
            {
              e.SplittenWords =
                (ParseEnum (<Word-Prefix e.Prefix>) e.SplittenWords)
                (Header <Trim e.FuncName>);
            }
          >;

        Scan (e.OtherLine) = Scan;

        Scan EOF = Success;

        (ParseEnum ((e.OutPrefix) e.Prefix) e.Words)
        ('  ' e.Prefix e.Constant ' = ' e.Number ',') =
          (ParseEnum ((e.OutPrefix) e.Prefix) e.Words)
          (
            (<MakeDashes <ParseWords (e.OutPrefix) e.Words (e.Constant)>>)
            '=' (e.Number)
          );

        (ParseEnum ((e.OutPrefix) e.Prefix) e.Words)
        ('  /*+WORDS:' e.RawWords '*/') =
          (ParseEnum
            ((e.OutPrefix) e.Prefix)
            e.Words <SplitWords <Trim e.RawWords>>
          );

        (ParseEnum ((e.OutPrefix) e.Prefix) e.Words) ('};') = Scan ('}');

        (ParseEnum (e.Prefix) e.Words) t.LineOrEOF = Fails;

        Fails t.LineOrEOF = Fails;
      }
      Scan
      <LoadFile e.Source> EOF
    >;
}

SplitWords {
  /* пусто */ = /* пусто */;

  e.Word ',' e.Words = (<Word-Prefix e.Word>) <SplitWords e.Words>;

  e.Word = (<Word-Prefix e.Word>);
}

Word-Prefix {
  e.Prefix '+' e.Word = (<Trim e.Prefix>) <Trim e.Word>;

  e.Word = () <Trim e.Word>;
}

ParseWords {
  (e.OutPrefix) e.Words-B ((e.Prefix) e.WholeWord) e.Words-E (e.WholeWord) =
    e.Prefix e.WholeWord;

  (e.OutPrefix) e.Words-B ((e.Prefix) e.Word) e.Words-E (e.Word e.Tail) =
    e.Prefix e.Word ' '
    <ParseWords (e.OutPrefix) e.Words-B (e.Word) e.Words-E (e.Tail)>;

  (e.OutPrefix) e.Words-B ((e.Prefix) e.Word) e.Words-E (e.Init e.Word) =
    <ParseWords (e.OutPrefix) e.Words-B (e.Word) e.Words-E (e.Init)>
    ' ' e.Prefix e.Word;

  (e.OutPrefix) e.Words (s.MaybeVarIndex e.OneWord) =
    <CheckVarIndex (e.OutPrefix) s.MaybeVarIndex> e.OneWord;
}

CheckVarIndex {
  (e.OutPrefix) 's' = '\'s\' ' e.OutPrefix;
  (e.OutPrefix) 't' = '\'t\' ' e.OutPrefix;
  (e.OutPrefix) 'e' = '\'e\' ' e.OutPrefix;
  (e.OutPrefix) s.Other = e.OutPrefix s.Other;
}

MakeDashes {
  e.Text-B '_' e.Text-E = e.Text-B '-' <MakeDashes e.Text-E>;
  e.Text = e.Text;
}

Generate {
  (e.Source) (e.Target) Success e.Lines =
    <SaveFile
      (e.Target)
      ('/*')
      ('  File generated automatically from ' e.Source)
      ('  Edit ' e.Source ' first and then run:')
      ('  $ rasl-constants ' e.Source ' ' e.Target)
      ('*/')
      <Map
        {
          (Header e.FuncName) = () ('$ENTRY ' e.FuncName '{');
          ((e.Words) '=' (e.Number)) = ('  ' e.Words ' = ' e.Number ';');
          ('}') = ('}');
        }
        e.Lines
      >
    >;

  (e.Source) (e.Target) Fails e.Lines =
    <Prout 'rasl-constants: wrong file ' e.Source>;
}
