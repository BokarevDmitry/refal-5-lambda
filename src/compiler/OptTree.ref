$INCLUDE "LibraryEx";

*$FROM Config
$EXTERN Config-GetTreeOptCycles, Config-GetOptDrive, Config-GetOptSpec;

*$FROM OptTree-Drive
$EXTERN OptTree-Drive-ExtractOptInfo, OptTree-Drive,
  OptTree-Drive-CleanupColdCalls;

*$FROM OptTree-Spec
$EXTERN OptTree-Spec-ExtractOptInfo, OptTree-Spec,
  OptTree-Spec-CleanupColdFunctions;

*$FROM Log
$EXTERN Log-PutLine, Log-AST;

*$FROM DisplayName
$EXTERN DisplayName;


/**
  <OptTree t.Config e.AST> == e.OptAST

  e.OptAST не содержит разметки, описывающей прогоняемые, встраиваемые
  и специализируемые функции.
*/
$ENTRY OptTree {
  t.Config e.AST
    = <Config-GetTreeOptCycles t.Config> : s.Cycles
    = <Config-GetOptDrive t.Config> : s.OptDrive
    = <Config-GetOptSpec t.Config> : s.OptSpec
    = <OptTree-Aux s.Cycles s.OptDrive s.OptSpec e.AST>;
}

OptTree-Aux {
  s.Cycles s.OptDrive s.OptSpec e.AST

    = <OptTree-Drive-ExtractOptInfo s.OptDrive e.AST>
    : ((e.DriveFuncNames) e.DriveInfo-Specific) e.AST^

    = <OptTree-Spec-ExtractOptInfo s.OptSpec e.AST>
    : ((e.SpecFuncNames) e.SpecInfo-Specific) e.AST^

    = e.DriveFuncNames e.SpecFuncNames : e.OptimizableFunctions

    = <Log-PutLine
        'Optimizable functions:'
        <Map
          {
            (e.FuncName) = ' ' <DisplayName e.FuncName>
          }
          e.OptimizableFunctions
        >
      >
      <DoOptTree
        s.Cycles s.OptDrive s.OptSpec
        ((e.DriveFuncNames) e.DriveInfo-Specific)
        ((e.SpecFuncNames) e.SpecInfo-Specific)
        e.AST
      >;
}

DoOptTree {
  0 s.OptDrive s.OptSpec (e.DriveInfo) (e.SpecInfo) e.AST
    = <OptTree-Spec-CleanupColdFunctions e.AST>;

  s.Cycles s.OptDrive s.OptSpec (e.DriveInfo) (e.SpecInfo) e.AST
    = e.AST : e.OriginAST

    = <DoOptTree-DriveLoop s.Cycles s.OptDrive (e.DriveInfo) e.AST>
    : s.Cycles^ (e.DriveInfo^) e.AST^

    = <DoOptTree-SpecPass s.Cycles s.OptSpec (e.SpecInfo) e.AST>
    : s.Cycles^ (e.SpecInfo^) e.AST^

    = e.AST
    : {
        e.OriginAST = 0 e.OriginAST;
        e.AST^ = s.Cycles e.AST;
      }
    : s.Cycles^ e.AST^
    = <DoOptTree s.Cycles s.OptDrive s.OptSpec (e.DriveInfo) (e.SpecInfo) e.AST>;
}

DoOptTree-DriveLoop {
  0 s.OptDrive (e.DriveInfo) e.AST
    = <OptTree-Drive-CleanupColdCalls e.AST> : e.AST^
    = 0 (e.DriveInfo) e.AST;

  s.Cycles s.OptDrive (e.DriveInfo) e.AST
    = <Log-AST ('Pass ' <Symb s.Cycles> ' (before Drive)') e.AST> : e.AST^
    = e.AST : e.OriginAST
    = <OptTree-ExpandClosures e.AST> : e.AST^
    = <Dec s.Cycles> : s.Cycles^
    = <OptTree-Drive s.OptDrive (e.DriveInfo) e.AST> : (e.DriveInfo^) e.AST^
    = e.AST
    : {
        e.OriginAST
          = s.Cycles (e.DriveInfo)
            <OptTree-Drive-CleanupColdCalls e.AST>;

        e.AST^
          = <DoOptTree-DriveLoop s.Cycles s.OptDrive (e.DriveInfo) e.AST>;
      };
}

DoOptTree-SpecPass {
  0 s.OptSpec (e.SpecInfo) e.AST = (e.SpecInfo) e.AST;

  s.Cycles s.OptSpec (e.SpecInfo) e.AST
    = <Log-AST ('Pass ' <Symb s.Cycles> ' (before Spec)') e.AST> : e.AST^
    = <Dec s.Cycles> <OptTree-Spec s.OptSpec (e.SpecInfo) e.AST>
}



/**
  <OptTree-CleanupMarkup e.AST> == e.OptAST
*/
$ENTRY OptTree-CleanupMarkup {
  e.AST = <OptTree-Aux 0 NoOpt NoOpt e.AST>;
}


OptTree-ExpandClosures {
  e.AST = <OptTree-Drive-CleanupColdCalls <OptTree-Simple () e.AST>>;
}

OptTree-Simple {
  (e.OptimizableFunctions) e.AST
    = <Map
        {
          (Function s.ScopeClass (e.Name) Sentences e.Body)
            = (Function
                s.ScopeClass (e.Name) Sentences
                <OptBody (e.OptimizableFunctions) e.Body>
              );

          t.OtherItem = t.OtherItem;
        }
        e.AST
      >;
}

OptBody {
  (e.OptimizableFunctions) e.Sentences
    = <Map (&OptSentence e.OptimizableFunctions) e.Sentences>;
}

OptSentence {
  e.OptimizableFunctions ((e.Pattern) e.Conditions (e.Result))
    = (
        (e.Pattern)
        <Map
          {
            (Condition (e.Name) (e.Result^) (e.Pattern^))
              = (Condition
                  (e.Name)
                  (<OptResult (e.OptimizableFunctions) e.Result>)
                  (e.Pattern)
                );
          }
          e.Conditions
        >
        (<OptResult (e.OptimizableFunctions) e.Result>)
      );
}

/*
  s.Temp ::= Cold | Hot — температура аргумента функции
*/

OptResult {
  (e.OptimizableFunctions) e.Result
    = <OptResultRec (e.OptimizableFunctions) Cold e.Result> : s.Temp e.Result^
    = e.Result;
}

OptResultRec {
  (e.OptimizableFunctions) s.Temp e.Result
    = <MapAccum (&OptResultTerm e.OptimizableFunctions) s.Temp e.Result>;
}

OptResultTerm {
  e.OptimizableFunctions s.Temp (Brackets e.Expr)
    = <OptResultRec (e.OptimizableFunctions) s.Temp e.Expr> : s.Temp^ e.Expr^
    = s.Temp (Brackets e.Expr);

  e.OptimizableFunctions s.Temp (ADT-Brackets (e.Name) e.Expr)
    = <OptResultRec (e.OptimizableFunctions) s.Temp e.Expr> : s.Temp^ e.Expr^
    = s.Temp (ADT-Brackets (e.Name) e.Expr);

  /* Терм горячий, ещё предстоит проанализировать */
  e.OptimizableFunctions s.Temp (CallBrackets (ClosureBrackets e.Content) e.Expr)
    = <OptResultRec (e.OptimizableFunctions) Cold e.Expr> : s.Temp^ e.Expr^
    = Hot (CallBrackets e.Content e.Expr);

  /* Вызов оптимизируемой функции, значит терм горячий */
  e.OptimizableFunctions s.Temp (CallBrackets (Symbol Name e.FuncName) e.Expr)
    , e.OptimizableFunctions : e.Funcs-B (e.FuncName) e.Funcs-E
    = <OptResultRec (e.OptimizableFunctions) Cold e.Expr> : s.Temp^ e.Expr^
    = Hot (CallBrackets (Symbol Name e.FuncName) e.Expr);

  /*
    Вызов неоптимизированной функции, можем остудить, если аргумент холодный
    Сам терм тоже можем считать холодным
  */
  e.OptimizableFunctions s.Temp (CallBrackets e.Expr)
    = <OptResultRec (e.OptimizableFunctions) Cold e.Expr>
    : {
        Hot e.Expr^ = Hot (CallBrackets e.Expr);

        /* Оставляем старую температуру, мы ничего не нагрели */
        Cold e.Expr^ = s.Temp (ColdCallBrackets e.Expr);
      };

  /* Остывший вызов уже проанализирован на прошлых проходах */
  e.OptimizableFunctions s.Temp (ColdCallBrackets e.Expr)
    = s.Temp (ColdCallBrackets e.Expr);

  e.OptimizableFunctions s.Temp t.OtherTerm = s.Temp t.OtherTerm;
}

