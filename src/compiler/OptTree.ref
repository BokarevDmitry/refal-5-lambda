$INCLUDE "LibraryEx";

*$FROM Config
$EXTERN Config-GetTreeOptCycles, Config-GetOptDrive, Config-GetOptSpec,
  Config-GetOptAutoMarkup, Config-GetOptIntrinsic;

*$FROM OptTree-AutoMarkup
$EXTERN OptTree-AutoMarkup, OptTree-AutoMarkup-CleanupTags;

*$FROM OptTree-Drive
$EXTERN OptTree-Drive-Prepare, OptTree-Drive, OptTree-Drive-CleanupColdCalls;

*$FROM OptTree-Spec
$EXTERN OptTree-Spec-Prepare, OptTree-Spec, OptTree-Spec-CleanupColdFunctions;

*$FROM Log
$EXTERN Log-PutLine, Log-AST;

*$FROM DisplayName
$EXTERN DisplayName;


/**
  <OptTree t.Config e.AST> == e.OptAST

  e.OptAST не содержит разметки, описывающей прогоняемые, встраиваемые
  и специализируемые функции.
*/
$ENTRY OptTree {
  t.Config e.AST
    = <Config-GetTreeOptCycles t.Config> : s.Cycles
    = <Config-GetOptDrive t.Config> : s.OptDrive
    = <Config-GetOptSpec t.Config> : s.OptSpec
    = <Config-GetOptAutoMarkup t.Config> : s.OptAutoMarkup
    = <Config-GetOptIntrinsic t.Config> : s.OptIntrinsic
    = <OptTree-Aux
        s.Cycles (s.OptDrive s.OptIntrinsic) s.OptSpec s.OptAutoMarkup e.AST
      >
    : s.Cycles^ e.AST^
    = <OptTree-CleanupMarkup e.AST>;
}

OptTree-Aux {
  s.Cycles t.OptDrive s.OptSpec NoOpt e.AST
    = <DriveSpecLoop s.Cycles t.OptDrive s.OptSpec e.AST>;

  s.Cycles t.OptDrive s.OptSpec s.OptAutoMarkup e.AST
    = <DoOptTree s.Cycles t.OptDrive s.OptSpec s.OptAutoMarkup e.AST>;
}

DoOptTree {
  0 t.OptDrive s.OptSpec s.OptAutoMarkup e.AST = 0 e.AST;

  s.Cycles t.OptDrive s.OptSpec s.OptAutoMarkup e.AST
    = <Log-AST ('Pass ' <Symb s.Cycles> ' (before Auto markup)') e.AST> : e.AST^
    = e.AST : e.OriginAST

    = <OptTree-AutoMarkup s.OptAutoMarkup e.AST> : e.AST^
    = <Dec s.Cycles> : s.Cycles^

    = <DriveSpecLoop s.Cycles t.OptDrive s.OptSpec e.AST> : s.Cycles^ e.AST^

    = e.AST
    : {
        e.OriginAST = s.Cycles e.OriginAST;
        e.AST^ = <DoOptTree s.Cycles t.OptDrive s.OptSpec s.OptAutoMarkup e.AST>;
      }
}

DriveSpecLoop {
  s.Cycles t.OptDrive NoOpt e.AST
    = <OptTree-Drive-Prepare t.OptDrive e.AST> : e.AST^
    = <DriveLoop s.Cycles t.OptDrive e.AST>;

  s.Cycles t.OptDrive s.OptSpec e.AST
    = <OptTree-Drive-Prepare t.OptDrive e.AST> : e.AST^
    = <OptTree-Spec-Prepare s.OptSpec e.AST> : e.AST^
    = <DoDriveSpecLoop s.Cycles t.OptDrive s.OptSpec e.AST> : s.Cycles^ e.AST^
    = s.Cycles <OptTree-Spec-CleanupColdFunctions e.AST>;
}

DoDriveSpecLoop {
  0 t.OptDrive s.OptSpec e.AST = 0 e.AST;

  s.Cycles t.OptDrive s.OptSpec e.AST
    = e.AST : e.OriginAST
    = <DriveLoop s.Cycles t.OptDrive e.AST> : s.Cycles^ e.AST^
    = <SpecPass s.Cycles s.OptSpec e.AST> : s.Cycles^ e.AST^
    = e.AST
    : {
        e.OriginAST = s.Cycles e.OriginAST;
        e.AST^ = <DoDriveSpecLoop s.Cycles t.OptDrive s.OptSpec e.AST>;
      }
}

DriveLoop {
  s.Cycles (NoOpt NoOpt) e.AST
    = s.Cycles <ExpandClosures e.AST>;

  s.Cycles t.OptDrive e.AST
    = <DoDriveLoop s.Cycles t.OptDrive e.AST> : s.Cycles^ e.AST^
    = s.Cycles <OptTree-Drive-CleanupColdCalls e.AST>;
}

DoDriveLoop {
  0 t.OptDrive e.AST = 0 e.AST;

  s.Cycles t.OptDrive e.AST
    = <Log-AST ('Pass ' <Symb s.Cycles> ' (before Drive)') e.AST> : e.AST^
    = e.AST : e.OriginAST
    = <ExpandClosures e.AST> : e.AST^
    = <OptTree-Drive t.OptDrive e.AST> : e.AST^
    = <Dec s.Cycles> : s.Cycles^
    = e.AST
    : {
        e.OriginAST = s.Cycles e.OriginAST;
        e.AST^ = <DoDriveLoop s.Cycles t.OptDrive e.AST>;
      };
}

SpecPass {
  0 s.OptSpec e.AST = 0 e.AST;

  s.Cycles s.OptSpec e.AST
    = <Log-AST ('Pass ' <Symb s.Cycles> ' (before Spec)') e.AST> : e.AST^
    = <Dec s.Cycles> <OptTree-Spec s.OptSpec e.AST>
}


/**
  <OptTree-CleanupMarkup e.AST> == e.OptAST

  Удаляет метки $DRIVE, $INLINE, $INTRINSIC, $SPEC из дерева.
*/
$ENTRY OptTree-CleanupMarkup {
  e.AST
    = <Map
        {
          (Drive e.Name) = /* пропускаем */;
          (Inline e.Name) = /* пропускаем */;
          (Intrinsic e.Name) = /* пропускаем */;
          (Spec (e.Name) e.Pattern) = /* пропускаем */;

          (DriveInfo e.Info) = /* пропускаем */;
          (SpecInfo e.Info) = /* пропускаем */;

          t.Other = t.Other;
        }
        e.AST
      >
}


ExpandClosures {
  e.AST
    = <Map
        {
          (Function s.ScopeClass (e.Name) Sentences e.Body)
            = (Function
                s.ScopeClass (e.Name) Sentences
                <ExpandClosures-Body e.Body>
              );

          t.OtherItem = t.OtherItem;
        }
        e.AST
      >;
}

ExpandClosures-Body {
  e.Sentences = <Map &ExpandClosures-Sentence e.Sentences>;
}

ExpandClosures-Sentence {
  ((e.Pattern) e.Conditions (e.Result))
    = (
        (e.Pattern)
        <Map
          {
            (Condition (e.Name) (e.Result^) (e.Pattern^))
              = (Condition
                  (e.Name)
                  (<ExpandClosures-Result e.Result>)
                  (e.Pattern)
                );
          }
          e.Conditions
        >
        (<ExpandClosures-Result e.Result>)
      );
}

ExpandClosures-Result {
  e.Result = <Map &ExpandClusures-ResultTerm e.Result>;
}

ExpandClusures-ResultTerm {
  (Brackets e.Expr) = (Brackets <ExpandClosures-Result e.Expr>);

  (ADT-Brackets (e.Name) e.Expr)
    = (ADT-Brackets (e.Name) <ExpandClosures-Result e.Expr>);

  (CallBrackets (ClosureBrackets e.Content) e.Expr)
    = (CallBrackets <ExpandClosures-Result e.Content e.Expr>);

  (CallBrackets e.Expr) = (CallBrackets <ExpandClosures-Result e.Expr>);

  /*
    Анализировать холодные вызовы (ColdCallBrackets …) не нужно,
    поскольку они были проанализированы на предыдущих проходах
    и с тех пор не менялись.
  */

  t.OtherTerm = t.OtherTerm;
}

