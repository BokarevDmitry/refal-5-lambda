$INCLUDE "LibraryEx";

*$FROM GlobalGen
$EXTERN GlobalGen;

*$FROM GenericMatch
$EXTERN GenericMatch;

*$FROM Log
$EXTERN Log-PutLine;

*$FROM TreeUtils
$EXTERN ExtractVariables-Expr;


/**
  <OptTree-AutoMarkup-GetSpecializableDict (e.AST)>
    == ((e.Name) e.SpecPattern)*

  e.SpecPattern ::= e.Pattern
*/

$ENTRY OptTree-AutoMarkup-GetSpecializableDict {
  e.AST
    = <Map
        {
          (Function s.ScopeClass (e.Name) Sentences /* нет предложений */)
            = /* пусто */;

          (Function s.ScopeClass (e.Name) Sentences e.Body)
            = <Map
                {
                  ((e.Pattern) e.Conditions (e.Result)) = (e.Pattern);
                }
                e.Body
              >
              : e.ExtractedPatterns
            = <ContainsDuplications (e.ExtractedPatterns)>
            : {
                True = /* пусто */;
                False = <GetSpecifiedPattern (e.Name) e.ExtractedPatterns>;
              };

          t.Other = /* пусто */;
        }
        e.AST
      >;
}

ContainsDuplications {
  (e.ExtractedPatterns)
    = <Map
        {
          (e.Patterns)
            = <Map &GetPatternVariables e.Patterns>
            : {
                e.Head (e.Variable) e._ (e.Variable) e.Tail = (True);

                e.Other = (False);
              };
        }
        e.ExtractedPatterns
      >
    : {
        e.Head (True) e.Tail = True;

        e.Other = False;
      }
}

GetPatternVariables {
  (TkVariable e.Name) = (e.Name);

  (Symbol Identifier VAR e.Name) = (e.Name);

  (Brackets e.Nested)
    = <Map
        {
          (e.SubPattern) = <GetPatternVariables (e.SubPattern)>;
        }
        e.Nested
      >;

  (ADT-Brackets (e.Name) e.Nested)
    = <Map
        {
          (e.SubPattern) = <GetPatternVariables (e.SubPattern)>;
        }
        e.Nested
      >;

  (e.Other)
    = ;
}

GetSpecifiedPattern {
  (e.Name) e.ExtractedPatterns
    = <GetIndexedGlobalGen e.ExtractedPatterns> : e.IndexedGlobalGen
    = <Map
        {
          (e.ConcretePattern)
            = <GenericMatch (e.ConcretePattern) (e.IndexedGlobalGen)>
              : Clear e.GenericMatch
            = (e.GenericMatch);
        }
        e.ExtractedPatterns
      >
      : e.GenericMatches
    = <GetVariableMatches e.GenericMatches (e.IndexedGlobalGen)>
      : e.VariableMatchesDict
    = <StaticCandidates e.VariableMatchesDict>
    : {
        /* пусто */ = /* нет статических переменных, пропускаем */;

        e.StaticCandidates
          = <MarkupVarsInPattern (e.StaticCandidates) e.IndexedGlobalGen>
          : e.Pattern
          = ((e.Name) e.Pattern);
      };
}

GetIndexedGlobalGen {
  e.Patterns
    = <GlobalGen e.Patterns> : e.GlobalGen
    = <FillIndexes (e.GlobalGen) 't'> : e.GlobalGen^
    = <FillIndexes (e.GlobalGen) 'e'> : e.GlobalGen^
    = <FillIndexes (e.GlobalGen) 's'> : e.GlobalGen^
    = e.GlobalGen;
}

FillIndexes {
  (e.GlobalGen) s.Type
    = <FillIndexesRec (0) (e.GlobalGen) s.Type>
      : (e._) e.IndexedTypeGlobalGens
    = e.IndexedTypeGlobalGens;
}

FillIndexesRec {
  (e.StartIndex) (e.GlobalGen) s.Type
    = <MapAccum
        {
          (e.CurrentIndex) (TkVariable s.Type)
            = TkVariable s.Type e.CurrentIndex
              : e.IndexedVariable
            = <Add e.CurrentIndex 1>
              : e.NewIndex
            = (e.NewIndex) (e.IndexedVariable);

          (e.CurrentIndex) (TkVariable e.Other)
            = (e.CurrentIndex) (TkVariable e.Other);

          (e.CurrentIndex) (Brackets e.Nested)
            = <FillIndexesRec
                (e.CurrentIndex)
                (e.Nested)
                s.Type
              >
              : (e.NextIndex) e.IndexedTypeGlobalGens
            = (e.NextIndex) (Brackets e.IndexedTypeGlobalGens);

          (e.CurrentIndex) (ADT-Brackets (e.Name) e.Nested)
            = <FillIndexesRec
                (e.CurrentIndex)
                (e.Nested)
                s.Type
              >
              : (e.NextIndex) e.IndexedTypeGlobalGens
            = (e.NextIndex) (ADT-Brackets (e.Name) e.IndexedTypeGlobalGens);

          (e.CurrentIndex) (Symbol e.Info) = (e.CurrentIndex) (Symbol e.Info);
        }
        (e.StartIndex) e.GlobalGen
      >
}

GetVariableMatches {
  e.GenericMatches (e.IndexedGlobalGen)
    = <Unique <ExtractVariables-Expr e.IndexedGlobalGen>> : e.Variables

    = <Map
        {
          (s.Mode e.Index) = ((s.Mode e.Index) ':' /* matches */);
        }
        e.Variables
      >
    : e.VariableBags

    = <Reduce
        &GetVariableMatches-FillBag
        (e.VariableBags) e.GenericMatches
      >
    : (e.VariableBags^)

    = e.VariableBags;
}

GetVariableMatches-FillBag {
  (e.VariableBags) (e.Subst)
    = <Reduce
        {
          (e.Bag-B (t.Var ':' e.Matches) e.Bag-E) (e.Val ':' t.Var)
            = (e.Bag-B (t.Var ':' e.Matches (e.Val)) e.Bag-E);
        }
        (e.VariableBags) e.Subst
      >;
}

VarsSameIndex {
  s.Mode ((TkVariable s.Mode e._)) e.Matches = <VarsSameIndex s.Mode e.Matches>;
  s.Mode /* пусто */ = True;
  s.Mode e._ = False;
}

StaticCandidates {
  e.VariableMatchesDict
    = <Map
        {
          ((s.Mode s.Index) ':' e.Matches)
            , <VarsSameIndex s.Mode e.Matches> : True
            = (s.Mode s.Index);

          t.VarMatches = /* пропускаем */;
        }
        e.VariableMatchesDict
      >
}

MarkupVarsInPattern {
  (e.StaticParams) e.Pattern
    = <Map
        {
          (TkVariable s.Mode s.Index)
            , e.StaticParams : e._ (s.Mode s.Index) e._
            = (TkVariable s.Mode 'STAT' s.Index);

          (TkVariable s.Mode s.Index) = (TkVariable s.Mode 'dyn' s.Index);

          (Symbol e.Info) = (Symbol e.Info);

          (Brackets e.Expr)
            = (Brackets <MarkupVarsInPattern (e.StaticParams) e.Expr>);

          (ADT-Brackets (e.Name) e.Expr)
            = (ADT-Brackets
                (e.Name) <MarkupVarsInPattern (e.StaticParams) e.Expr>
              );
        }
        e.Pattern
      >;
}
