$INCLUDE "LibraryEx";

*$FROM GlobalGen
$EXTERN GlobalGen;

*$FROM GenericMatch
$EXTERN GenericMatch;

*$FROM Log
$EXTERN Log-PutLine;

/**
  <OptTree-AutoMarkup-GetSpecializableDict (e.AST)>
    == ((e.FuncName) '->' ((e.TypedVariable)+))

  e.TypedVariable = {s.VariableType}
                    {STAT | dyn}
                    {index}
*/

$ENTRY OptTree-AutoMarkup-GetSpecializableDict {
  (e.AST)
    = <Map
        {
          (Function s.ScopeClass (e.Name) Sentences e.Body)
            = <Map
                {
                  ((e.Pattern) e.Conditions (e.Result)) = (e.Pattern);
                }
                e.Body
              >
              : e.ExtractedPatterns
            = <ContainsDuplications (e.ExtractedPatterns)>
            : {
                True
                  = (NOTSPECIALIZABLE (e.Name));

                False
                  = <GetSpecifiedPattern (e.ExtractedPatterns)>
                  : e.SpecifiedPattern
                  = <GetSpecializableDictNode (e.Name) (e.SpecifiedPattern)>;
              };

          t.Other = ;
        }
        e.AST
      >;

  e.Other
    = ;
}

GetSpecializableDictNode {
  (e.FuncName) (e.SpecifiedPattern)
    , e.SpecifiedPattern : e.Head (s.Mode 'STAT' e.Suffix) e.Tail
    = (SPECIALIZABLE (e.FuncName) '->' (e.SpecifiedPattern));

  (e.FuncName) e.Other
    = (NOTSPECIALIZABLE (e.FuncName));
}

ContainsDuplications {
  (e.ExtractedPatterns)
    = <Map
        {
          (e.Patterns)
            = <Map &GetPatternVariables e.Patterns>
            : {
                e.Head (e.Variable) e._ (e.Variable) e.Tail = (True);

                e.Other = (False);
              };
        }
        e.ExtractedPatterns
      >
    : {
        e.Head (True) e.Tail = True;

        e.Other = False;
      }
}

GetPatternVariables {
  (TkVariable e.Name) = (e.Name);

  (Symbol Identifier VAR e.Name) = (e.Name);

  (Brackets e.Nested)
    = <Map
        {
          (e.SubPattern) = <GetPatternVariables (e.SubPattern)>;
        }
        e.Nested
      >;

  (ADT-Brackets (e.Name) e.Nested)
    = <Map
        {
          (e.SubPattern) = <GetPatternVariables (e.SubPattern)>;
        }
        e.Nested
      >;

  (e.Other)
    = ;
}

GetSpecifiedPattern {
  (e.ExtractedPatterns)
    = <GetIndexedGlobalGens (e.ExtractedPatterns)>
      : e.IndexedGlobalGens
    = <Map
        {
          (e.ConcretePattern)
            = <GenericMatch
                (e.ConcretePattern)
                (e.IndexedGlobalGens)
              >
              : e.GenericMatch
            = (e.GenericMatch);
        }
        e.ExtractedPatterns
      >
      : e.GenericMatches
    = <OptTree-AutoMarkup-GetVariableMatches
        (e.GenericMatches)
        (e.IndexedGlobalGens)
      >
      : e.VariableMatchesDict
    = <GetVariableSpecType (e.VariableMatchesDict)>
      : e.TypedVariables
    = e.TypedVariables;
}

GetIndexedGlobalGens {
  ()
    = ();

  (e.Patterns)
    = <GlobalGen e.Patterns> : e.GlobalGens
    = <FillIndexes (e.GlobalGens) 't'> : e.Result
    = <FillIndexes (e.Result) 'e'> : e.Result^
    = <FillIndexes (e.Result) 's'> : e.Result^
    = e.Result;
}

FillIndexes {
  (e.GlobalGens) s.Type
    = <FillIndexesRec (0) (e.GlobalGens) s.Type>
      : (e._) e.IndexedTypeGlobalGens
    = e.IndexedTypeGlobalGens;
}

FillIndexesRec {
  (e.StartIndex) (e.GlobalGens) s.Type
    = <MapAccum
        {
          (e.CurrentIndex) (TkVariable s.Type)
            = TkVariable s.Type '.' e.CurrentIndex
              : e.IndexedVariable
            = <Add e.CurrentIndex 1>
              : e.NewIndex
            = (e.NewIndex) (e.IndexedVariable);

          (e.CurrentIndex) (TkVariable e.Other)
            = (e.CurrentIndex) (TkVariable e.Other);

          (e.CurrentIndex) (Brackets e.Nested)
            = <FillIndexesRec
                (e.CurrentIndex)
                (e.Nested)
                s.Type
              >
              : (e.NextIndex) e.IndexedTypeGlobalGens
            = (e.NextIndex) (Brackets e.IndexedTypeGlobalGens);

          (e.CurrentIndex) (ADT-Brackets (e.Name) e.Nested)
            = <FillIndexesRec
                (e.CurrentIndex)
                (e.Nested)
                s.Type
              >
              : (e.NextIndex) e.IndexedTypeGlobalGens
            = (e.NextIndex) (ADT-Brackets (e.Name) e.IndexedTypeGlobalGens);

          (e.CurrentIndex) (e.Other)
            = (e.CurrentIndex) (e.Other);
        }
        (e.StartIndex) e.GlobalGens
      >
}

GetVariableMatchesByIndexedGlobalGen {
  TkVariable e.VariableName (e.GenericMatches)
    = <Map
        {
          (Clear e.Dict)
            = <GetMatchesByVariableName
                (e.VariableName)
                (e.Dict)
              >;
        }
        e.GenericMatches
      >
      : e.CurrentVariableRes
    = <GetVariablesTypes e.CurrentVariableRes>
      : e.CurrentVariableTypeRes
    = (e.VariableName ':' e.CurrentVariableTypeRes);

  Brackets e.Nested (e.GenericMatches)
    = <GetVariableMatchesByIndexedGlobalGen
        e.Nested
        (e.GenericMatches)
      >;

  ADT-Brackets (e.Name) e.Nested (e.GenericMatches)
    = <GetVariableMatchesByIndexedGlobalGen
        e.Nested
        (e.GenericMatches)
      >;

  (e.Nested) (e.GenericMatches)
    = <GetVariableMatchesByIndexedGlobalGen
        e.Nested
        (e.GenericMatches)
      >;

  e.Other
    = ;
}

OptTree-AutoMarkup-GetVariableMatches {
  (e.GenericMatches) (e.IndexedGlobalGens)
    = <Map
        {
          e.IndexedGlobalGenNode
            = <GetVariableMatchesByIndexedGlobalGen
                (e.IndexedGlobalGenNode)
                (e.GenericMatches)
              >;
        }
        e.IndexedGlobalGens
      >
}

GetVariablesTypes {
  () = ();

  TkVariable 's' e._ = TkVariable 's';
  TkVariable 't' e._ = TkVariable 't';
  TkVariable 'e' e._ = TkVariable 'e';

  Symbol e.Tail = Symbol e.Tail;

  Brackets e.Nested
    = <Map &GetVariablesTypes e.Nested> : e.NestedRes
    = Brackets e.NestedRes;

  ADT-Brackets (e.Name) e.Nested
    = <Map &GetVariablesTypes e.Nested> : e.NestedRes
    = ADT-Brackets (e.Name) e.NestedRes;

  (e.Nested) e.Tail
    = (<GetVariablesTypes e.Nested>)
      <GetVariablesTypes e.Tail>;

  e.Other = e.Other;
}

IsAllEqual {
  (e.Single) = True;

  (e.Value) (e.Value) = True;

  (e.First) (e.Next) e.Tail
    , e.Next : e.First
    = <IsAllEqual (e.First) e.Tail>;

  e._ = False;
}

GetMatchesByVariableName {
  (e.Key) (e.Head (e.Value ':' (e.Key)) e.Tail)
    = (e.Value);

  (e.Key) e.Other
    = ;
}

GetVariableSpecType {
  (e.VariableMatchesDict)
    = <Map
        {
          (t.VariableType '.' t.VariableIndex ':' e.Matches)
            = <IsAllEqual e.Matches>
              : {
                  True = (t.VariableType 'STAT' t.VariableIndex);
                  False = (t.VariableType 'dyn' t.VariableIndex);
                }
        }
        e.VariableMatchesDict
      >
}
