$INCLUDE "LibraryEx";

*$FROM DisplayName
$EXTERN DisplayName;

*$FROM Escape
$EXTERN EscapeChar;

*$FROM HighLevelRASL-GenResult-Simple
$EXTERN GenResult-Condition;

*$FROM HighLevelRASL-GenSubst-Save
$EXTERN GenSubst-Save;


$ENTRY Inc2 {
  s.Num = <Add 2 s.Num>;
}

$ENTRY IncVarOffset {
  s.ContextOffset 'e' = <Inc2 s.ContextOffset>;
  s.ContextOffset 't' = <Inc s.ContextOffset>;
  s.ContextOffset 's' = <Inc s.ContextOffset>;
}

$ENTRY PrintVar {
  s.Mode e.Index NoDepth = s.Mode '.' e.Index;

  s.Mode e.Index s.Depth = s.Mode '.' e.Index '#' <Symb s.Depth>;
}

$ENTRY TextFromExpr {
  e.Expr =
    <Map
      {
        (TkOpenBracket s.ContextOffset) =
          ' (' <Offset s.ContextOffset>;
        (TkCloseBracket s.ContextOffset) =
          ' )' <Offset s.ContextOffset>;

        (TkOpenCall s.ContextOffset) =
          ' <' <Offset s.ContextOffset>;
        (TkCloseCall s.ContextOffset) =
          ' >' <Offset s.ContextOffset>;

        (TkOpenADT s.ContextOffset e.Name s.NameOffset) =
          ' [' <Offset s.ContextOffset>
          <DisplayName e.Name> <Offset s.NameOffset>;

        (TkOpenADT s.ContextOffset) =
          ' [' <Offset s.ContextOffset>;
        (TkCloseADT s.ContextOffset) =
          ' ]' <Offset s.ContextOffset>;

        (TkClosureHead s.ContextOffset)
          = ' [*]' <Offset s.ContextOffset>;
        (TkUnwrappedClosure s.ContextOffset)
          = ' {*}' <Offset s.ContextOffset>;

        (Symbol Char s.Char s.Offset) =
          ' \'' <EscapeChar s.Char> '\'' <Offset s.Offset>;

        (TkChars e.Chars) = ' \'' e.Chars '\'';

        (Symbol Number Cookie1 s.Offset) = ' <Cookie1>' <Offset s.Offset>;
        (Symbol Number Cookie2 s.Offset) = ' <Cookie2>' <Offset s.Offset>;

        (Symbol Number s.Number s.Offset) = ' ' <Symb s.Number> <Offset s.Offset>;

        (Symbol Name e.Name s.Offset) =
          ' & ' <DisplayName e.Name> <Offset s.Offset>;

        (TkString e.String s.Offset) =
          '"' <Map &EscapeChar e.String> '"' <Offset s.Offset>;

        (Var s.Mode e.Index s.Depth s.Offset) =
          ' ' <PrintVar s.Mode e.Index s.Depth> <Offset s.Offset>;

        (VarCopy s.Mode e.Index s.Depth s.SampleOffset s.CopyOffset) =
          ' ' <PrintVar s.Mode e.Index s.Depth>
          <Offset s.SampleOffset> <Offset s.CopyOffset>;

        (Symbol Identifier e.Name s.Offset) =
          ' # ' <SafeDisplayName e.Name> <Offset s.Offset>;

        (Tile e.SubRange) = ' Tile{' <TextFromExpr e.SubRange> ' }';
        (AsIs e.SubRange) = ' AsIs:' <TextFromExpr e.SubRange>;
        (Reuse e.SubRange) = ' Reuse:' <TextFromExpr e.SubRange>;
        (HalfReuse e.SubRange) = ' HalfReuse:' <TextFromExpr e.SubRange>;

        (LEFT-EDGE) = ' [[';
        (RIGHT-EDGE) = ' ]]';
        RemovedTile = ' {REMOVED TILE}';
      }
      <TextFromExpr-Prepare e.Expr>
    >;
}

SafeDisplayName {
  e.Name
    = <Map
        {
          '\n' = '$n';
          '\r' = '$r';
          ' ' = '$_';
          '\t' = '$t';
          '$' = '$$';
          s.Other = s.Other;
        }
        <DisplayName e.Name>
      >;
}

TextFromExpr-Prepare {
  (Symbol Char s.Char NoOffset) e.Tail =
    <TextFromExpr-Prepare-Chars () (Symbol Char s.Char NoOffset) e.Tail>;

  (TkOpenADT s.BracketOffset) (Symbol Name e.Name s.NameOffset) e.Tail =
    (TkOpenADT s.BracketOffset e.Name s.NameOffset)
    <TextFromExpr-Prepare e.Tail>;

  t.Other e.Tail = t.Other <TextFromExpr-Prepare e.Tail>;

  /* пусто */ = /* пусто */;
}

TextFromExpr-Prepare-Chars {
  (e.Chars) (Symbol Char s.Char NoOffset) e.Tail =
    <TextFromExpr-Prepare-Chars (e.Chars <EscapeChar s.Char>) e.Tail>;

  (e.Chars) e.Tail = (TkChars e.Chars) <TextFromExpr-Prepare e.Tail>;
}

Offset {
  NoOffset = ;
  s.Offset = '/' <Symb s.Offset>;
}

/**
  <GenInitSubst s.ContextTop (e.FuncName) e.Pattern
    == s.ContextTop e.Substitutes (e.Commands)
*/
$ENTRY GenInitSubst {
  s.ContextTop (e.FuncName) e.Pattern
    = s.ContextTop : s.0
    = <Add s.ContextTop 1> : s.1
    = <Add s.ContextTop 2> : s.2
    = <Add s.ContextTop 4> : s.4
    = <Add s.ContextTop 5> : s.5
    = s.5
      (Junk (TkOpenCall s.0) (Symbol Name e.FuncName s.4))
      (E s.2 e.Pattern)
      (Junk (TkCloseCall s.1))
      (
        (CmdCallSave AlgLeft s.0 s.2)
      );
}

/**
  <GenPattern s.FnGenInitSubst s.FnGenSubst (e.Name) e.Pattern>
    == s.ContextOffset (e.Vars) (e.MarkedPattern) e.PatternCommands
*/
$ENTRY GenPattern {
  s.FnGenSubst (e.Name) e.Pattern
    = <GenInitSubst 0 (e.Name) e.Pattern>
    : s.ContextTop e.Substitutes (e.Commands)
    = <s.FnGenSubst
        s.ContextTop e.Substitutes (/* no vars */)
        (
          (CmdInitB0-Lite)
          e.Commands
        )
      >;
}

/**
  <GenResult
    s.FnGenResult (e.Conditions) (e.Result)
    s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.PatternCommands
  >
    == (CmdIssueMemory s.ContextSize) e.SentenceCommands
*/
$ENTRY GenResult {
  s.FnGenResult (e.Conditions) (e.Result)
  s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.PatternCommands
    = <SentenceTail
        s.ContextOffset (e.PatternVars) (e.MarkedPattern)
        e.Conditions (s.FnGenResult e.Result)
      >
    : s.ContextCount e.SentenceTailCommands

    = <FoldOpenELoops
        (CmdIssueMemory s.ContextCount)
        e.PatternCommands
        <PutVariableDebugTable e.PatternVars>
        e.SentenceTailCommands
      >;
}

SentenceTail {
  s.StartOffsetCond
  (e.PatternVars) (e.MarkedPattern)
  (Condition (e.CondName) (e.CondResult) (e.CondPattern)) e.ConditionsTail
  (e.ResultSentence)

    = <GenResult-Condition
        <Inc2 s.StartOffsetCond> (e.PatternVars)
        (TkOpenCallCond s.StartOffsetCond)
        (Symbol Name e.CondName) e.CondResult
        (TkCloseCallCond <Inc s.StartOffsetCond>)
      >
    : s.EndOffsetCond-Res e.CondResultCommands

    = <GenInitSubst s.StartOffsetCond (e.CondName) e.CondPattern>
    : s.OffsetCond
      e.CondSubstitutes (e.FirstCondPatternCommands)

    = <GenSubst-Save
        s.OffsetCond e.CondSubstitutes (e.PatternVars)
        (e.FirstCondPatternCommands)
      >
    : s.StartOffsetCondNext
      (e.PatternVars^) (e.MarkedPatternCond)
      e.CondPatternCommands

    = e.MarkedPattern : e.MarkedPatternPrefix t.CloseCall
    = e.MarkedPatternPrefix e.MarkedPatternCond t.CloseCall : e.MarkedPattern^

    = <SentenceTail
       s.StartOffsetCondNext
       (e.PatternVars) (e.MarkedPattern)
       e.ConditionsTail (e.ResultSentence)
      >
    : s.NestedStackTop e.NestedSentence

    = <Max s.EndOffsetCond-Res s.NestedStackTop> : s.StackTop

    = (CmdSentence
        <FoldOpenELoops
          e.CondPatternCommands
          <PutVariableDebugTable e.PatternVars>
          e.NestedSentence
        >
      )
      (CmdSpliceToFreeList-Range s.StartOffsetCond <Inc s.StartOffsetCond>)
    : e.CmdSentenceCommands

    = s.StackTop
      e.CondResultCommands
      (CmdCallCondition)
      (CmdProfileFunction)
      e.CmdSentenceCommands
      (CmdFail);

  s.ContextOffset
  (e.PatternVars) (e.MarkedPattern)
  /*пусто*/ (s.FnGenResult e.Result)
    = <s.FnGenResult
        s.ContextOffset (e.PatternVars)
        (e.MarkedPattern)
        e.Result
      >;
}

$ENTRY FoldOpenELoops {
  e.Commands-B (CmdOpenedE AlgLeft s.BracketNum s.VarNumber) e.Commands-E =
    e.Commands-B
    (CmdOpenELoop
      AlgLeft s.BracketNum s.VarNumber
      <FoldOpenELoops e.Commands-E>
    );

  e.Commands = e.Commands;
}

$ENTRY PutVariableDebugTable {
  e.PatternVars =
    <Map
      {
        (s.Mode (e.Index) s.FirstOffset e.Offsets) =
          (CmdVariableDebugTable s.Mode e.Index s.FirstOffset);
      }
      e.PatternVars
    >;
}

/**
  <CollectStrings e.ReducedExpression>
    == e.ReducedExpressionWithTkString
  e.ReducedExpression — см. interfaces.md
*/
$ENTRY CollectStrings {
  (Symbol Char s.Value1) (Symbol Char s.Value2) e.Tail =
    <Fetch
      <BuildString (s.Value1 s.Value2) e.Tail>
      {
        (e.Chars) e.Tail^ = (TkString e.Chars) <CollectStrings e.Tail>;
      }
    >;

  (Brackets e.InBrackets) e.Tail =
    (Brackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  (CallBrackets e.InBrackets) e.Tail =
    (CallBrackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  (ADT-Brackets e.InBrackets) e.Tail =
    (ADT-Brackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  t.OtherTerm e.Tail = t.OtherTerm <CollectStrings e.Tail>;

  /* пусто */ = /* пусто */;
}

BuildString {
  (e.Chars) (Symbol Char s.Value) e.Tail =
    <BuildString (e.Chars s.Value) e.Tail>;

  (e.Chars) e.Tail = (e.Chars) e.Tail;
}

/**
  <MakeSavers s.ContextOffset e.SubstitutesAnsJunks>
    == s.ContextOffset (e.CmdSaves) e.SubstitutesAnsJunks
*/
$ENTRY MakeSavers {
  s.OriginContextOffset e.SubstitutesAndJunks
    = <MapAccum
        {
          (s.ContextOffset e.CmdSaves) (Junk e.Junk)
            = (s.ContextOffset e.CmdSaves) (Junk e.Junk);

          /* Сопоставление с пустыми подстановками не изменяет диапазоны */
          (s.ContextOffset e.CmdSaves) (E s.Num /* пусто */)
            = (s.ContextOffset e.CmdSaves) (E s.Num /* пусто */);

          /*
            Не раскомментировывать код ниже!!! Он ошибочный!!!

            В подстановке E.num → e.Var переменная может быть повторной,
            и её сопоставление диапазон изменяет. Анализировать на повторность
            довольно сложно, поэтому пока проще отключить эту оптимизацию.
            Дабы не возникало соблазна её добавить, код не удалён,
            а оставлен закомментированным.
          */
*!!       /* Тривиальная подстановка не изменяет диапазоны */
*!!       (s.ContextOffset e.CmdSaves) (E s.Num (Var 'e' e.Index))
*!!         = (s.ContextOffset e.CmdSaves) (E s.Num (Var 'e' e.Index));

          /* В остальных случаях подстановки могут изменять диапазон */
          (s.ContextOffset e.CmdSaves) (E s.Num e.Range)
            = (
                <Inc2 s.ContextOffset>
                e.CmdSaves (CmdSave s.Num s.ContextOffset)
              )
              (E s.ContextOffset e.Range);

          (s.ContextOffset e.CmdSaves) (s.S-or-T s.Num e.Range)
            = (s.ContextOffset e.CmdSaves) (s.S-or-T s.Num e.Range);
        }
        (s.OriginContextOffset /* CmdSave's */)
        e.SubstitutesAndJunks
      >
    : (s.ContextOffset^ e.CmdSaves) e.SubstitutesAndJunks^
    = s.ContextOffset (e.CmdSaves) e.SubstitutesAndJunks;
}
