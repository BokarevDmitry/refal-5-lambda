$INCLUDE "LibraryEx";

*$FROM Desugaring-UnCondition
$EXTERN ExtractVariables, ExtractVariables-Expr, NewVarName;

*$FROM GenericMatch
$EXTERN GenericMatch;


/**
  <OptTree-Spec-ExtractOptInfo s.OptSpec e.AST>
    == (e.SpecInfo) e.AST^

  s.OptSpec ::= OptSpec | NoOpt
  e.SpecInfo ::= (e.SpecFuncNames) e.SpecInfo-Specific
  e.SpecFuncNames ::= (e.FuncName)*
  e.SpecInfo-Specific ::= t.FunctionInfo*
  t.FunctionInfo ::= ((e.Name) (e.Pattern) (e.Body) s.NextCounter)
*/
$ENTRY OptTree-Spec-ExtractOptInfo {
  s.OptSpec e.AST
    = <Fetch
        ((/* no names */) /* no info */) e.AST
        <Pipe
          (&MapAccum
            {
              ((e.Names) e.Info) (Spec t.Name e.Pattern)
                = ((e.Names t.Name) e.Info (t.Name (e.Pattern)));

              ((e.Names) e.Info) t.Other = ((e.Names) e.Info) t.Other;
            }
          )
          (&MapAccum
            {
              ((e.Names) e.Info-B (t.Name (e.Pattern)) e.Info-E)
              (Function s.ScopeClass t.Name Sentences e.Body)
                = ((e.Names) e.Info-B (t.Name (e.Pattern) (e.Body) 1) e.Info-E)
                  (Function s.ScopeClass t.Name Sentences e.Body);

               ((e.Names) e.Info) t.Other = ((e.Names) e.Info) t.Other;
            }
          )
        >
      >
    : ((e.Names) e.Info) e.AST^
    = s.OptSpec
    : {
        NoOpt = ((/* нет имён */) /* нет инфы */) e.AST;

        s.OptSpec^ = ((e.Names) e.Info) e.AST;
      }
}

/**
  <OptTree-Spec s.OptSpec (e.SpecInfo) e.AST>
    == (e.SpecInfo^) e.AST^

  s.OptSpec ::= OptSpec | NoOpt
  e.SpecInfo ::= (e.SpecFuncNames) e.SpecInfo-Specific
  e.SpecFuncNames ::= (e.FuncName)*
  e.SpecInfo-Specific ::= t.FunctionInfo*
  t.FunctionInfo ::= ((e.Name) (e.Pattern) (e.Body) s.NextCounter t.Signature*)
  t.Signature ::= ((e.Name SUF '@' e.SpecFuncName) t.StaticVarVals*)
  t.StaticVarVals ::= (e.Expression)
*/
$ENTRY OptTree-Spec {
  NoOpt (e.SpecInfo) e.AST = (e.SpecInfo) e.AST;

  OptSpec ((/* no names */) /* no info */) e.AST
    = ((/* no names */) /* no info */) e.AST;

  OptSpec ((e.Names) e.SpecInfo) e.AST
    = <MapAccum &SpecUnit (e.SpecInfo (/* new functions */)) e.AST>
    : (e.SpecInfo^ (e.NewFunctions)) e.AST^
    = ((e.Names) e.SpecInfo) e.AST e.NewFunctions;
}

SpecUnit {
  (e.SpecInfo (e.NewFunctions))
  (Function s.ScopeClass t.Name Sentences e.Sentences)
    = <MapAccum
        &SpecSentence
        (e.SpecInfo (e.NewFunctions))
        e.Sentences
      >
    : (e.SpecInfo^ (e.NewFunctions^)) e.Sentences^
    = (e.SpecInfo (e.NewFunctions))
      (Function s.ScopeClass t.Name Sentences e.Sentences);

  (e.SpecInfo (e.NewFunctions)) t.Other = (e.SpecInfo (e.NewFunctions)) t.Other;
}

/**
  <SpecSentence (e.SpecInfo (e.NewFunctions)) t.Sentence
    == (e.SpecInfo^ (e.NewFunctions^) t.Sentence^

  t.Sentence ::= ((e.Pattern) e.Conditions (e.Result))

  Функция ищет в правой части предложения вызовы специализируемых функций
  и пытается выполнить специализацию для него
*/
SpecSentence {
  (e.SpecInfo (e.NewFunctions))
  ((e.Pattern) e.Conditions (e.Result))
    = <MapAccum
        {
          (e.SpecInfo (e.NewFunctions))
          (Condition (e.Name) (e.ConditionResult) (e.ConditionPattern))
            = <SpecResult (e.SpecInfo (e.NewFunctions)) e.ConditionResult>
            : (e.SpecInfo^ (e.NewFunctions^)) e.ConditionResult^
            = (e.SpecInfo (e.NewFunctions))
              (Condition (e.Name) (e.ConditionResult) (e.ConditionPattern));
        }
        (e.SpecInfo (e.NewFunctions))
        e.Conditions
      >
    : (e.SpecInfo^ (e.NewFunctions^)) e.Conditions^
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.Result>
    : (e.SpecInfo^ (e.NewFunctions^)) e.Result^
    = (e.SpecInfo (e.NewFunctions)) ((e.Pattern) e.Conditions (e.Result));
}


/**
  <SpecResult (e.SpecInfo (e.NewFunctions)) e.Results>
    == (e.SpecInfo^ (e.NewFunctions^)) e.Result^

  Функция разбирает результирующее выражение, ищет в нем вызовы специализируемых
  функций и пытается выполнить специализацию для него
*/
SpecResult {
  (e.SpecInfo (e.NewFunctions)) /* empty */
    = (e.SpecInfo (e.NewFunctions)) /* empty */ ;

  (e.SpecInfo (e.NewFunctions)) e.Result
    = <MapAccum
        {
          (e.Info (e.NewFuncs)) t.Result-T
            = <SpecTerm (e.Info (e.NewFuncs)) t.Result-T>;
        }
        (e.SpecInfo (e.NewFunctions))
        e.Result
      >;
}

/**
  <SpecTerm (e.SpecInfo (e.NewFunctions)) t.Term>
    == (e.SpecInfo^ (e.NewFunctions^)) t.Term^

  Функция ищет в терме вызовы специализируемых функций
  и пытается выполнить специализацию для него
*/
SpecTerm {
  (e.SpecInfo-B ((e.Name) e.Info) e.SpecInfo-E (e.NewFunctions))
  (CallBrackets (Symbol Name e.Name) e.Expression)
    , <IsColdArg e.Expression> : True
    = <SpecCall (e.Name) e.Info (e.Expression)>
    : (e.Info^) t.NewCall e.NewFunction
    = (
        e.SpecInfo-B ((e.Name) e.Info) e.SpecInfo-E
        (e.NewFunctions e.NewFunction)
      )
      t.NewCall;

  (e.SpecInfo (e.NewFunctions)) (CallBrackets (Symbol Name e.Name) e.Expression)
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.Expression>
    : (e.SpecInfo^ (e.NewFunctions^)) e.Expression^
    = (e.SpecInfo (e.NewFunctions))
      (CallBrackets (Symbol Name e.Name) e.Expression);

  (e.SpecInfo (e.NewFunctions)) (ClosureBrackects e.ClosureContent)
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.ClosureContent>
    : (e.SpecInfo^ (e.NewFunctions^)) e.ClosureContent^
    = (e.SpecInfo (e.NewFunctions)) (ClosureBrackets e.ClosureContent);

  (e.SpecInfo (e.NewFunctions)) (Brackets e.Expression)
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.Expression>
    : (e.SpecInfo^ (e.NewFunctions^)) e.Expression^
    = (e.SpecInfo (e.NewFunctions)) (Brackets e.Expression);

  (e.SpecInfo (e.NewFunctions)) (ADT-Brackets (e.Name) e.Expression)
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.Expression>
    : (e.SpecInfo^ (e.NewFunctions^)) e.Expression^
    = (e.SpecInfo (e.NewFunctions)) (ADT-Brackets (e.Name) e.Expression);

  (e.SpecInfo (e.NewFunctions)) t.Other
   = (e.SpecInfo (e.NewFunctions)) t.Other;
}

/**
  <SpecCall
    (e.Name) (e.SpecPattern) (e.Body)
    s.CurrentNumber e.Signatures (e.Argument)
  >
    == ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures t.NewSignature)
        t.NewCall t.NewFunction

  Функция пытается выполнить специализацию для заданного вызова:
  # ищет среди сигнатур готовых специализированных функций похожую
    * если сигнатура найдена, заменяем исходный вызов на вызов найденной функции
    * если сигнатура не найдена выполняем специализацию для аргументов вызова
      # формируем новый вызов
      # формируем определение новой специализированной функции
  # возвращает e.Info с новой сигнатурой,
    новый вызов
    определение новой специализированной функции
*/
SpecCall {
  (e.Name) (e.SpecPattern) (e.Body) s.NextNumber e.Signatures (e.Argument)
    = <GenericMatch-Wrapper (e.Argument) (e.SpecPattern)>
    : {
        Clear (e.StaticMatches) (e.DynamicMatches)
          , <IsActiveMatches e.StaticMatches> : False

          = <Spec-PrepareSignature e.StaticMatches>
          : e.Signature

          = <Spec-IsTrivialSignature e.Signature>
          : {
              True
                = ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures)
                  (ColdCallBrackets (Symbol Name e.Name) e.Argument)
                  /* no new functions */;

              False
                = <Spec-PrepareCallOrPattern
                    (e.StaticMatches) (e.DynamicMatches) e.SpecPattern
                  >
                : e.SpecializedFuncArgument

                = <Spec-FindInSignatures (e.Signature) e.Signatures>
                : {
                    Found e.SpecSuffix
                      = ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures)
                        (
                          ColdCallBrackets (Symbol Name e.Name SUF e.SpecSuffix)
                          e.SpecializedFuncArgument
                        )
                        /* no new functions */;

                    NotFound
                      = <Spec-RenameGenericMatch
                          (e.SpecPattern) (e.StaticMatches)
                          s.NextNumber (<ExtractVariables e.Body>)
                        >
                      : (e.StaticMatches^)

                      = <Spec-PrepareSpecializedFuncBody
                          (e.SpecPattern) (e.StaticMatches) e.Body
                        >
                      : (e.SpecializedFuncBody)

                      , <IsSoundBody e.SpecializedFuncBody>
                      : {
                          True
                            = (
                                (e.SpecPattern) (e.Body) <Inc s.NextNumber>
                                e.Signatures
                                ((e.Name SUF '@' s.NextNumber) e.Signature)
                              )
                              (ColdCallBrackets
                                (Symbol Name e.Name SUF '@' s.NextNumber)
                                e.SpecializedFuncArgument
                              )
                              (
                                Function GN-Local (e.Name SUF '@' s.NextNumber)
                                Sentences e.SpecializedFuncBody
                              );

                          False
                            = ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures)
                              (ColdCallBrackets (Symbol Name e.Name) e.Argument)
                              /* no new functions */;
                        }
                  };
            };

        s.OtherResult e.ResultInfo
          = ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures)
            (ColdCallBrackets (Symbol Name e.Name) e.Argument)
            /* no new functions */;
      };
}

IsActiveMatches {
  e.StaticMatches
    = <Reduce
        {
          True t.Match = True;

          False (e.Val ':' (TkVariable e.Var)) = <IsActiveExpr e.Val>;
        }
        False
        e.StaticMatches
      >;
}

IsActiveExpr {
  e.Expr
    = <Reduce
        {
          True t.Term = True;

          False (CallBrackets e.Expr^) = True;
          False (ColdCallBrackets e.Expr^) = True;

          False (Brackets e.Expr^) = <IsActiveExpr e.Expr>;
          False (ADT-Brackets (e.Name) e.Expr) = <IsActiveExpr e.Expr>;

          False t.OtherTerm = False;
        }
        False
        e.Expr
      >;
}

IsSoundBody {
  e.Body
    , <FindClosuresInPatterns-Body e.Body>
    : {
        /* пусто */ = True;
        e.FoundClosures = False;
      };
}

FindClosuresInPatterns-Body {
  e.Body
    = <Map
        {
          ((e.Pattern) e.Conditions (e.Result))
            = <FindClosuresInPatterns-Pattern
                e.Pattern
                <Map
                  {
                    (Condition (e.Name) (e.CondResult) (e.CondPattern))
                      = e.CondPattern;
                  }
                  e.Conditions
                >
              >;
        }
        e.Body
      >;
}

FindClosuresInPatterns-Pattern {
  e.Pattern = <Map &FindClosuresInPatterns-Term e.Pattern>;
}

FindClosuresInPatterns-Term {
  (Symbol s.Type e.Info) = /* пусто */;
  (TkVariable s.Type e.Index) = /* пусто */;

  (Brackets e.Pattern)
    = <FindClosuresInPatterns-Pattern e.Pattern>;
  (ADT-Brackets (e.Name) e.Pattern)
    = <FindClosuresInPatterns-Pattern e.Pattern>;

  (ClosureBrackets e.Context) = Found;
}

Spec-PrepareSignature {
  e.StaticMatches
    = <Spec-RenameSignatureVars
        <Reduce
          {
            (e.Signature) (e.Val ':' t.Var) = (e.Signature (e.Val));
          }
          (/* empty signature */)
          e.StaticMatches
        >
      >;
}

Spec-RenameSignatureVars {
  (e.Signature)
    = <Map
        {
          (e.SignaturePart) = <ExtractVariables-Expr e.SignaturePart>;
        }
        e.Signature
      >
    : e.VarsFromSignature
    = <Reduce
        {
          (
            (e.Renames-B (e.Index ':' e.NewIndex) e.Renames-E)
            (e.UsedVars) e.NSignature
          )
          (e.Index)
            = (
                (e.Renames-B (e.Index ':' e.NewIndex) e.Renames-E) (e.UsedVars)
                <FindReplace-ExprList
                  (e.NSignature) ((TkVariable e.Index)) (TkVariable e.NewIndex)
                >
              );

          ((e.Renames) (e.UsedVars) e.NSignature) ('s' e.Index s.Depth)
            = <NewVarName (e.UsedVars) 'sS' s.Depth (/* empty suffix */)>
            : (e.UsedVars^) e.NewIndex
            = (
                (e.Renames ('s' e.Index s.Depth ':' e.NewIndex)) (e.UsedVars)
                <FindReplace-ExprList
                  (e.NSignature) ((TkVariable 's' e.Index s.Depth))
                  (TkVariable e.NewIndex)
                >
              );

          ((e.Renames) (e.UsedVars) e.NSignature) ('t' e.Index s.Depth)
            = <NewVarName (e.UsedVars) 'tT' s.Depth (/* empty suffix */)>
            : (e.UsedVars^) e.NewIndex
            = (
                (e.Renames ('t' e.Index s.Depth ':' e.NewIndex)) (e.UsedVars)
                <FindReplace-ExprList
                  (e.NSignature) ((TkVariable 't' e.Index s.Depth))
                  (TkVariable e.NewIndex)
                >
              );

          ((e.Renames) (e.UsedVars) e.NSignature) ('e' e.Index s.Depth)
            = <NewVarName (e.UsedVars) 'eE' s.Depth (/* empty suffix */)>
            : (e.UsedVars^) e.NewIndex
            = (
                (e.Renames ('e' e.Index s.Depth ':' e.NewIndex)) (e.UsedVars)
                <FindReplace-ExprList
                  (e.NSignature) ((TkVariable 'e' e.Index s.Depth))
                  (TkVariable e.NewIndex)
                >
              );
        }
        ((/* renames pair */) (e.VarsFromSignature) e.Signature)
        e.VarsFromSignature
      >
    : (t.Renames t.UsedVars e.NnSignature)
    = e.NnSignature;
}

Spec-FindInSignatures {
  (e.Signature)
  e.Signatures-B ((e.Name SUF e.SpecSuffix) e.Signature) e.Signatures-E
    = Found e.SpecSuffix;

  (e.Signature) e.Signatures
    = NotFound;
}

/**
  <Spec-IsTrivialSignature e.Signature>

  e.Signature ::= (e.Expression)*
*/
Spec-IsTrivialSignature {
  e.Signature
    = <Reduce
        {
          False t.Any = False;

          True ((TkVariable e.VarName)) = True;

          True t.OtherExpression = False;
        }
        True
        e.Signature
      >;
}

Spec-PrepareCallOrPattern {
  (e.StaticMatches) (e.DynamicMatches) e.Pattern

*   extract set of vars from static param values
    = <Reduce
        {
          (e.ExtractedVars) (e.Val ':' t.Var)
            = (
                <RemoveRepeatings
                  e.ExtractedVars
                  <ExtractVariables-Expr-Wrapper e.Val>
                >
              );
        }
        (/* for extracted vars */)
        e.StaticMatches
      >
    : (e.VarsFromStaticParams)

*   union extracted vars from static and values from dynamic params
    = <WrapEVar e.VarsFromStaticParams>
      <Map
        {
          (e.Val ':' (TkVariable 'e' e.Index)) = (GhostBrackets e.Val);

          (e.Val ':' t.Var) = e.Val;
        }
        e.DynamicMatches
      >
    : e.Expression

    = <MapAccum
        {
          True (GhostBrackets e.Expr) = True (Brackets e.Expr);

          False (GhostBrackets e.Expr) = True e.Expr;

          s.Flag t.Other = s.Flag t.Other;
        }
        False
        e.Expression
      >
    : s.Flag e.Expression^

    = e.Expression;
}

Spec-RenameGenericMatch {
  (e.SpecPattern) (e.StaticMatches) s.NextNumber (e.VarsFromBody)
    = <Reduce
        {
          (e.VarsFromMatch) (e.Val ':' t.Var)
            = (e.VarsFromMatch <ExtractVariables-Expr e.Val>);
        }
        ()
        e.StaticMatches
      >
    : (e.VarsFromMatch)

    = <Reduce
        {
          (e.NStaticMatches) (e.CurrentVarName)
            = <NewVarName (e.VarsFromBody) e.CurrentVarName (/* empty suffix */)>
            : (e.Vars) e.NewVarName
            = (
                <FindReplace-GenericMatches-Val
                  (e.NStaticMatches) ((TkVariable e.CurrentVarName))
                  (TkVariable e.NewVarName)
                >
              );
        }
        (e.StaticMatches)
        e.VarsFromMatch
      >;
}

Spec-PrepareSpecializedFuncBody {
  (e.SpecPattern) (e.StaticMatches) e.Body
    = <Reduce
        {
          (e.PreparedBody) ((e.SentencePattern) e.Conditions (e.SentenceResult))
            = <GenericMatch-Wrapper (e.SentencePattern) (e.SpecPattern)>
            : Clear (e.SentenceStaticMatches) (e.SentenceDynamicMatches)

            = <MapGenericMatches (e.StaticMatches) (e.SentenceStaticMatches)>
            : e.StaticSubstitutions

*           propogate static match val in e.SentenceDynamicMatches
            = <MapAccum
                {
                  (e.NSentenceDynamicMatches) (e.Val ':' t.Var)
                    = (
                        <FindReplace-GenericMatches-Val
                          (e.NSentenceDynamicMatches) (t.Var) e.Val
                        >
                      );
                }
                (e.SentenceDynamicMatches)
                e.StaticSubstitutions
              >
            : (e.SentenceDynamicMatches^)

            = (
                e.PreparedBody
                (
                  (
                    <Spec-PrepareCallOrPattern
                      (e.StaticSubstitutions) (e.SentenceDynamicMatches)
                      e.SentencePattern
                    >
                  )
                  <Spec-PrepareConditions (e.StaticSubstitutions) e.Conditions>
                  (<Spec-PrepareResult (e.StaticSubstitutions) e.SentenceResult>)
                )
              );
        }
        (/* for result */)
        e.Body
      >;
}

Spec-PrepareConditions {
  (e.StaticSubstitutions) e.Conditions
    = <Map
        {
          (Condition (e.Name) (e.ConditionResult) (e.ConditionPattern))
            = (Condition
                (e.Name)
                (<Spec-PrepareResult (e.StaticSubstitutions) e.ConditionResult>)
                (<Spec-PrepareResult (e.StaticSubstitutions) e.ConditionPattern>)
              );
        }
        e.Conditions
      >
}

Spec-PrepareResult {
  (e.StaticSubstitutions) e.Result
    = <Reduce
        {
          (e.NResult) (e.ReplaceToVal ':' t.ReplaceVar)
            = (<FindReplace-Expr (e.NResult) (t.ReplaceVar) e.ReplaceToVal>);
        }
        (e.Result)
        e.StaticSubstitutions
      >
    : (e.Result^)
    = e.Result;
}

/**
  <OptTree-Spec-Finalize s.OptSpec (e.SpecInfo) e.AST> == e.AST^
*/
$ENTRY OptTree-Spec-Finalize {
  s.OptSpec (e.SpecInfo) e.AST
    = e.AST;
}

/*
  Вспомогательные функции модуля
*/

SVar-IsInSet {
  (e.Set-B s.Var e.Set-E) s.Var = True;

  (e.Set) s.Var = False;
}

IsSpecStaticVar {
  (TkVariable s.Mode s.FirstSymbol e.Index s.Depth)
    = <SVar-IsInSet ('ABCDEFGHIJKLMNOPQRSTUVWXYZ') s.FirstSymbol>;

  (s.Mode s.FirstSymbol e.Index s.Depth)
    = <SVar-IsInSet ('ABCDEFGHIJKLMNOPQRSTUVWXYZ') s.FirstSymbol>;
}

WrapEVar {
  (TkVariable 'e' e.Index) e.Tail
    = (GhostBrackets (TkVariable 'e' e.Index)) <WrapEVar e.Tail>;

  ('e' e.Index) e.Tail  = (GhostBrackets ('e' e.Index)) <WrapEVar e.Tail>;

  t.Other e.Tail = t.Other <WrapEVar e.Tail>;

  /* empty */ = /* empty */;
}

RemoveRepeatings {
  e.Terms-B t.Term e.Terms-M t.Term e.Terms-E
    = <RemoveRepeatings e.Terms-B t.Term e.Terms-M e.Terms-E>;

  e.Terms = e.Terms;
}

ExtractVariables-Expr-Wrapper {
  e.Expr
    = <FindAndFormatVarTerm <ExtractVariables-Expr e.Expr>>;
}

GenericMatch-Wrapper {
  (e.Expr) (e.HardExpr)
    = <GenericMatch (e.Expr) (e.HardExpr)>
    : {
        Clear e.VarsMatches
          = <MapAccum
              {
                ((e.StaticMatches) (e.DynamicMatches)) (e.Val ':' (e.Var))
                  = <IsSpecStaticVar (e.Var)>
                  : {
                      True
                        = (
                            (e.StaticMatches (e.Val ':' (TkVariable e.Var)))
                            (e.DynamicMatches)
                          );

                      False
                        = (
                            (e.StaticMatches)
                            (e.DynamicMatches (e.Val ':' (TkVariable e.Var)))
                          );
                    };
              }
              ((/* for statics */) (/* for dynamics */))
              e.VarsMatches
            >
          : ((e.StaticMatches) (e.DynamicMatches))
          = Clear (e.StaticMatches) (e.DynamicMatches);

        s.OtherResult e.ResultInfo
          = s.OtherResult e.ResultInfo;
      };
}

IsColdArg {
  e.Argument
   = <Reduce
       {
         False t.Any = False;

         True (CallBrackets e.Expression) = False;

         True (ClosureBrackects e.ClosureContent) = <IsColdArg e.ClosureContent>;

         True (Brackets e.Expression) = <IsColdArg e.Expression>;

         True (ADT-Brackets (e.Name) e.Expression) = <IsColdArg e.Expression>;

         True t.Other = True;

       }
       True
       e.Argument
     >;
}

FindAndFormatVarTerm {
  e.Expr = <Map &FindAndFormatVarTerm-Aux e.Expr>;
}

FindAndFormatVarTerm-Aux {
  (TkVariable e.Index) = (TkVariable e.Index);

  ('e' e.Index) = (TkVariable 'e' e.Index);

  ('s' e.Index) = (TkVariable 's' e.Index);

  ('t' e.Index) = (TkVariable 't' e.Index);

  (Symbol e.SymInfo) = (Symbol e.SymInfo);

  (Brackets e.Expression) = (Brackets <FindAndFormatVarTerm e.Expression>);

  (ADT-Brackets (e.Name) e.Expression)
    = (ADT-Brackets (e.Name) <FindAndFormatVarTerm e.Expression>);

  (CallBrackets e.Expression)
     = (CallBrackets <FindAndFormatVarTerm e.Expression>);

  (ColdCallBrackets e.Expression)
     = (ColdCallBrackets <FindAndFormatVarTerm e.Expression>);

  (ClosureBrackets e.ClosureContent)
    = (ClosureBrackets <FindAndFormatVarTerm e.ClosureContent>);
}

MapGenericMatches {
  (e.ArgStaticMatches) (e.SentenceStaticMatches)
    = <Reduce
        {
          (
            (e.ArgStaticMatches-B (e.ArgVal ':' t.SpecVar) e.ArgStaticMatches-E)
            (e.MappedMatches)
          )
          (e.SentenceVal ':' t.SpecVar)
            = (
                (
                  e.ArgStaticMatches-B (e.ArgVal ':' t.SpecVar)
                  e.ArgStaticMatches-E
                )
                (e.MappedMatches (e.ArgVal ':' e.SentenceVal))
              );
        }
        ((e.ArgStaticMatches) (/* for result */))
        e.SentenceStaticMatches
      >
    : ((e.ArgStaticMatches) (e.ResultMatches))
    = e.ResultMatches;
}

FindReplace-GenericMatches-Val {
  (e.GenericMatches) (e.LookFor) e.ReplaceVal
    = <Map
        {
          (e.Val ':' t.Var)
            = (<FindReplace-Expr (e.Val) (e.LookFor) e.ReplaceVal> ':' t.Var);
        }
        e.GenericMatches
      >;
}

/**
  <FindReplace-Expr (e.LookAtExprList) (e.LookFor) e.ReplaceVal>

  e.LookAtExprList ::= (e.Expression)*
*/
FindReplace-ExprList {
  (e.LookAtExprList) (e.LookFor) e.ReplaceVal
    = <Map
        {
          (e.LookAt) = (<FindReplace-Expr (e.LookAt) (e.LookFor) e.ReplaceVal>);
        }
        e.LookAtExprList
      >;
}

/**
  <FindReplace-Expr (e.LookAt) (e.LookFor) e.ReplaceVal>

  e.LookAt ::= e.Expression
*/
FindReplace-Expr {
  (/* empty */) (e.LookFor) e.ReplaceVal = /* empty */;

  (e.LookAt) (/* empty */) e.ReplaceVal = e.LookAt;

  (e.LookAt) (e.LookAt) e.ReplaceVal = e.ReplaceVal;

  (e.LookAt-B e.LookFor e.LookAt-E) (e.LookFor) e.ReplaceVal
    = <FindReplace-Expr (e.LookAt-B) (e.LookFor) e.ReplaceVal>
      e.ReplaceVal <FindReplace-Expr (e.LookAt-E) (e.LookFor) e.ReplaceVal>;

  (e.LookAt) (e.LookFor) e.ReplaceVal
    = <MapAccum
        {
          ((e.LookFor) e.ReplaceVal) t.LookAt-Term
            = ((e.LookFor) e.ReplaceVal)
              <FindReplace-Term t.LookAt-Term (e.LookFor) e.ReplaceVal>;
        }
        ((e.LookFor) e.ReplaceVal)
        e.LookAt
      >
    : ((e.LookFor) e.ReplaceVal) e.ModifyedLookAt
    = e.ModifyedLookAt;
}

FindReplace-Term {
  (Brackets e.Expression) (e.LookFor) e.ReplaceVal
    = (Brackets <FindReplace-Expr (e.Expression) (e.LookFor) e.ReplaceVal>);

  (ADT-Brackets (e.Name) e.Expression) (e.LookFor) e.ReplaceVal
    = (
        ADT-Brackets (e.Name)
        <FindReplace-Expr (e.Expression) (e.LookFor) e.ReplaceVal>
      );

  (CallBrackets e.Expression) (e.LookFor) e.ReplaceVal
    = (CallBrackets <FindReplace-Expr (e.Expression) (e.LookFor) e.ReplaceVal>);

  (ClosureBrackets e.ClosureContent) (e.LookFor) e.ReplaceVal
    = (
        ClosureBrackets
        <FindReplace-Expr (e.ClosureContent) (e.LookFor) e.ReplaceVal>
      );

  t.OtherTerm (e.LookFor) e.ReplaceVal = t.OtherTerm;
}
