$INCLUDE "LibraryEx";

*$FROM Desugaring-UnCondition
$EXTERN ExtractVariables, ExtractVariables-Expr, NewVarName;

*$FROM GenericMatch
$EXTERN GenericMatch;

*$FROM Log
$EXTERN Log-PutLine;

*$FROM DisplayName
$EXTERN DisplayName;


/**
  <OptTree-Spec-Prepare s.OptSpec e.AST> == e.AST^

  s.OptSpec ::= OptSpec | NoOpt

  В дерево добавляется узел (SpecInfo e.SpecInfo).

  e.SpecInfo ::= (e.SpecFuncNames) e.SpecInfo-Specific
  e.SpecFuncNames ::= (e.FuncName)*
  e.SpecInfo-Specific ::= t.FunctionInfo*
  t.FunctionInfo ::= ((e.Name) (e.Pattern) (e.Body) s.NextCounter t.Signature*)
  t.Signature ::= ((e.Name SUF '@' e.SpecFuncName) t.StaticVarVals*)
  t.StaticVarVals ::= (e.Expression)
*/
$ENTRY OptTree-Spec-Prepare {
  NoOpt e.AST = e.AST;

  OptSpec e.AST-B (SpecInfo e.SpecInfo) e.AST-E
    = <Prepare-Aux (e.SpecInfo) e.AST-B e.AST-E>;

  OptSpec e.AST
    = (/* no names */) /* no info */ : e.EmptyInfo
    = <Prepare-Aux (e.EmptyInfo) e.AST>;
}

Prepare-Aux {
  ((e.KnownNames) e.KnownInfo) e.AST
    = <Fetch
        ((/* no names */) /* no info */) e.AST
        <Pipe
          (&MapAccum
            {
              /* Игнорируем новые $SPEC’и для известных функций */
              ((e.Names) e.Info) (Spec t.Name e.Pattern)
                , e.KnownNames : e._B t.Name e._E
                = ((e.Names) e.Info) /* пропускаем */;

              ((e.Names) e.Info) (Spec t.Name e.Pattern)
                = ((e.Names t.Name) e.Info (t.Name (e.Pattern)));

              ((e.Names) e.Info) t.Other = ((e.Names) e.Info) t.Other;
            }
          )
          (&MapAccum
            {
              ((e.Names) e.Info-B (t.Name (e.Pattern)) e.Info-E)
              (Function s.ScopeClass t.Name Sentences e.Body)
                = ((e.Names) e.Info-B (t.Name (e.Pattern) (e.Body) 1) e.Info-E)
                  (Function s.ScopeClass t.Name Sentences e.Body);

               ((e.Names) e.Info) t.Other = ((e.Names) e.Info) t.Other;
            }
          )
        >
      >
    : ((e.NewNames) e.NewInfo) e.AST^
    = <CreateGuardFunctions e.NewInfo> : (e.GuardEnums) e.NewInfo^
    = (SpecInfo (e.KnownNames e.NewNames) e.KnownInfo e.NewInfo)
      e.AST
      e.GuardEnums

      <Map
        {
          (e.Name) = <Log-PutLine 'New $SPEC function: ' <DisplayName e.Name>>;
        }
        e.NewNames
      >
}

CreateGuardFunctions {
  e.Info
    = <MapAccum
        {
          (e.GuardEnums)
          ((e.Name) (e.SpecPattern) (e.Sentences) e.Signatures)
            = e.Name SUF '@' 0 : e.GuardName
            = (e.SpecPattern)
              ((CallBrackets (Symbol Name e.GuardName) e.SpecPattern))
            : e.GuardSentence
            = (
                e.GuardEnums
                (Function GN-Local (e.GuardName) Sentences /* пусто */)
              )
              (
                (e.Name)
                (e.SpecPattern)
                (e.Sentences (e.GuardSentence))
                e.Signatures
              )
        }
        (/* guard enums */) e.Info
      >
}

/**
  <OptTree-Spec s.OptSpec e.AST> == e.AST^

  s.OptSpec ::= OptSpec | NoOpt
*/
$ENTRY OptTree-Spec {
  NoOpt e.AST = <ColdAll e.AST>;

  OptSpec e.AST-B (SpecInfo (e.Names) e.SpecInfo) e.AST-E
    = <MapAccum &SpecUnit (e.SpecInfo (/* new functions */)) e.AST-B e.AST-E>
    : (e.SpecInfo^ (e.NewFunctions)) e.AST
    = (SpecInfo (e.Names) e.SpecInfo) e.AST e.NewFunctions;
}

ColdAll {
  e.AST
    = <Map
        {
          (Function s.ScopeClass (e.Name) e.Body)
            = (ColdFunction s.ScopeClass (e.Name) e.Body);

          t.OtherItem = t.OtherItem;
        }
        e.AST
      >;
}

SpecUnit {
  (e.SpecInfo (e.NewFunctions))
  (Function s.ScopeClass t.Name Sentences e.Sentences)
    = <MapAccum
        &SpecSentence
        (e.SpecInfo (e.NewFunctions))
        e.Sentences
      >
    : (e.SpecInfo^ (e.NewFunctions^)) e.Sentences^
    = (e.SpecInfo (e.NewFunctions))
      (ColdFunction s.ScopeClass t.Name Sentences e.Sentences);

  (e.SpecInfo (e.NewFunctions)) t.Other = (e.SpecInfo (e.NewFunctions)) t.Other;
}

/**
  <SpecSentence (e.SpecInfo (e.NewFunctions)) t.Sentence
    == (e.SpecInfo^ (e.NewFunctions^) t.Sentence^

  t.Sentence ::= ((e.Pattern) e.Conditions (e.Result))

  Функция ищет в правой части предложения вызовы специализируемых функций
  и пытается выполнить специализацию для него
*/
SpecSentence {
  (e.SpecInfo (e.NewFunctions))
  ((e.Pattern) e.Conditions (e.Result))
    = <MapAccum
        {
          (e.SpecInfo (e.NewFunctions))
          (Condition (e.Name) (e.ConditionResult) (e.ConditionPattern))
            = <SpecResult (e.SpecInfo (e.NewFunctions)) e.ConditionResult>
            : (e.SpecInfo^ (e.NewFunctions^)) e.ConditionResult^
            = (e.SpecInfo (e.NewFunctions))
              (Condition (e.Name) (e.ConditionResult) (e.ConditionPattern));
        }
        (e.SpecInfo (e.NewFunctions))
        e.Conditions
      >
    : (e.SpecInfo^ (e.NewFunctions^)) e.Conditions^
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.Result>
    : (e.SpecInfo^ (e.NewFunctions^)) e.Result^
    = (e.SpecInfo (e.NewFunctions)) ((e.Pattern) e.Conditions (e.Result));
}


/**
  <SpecResult (e.SpecInfo (e.NewFunctions)) e.Results>
    == (e.SpecInfo^ (e.NewFunctions^)) e.Result^

  Функция разбирает результирующее выражение, ищет в нем вызовы специализируемых
  функций и пытается выполнить специализацию для него
*/
SpecResult {
  (e.SpecInfo (e.NewFunctions)) /* empty */
    = (e.SpecInfo (e.NewFunctions)) /* empty */ ;

  (e.SpecInfo (e.NewFunctions)) e.Result
    = <MapAccum
        {
          (e.Info (e.NewFuncs)) t.Result-T
            = <SpecTerm (e.Info (e.NewFuncs)) t.Result-T>;
        }
        (e.SpecInfo (e.NewFunctions))
        e.Result
      >;
}

/**
  <SpecTerm (e.SpecInfo (e.NewFunctions)) t.Term>
    == (e.SpecInfo^ (e.NewFunctions^)) t.Term^

  Функция ищет в терме вызовы специализируемых функций
  и пытается выполнить специализацию для него
*/
SpecTerm {
  (e.SpecInfo (e.NewFunctions)) (CallBrackets (Symbol Name e.Name) e.Expression)
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.Expression>
    : (e.SpecInfo^ (e.NewFunctions^)) e.Expression^
    = <TrySpecCall
        (e.SpecInfo (e.NewFunctions))
        (CallBrackets (Symbol Name e.Name) e.Expression)
      >;

  (e.SpecInfo (e.NewFunctions)) (ClosureBrackects e.ClosureContent)
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.ClosureContent>
    : (e.SpecInfo^ (e.NewFunctions^)) e.ClosureContent^
    = (e.SpecInfo (e.NewFunctions)) (ClosureBrackets e.ClosureContent);

  (e.SpecInfo (e.NewFunctions)) (Brackets e.Expression)
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.Expression>
    : (e.SpecInfo^ (e.NewFunctions^)) e.Expression^
    = (e.SpecInfo (e.NewFunctions)) (Brackets e.Expression);

  (e.SpecInfo (e.NewFunctions)) (ADT-Brackets (e.Name) e.Expression)
    = <SpecResult (e.SpecInfo (e.NewFunctions)) e.Expression>
    : (e.SpecInfo^ (e.NewFunctions^)) e.Expression^
    = (e.SpecInfo (e.NewFunctions)) (ADT-Brackets (e.Name) e.Expression);

  (e.SpecInfo (e.NewFunctions)) t.Other
   = (e.SpecInfo (e.NewFunctions)) t.Other;
}

TrySpecCall {
  (e.SpecInfo-B ((e.Name) e.Info) e.SpecInfo-E (e.NewFunctions))
  (CallBrackets (Symbol Name e.Name) e.Expression)
    = <SpecCall (e.Name) e.Info (e.Expression)>
    : (e.Info^) t.NewCall e.NewFunction
    = (
        e.SpecInfo-B ((e.Name) e.Info) e.SpecInfo-E
        (e.NewFunctions e.NewFunction)
      )
      t.NewCall;

  (e.SpecInfo (e.NewFunctions)) (CallBrackets (Symbol Name e.Name) e.Expression)
    = (e.SpecInfo (e.NewFunctions))
      (CallBrackets (Symbol Name e.Name) e.Expression);
}

/**
  <SpecCall
    (e.Name) (e.SpecPattern) (e.Body)
    s.CurrentNumber e.Signatures (e.Argument)
  >
    == ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures t.NewSignature)
        t.NewCall t.NewFunction

  Функция пытается выполнить специализацию для заданного вызова:
  # ищет среди сигнатур готовых специализированных функций похожую
    * если сигнатура найдена, заменяем исходный вызов на вызов найденной функции
    * если сигнатура не найдена выполняем специализацию для аргументов вызова
      # формируем новый вызов
      # формируем определение новой специализированной функции
  # возвращает e.Info с новой сигнатурой,
    новый вызов
    определение новой специализированной функции
*/
SpecCall {
  (e.Name) (e.SpecPattern) (e.Body) s.NextNumber e.Signatures (e.Argument)

    , <GenericMatch-Wrapper (e.Argument) (e.SpecPattern)>
    : Clear (e.StaticMatches) (e.DynamicMatches)

    , <ExtractCalls e.StaticMatches> : (e.Calls) e.StaticMatches^

    , <Spec-PrepareSignature e.StaticMatches (e.SpecPattern)> : e.Signature

    , <Spec-IsTrivialSubstitutions e.StaticMatches> : False

    = <SpecCall-Aux
        (e.Name) (e.SpecPattern) (e.Body) s.NextNumber e.Signatures (e.Argument)
        (e.Signature) (e.StaticMatches) (e.DynamicMatches) (e.Calls)
      >;

  (e.Name) (e.SpecPattern) (e.Body) s.NextNumber e.Signatures (e.Argument)
    = ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures)
      (CallBrackets (Symbol Name e.Name) e.Argument)
      /* no new functions */;
}

SpecCall-Aux {
  (e.Name) (e.SpecPattern) (e.Body) s.NextNumber e.Signatures (e.Argument)
  (e.Signature) (e.StaticMatches) (e.DynamicMatches) (e.Calls)

    = <Spec-PrepareArgOrPattern
        (e.StaticMatches) (e.DynamicMatches) e.SpecPattern
      >
    : e.SpecializedFuncArgument

    = <ApplySubst-Expr (e.Calls) e.SpecializedFuncArgument>
    : e.SpecializedFuncArgument^

    = <Spec-FindInSignatures (e.Signature) e.Signatures>
    : {
        Found e.SpecSuffix
          = ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures)
            (CallBrackets
              (Symbol Name e.Name SUF e.SpecSuffix)
              e.SpecializedFuncArgument
            )
            /* no new functions */;

        NotFound

          = <Spec-PrepareSpecializedFuncBody
              (e.SpecPattern) (e.StaticMatches) e.Body
            >
          : e.SpecializedFuncBody

          , <IsSoundBody e.SpecializedFuncBody>
          : {
              True
                = (
                    (e.SpecPattern) (e.Body) <Inc s.NextNumber>
                    e.Signatures
                    ((e.Name SUF '@' s.NextNumber) e.Signature)
                  )
                  (CallBrackets
                    (Symbol Name e.Name SUF '@' s.NextNumber)
                    e.SpecializedFuncArgument
                  )
                  (
                    Function GN-Local (e.Name SUF '@' s.NextNumber)
                    Sentences e.SpecializedFuncBody
                  );

              False
                = ((e.SpecPattern) (e.Body) s.NextNumber e.Signatures)
                  (CallBrackets (Symbol Name e.Name) e.Argument)
                  /* no new functions */;
            }
      }
}

ExtractCalls {
  e.StaticMatches

    = <Map
        {
          (e.Expr ':' t.Var) = <ExtractVariables-Expr e.Expr>;
        }
        e.StaticMatches
      >
    : e.UsedVars

    = <MapAccum
        {
          (e.Calls (e.UsedVars^)) (e.Expr ':' t.Var)
            = <ExtractCalls-Expr (e.Calls (e.UsedVars)) e.Expr>
            : (e.Calls^ (e.UsedVars^)) e.Expr^
            = (e.Calls (e.UsedVars)) (e.Expr ':' t.Var);
        }
        (/* calls */ (e.UsedVars)) e.StaticMatches
      >
    : (e.Calls (e.UsedVars^)) e.StaticMatches^

    = (e.Calls) e.StaticMatches
}

ExtractCalls-Expr {
  (e.Calls (e.UsedVars)) e.Expr
    = <MapAccum &ExtractCalls-Term (e.Calls (e.UsedVars)) e.Expr>;
}

ExtractCalls-Term {
  (e.Calls (e.UsedVars)) (CallBrackets e.Expr)
    = <NewVarName (e.UsedVars) 'eCall' 0 (/* empty suffix */)>
    : (e.UsedVars^) e.NewVar
    = (e.Calls ((CallBrackets e.Expr) ':' (e.NewVar)) (e.UsedVars))
      (TkVariable e.NewVar);

  (e.Calls (e.UsedVars)) (Brackets e.Expr)
    = <ExtractCalls-Expr (e.Calls (e.UsedVars)) e.Expr>
    : (e.Calls^ (e.UsedVars^)) e.Expr^
    = (e.Calls (e.UsedVars)) (Brackets e.Expr);

  (e.Calls (e.UsedVars)) (ADT-Brackets (e.Name) e.Expr)
    = <ExtractCalls-Expr (e.Calls (e.UsedVars)) e.Expr>
    : (e.Calls^ (e.UsedVars^)) e.Expr^
    = (e.Calls (e.UsedVars)) (ADT-Brackets (e.Name) e.Expr);

  (e.Calls (e.UsedVars)) t.OtherTerm = (e.Calls (e.UsedVars)) t.OtherTerm;
}

IsSoundBody {
  e.Body
    , <FindClosuresInPatterns-Body e.Body>
    : {
        /* пусто */ = True;
        e.FoundClosures = False;
      };
}

FindClosuresInPatterns-Body {
  e.Body
    = <Map
        {
          ((e.Pattern) e.Conditions (e.Result))
            = <FindClosuresInPatterns-Pattern
                e.Pattern
                <Map
                  {
                    (Condition (e.Name) (e.CondResult) (e.CondPattern))
                      = e.CondPattern;
                  }
                  e.Conditions
                >
              >;
        }
        e.Body
      >;
}

FindClosuresInPatterns-Pattern {
  e.Pattern = <Map &FindClosuresInPatterns-Term e.Pattern>;
}

FindClosuresInPatterns-Term {
  (Symbol s.Type e.Info) = /* пусто */;
  (TkVariable s.Type e.Index) = /* пусто */;

  (Brackets e.Pattern)
    = <FindClosuresInPatterns-Pattern e.Pattern>;
  (ADT-Brackets (e.Name) e.Pattern)
    = <FindClosuresInPatterns-Pattern e.Pattern>;

  (ClosureBrackets e.Context) = Found;
}

Spec-PrepareSignature {
  e.StaticMatches (e.SpecPattern)
    /* ExtractVariables-Expr сохраняет порядок переменных в выражении */
    = <ExtractVariables-Expr e.SpecPattern> : e.SpecVars
    = <Spec-PrepareSignature-SortVars e.StaticMatches (e.SpecVars)> : e.ExprList
    = <Spec-RenameSignatureVars e.ExprList>;
}

Spec-PrepareSignature-SortVars {
  e.StaticMatches (e.SpecPatternVars)
    = <MapAccum
        {
          (e.Vars-B (e.Val ':' (TkVariable e.Index)) e.Vars-E) (e.Index)
            = (e.Vars-B e.Vars-E) (e.Val);

          /*
            Если очередной переменной нет среди подстановок, значит
            она динамическая
          */
          (e.Variables) (e.Index) = (e.Variables) /* пропускаем */;
        }
        (e.StaticMatches) e.SpecPatternVars
      >
    : (/* должно быть пусто */) e.SigValues
    = e.SigValues;
}

Spec-RenameSignatureVars {
  e.Signature
    = <MapAccum
        {
          (e.KnownVariables) (e.SignaturePart)
            = <Spec-RenameSignatureVars-Expr (e.KnownVariables) e.SignaturePart>
        }
        (
          /* пусто */ /* known variables */
          0           /* s.NextId */
        )
        e.Signature
      >
}

Spec-RenameSignatureVars-Expr {
  t.State e.Expr = <MapAccum &Spec-RenameSignatureVars-Term t.State e.Expr>;
}

Spec-RenameSignatureVars-Term {
  (e.KnownVariables s.NextId) (TkVariable s.Mode e.OldIndex)
    , e.KnownVariables : e._B (s.Mode e.OldIndex (e.NewIndex)) e._E
    = (e.KnownVariables)
      (TkVariable s.Mode e.NewIndex);

  (e.KnownVariables s.NextId) (TkVariable s.Mode e.OldIndex)
    = <Symb s.NextId> 0 : e.NewIndex
    = (e.KnownVariables (s.Mode e.OldIndex (e.NewIndex)) <Inc s.NextId>)
      (TkVariable s.Mode e.NewIndex);

  t.State (s.BracketsTag e.Expr)
    , <OneOf s.BracketsTag CallBrackets ClosureBrackets Brackets> : True
    = <Spec-RenameSignatureVars-Expr t.State e.Expr> : t.State^ e.Expr^
    = (s.BracketsTag e.Expr);

  t.State (ADT-Brackets (e.Name) e.Expr)
    = <Spec-RenameSignatureVars-Expr t.State e.Expr> : t.State^ e.Expr^
    = (ADT-Brackets (e.Name) e.Expr);

  t.State t.OtherTerm = t.State t.OtherTerm;
}

/*
  Применяем левую подстановку к левым частям правой.
  Это не совсем композиция подстановок, поскольку для композиции нужно
  также объединять домены подстановок.
*/
ApplySubst-Subst {
  (e.FromSubstitution) e.ToSubstitution
    = <Map
        {
          (e.Expr ':' t.Var)
            = (<ApplySubst-Expr (e.FromSubstitution) e.Expr> ':' t.Var);
        }
        e.ToSubstitution
      >;
}

ApplySubst-Expr {
  (e.Substitution) e.Expression
    = <Map
        {
          (TkVariable e.ModeIndex)
            , e.Substitution : e.Subst-B (e.Value ':' (e.ModeIndex)) e.Subst-E
            = e.Value;

          (Brackets e.Nested)
            = (Brackets <ApplySubst-Expr (e.Substitution) e.Nested>);

          (ADT-Brackets (e.Name) e.Nested)
            = (ADT-Brackets
                (e.Name) <ApplySubst-Expr (e.Substitution) e.Nested>
              );

          (CallBrackets e.Nested)
            = (CallBrackets <ApplySubst-Expr (e.Substitution) e.Nested>);

          (ClosureBrackets e.ClosureContent)
            = (ClosureBrackets
                <ApplySubst-Expr (e.Substitution) e.ClosureContent>
              );

          t.OtherTerm = t.OtherTerm;
        }
        e.Expression
      >;
}

Spec-FindInSignatures {
  (e.Signature)
  e.Signatures-B ((e.Name SUF e.SpecSuffix) e.Signature) e.Signatures-E
    = Found e.SpecSuffix;

  (e.Signature) e.Signatures
    = NotFound;
}

/**
  <Spec-IsTrivialSubstitutions e.StaticMatches>
*/
Spec-IsTrivialSubstitutions {
  e.StaticMatches
    = <Reduce
        {
          False t.Any = False;

          True ((TkVariable s.Mode e.Index1) ':' (TkVariable s.Mode e.Index2))
            = True;

          True t.OtherSubstitution = False;
        }
        True
        e.StaticMatches
      >;
}

Spec-PrepareArgOrPattern {
  (e.StaticMatches) (e.DynamicMatches) e.SpecPattern

    /*
      ExtractVariables-Expr сохраняет относительный порядок переменных,
      однако оставляет дубликаты. Но в e.SpecPattern это не критично,
      поскольку все переменные в нём должны быть уникальны (иначе
      синтаксическая ошибка).
    */
    = <ExtractVariables-Expr e.SpecPattern> : e.SpecVars

    = <MapAccum
        {
          (e.KnownVarsFromStatic) (s.Mode e.Index)
            , e.StaticMatches
            : e._B (e.Expr ':' (TkVariable s.Mode e.Index)) e._E
            = <MapAccum
                {
                  (e.KnownVarsFromStatic^) (s.Mode^ e.Index^)
                    , e.KnownVarsFromStatic : e._B1 (s.Mode e.Index) e._E1
                    = (e.KnownVarsFromStatic)
                      /* пропускаем переменную */;

                  (e.KnownVarsFromStatic^) (s.Mode^ e.Index^)
                    = (e.KnownVarsFromStatic (s.Mode e.Index))
                      <WrapVar s.Mode (TkVariable s.Mode e.Index)>;
                }
                (e.KnownVarsFromStatic)
                <ExtractVariables-Expr e.Expr>
              >;

          (e.KnownVarsFromStatic) (s.Mode e.Index)
            , e.DynamicMatches
            : e._B (e.Expr ':' (TkVariable s.Mode e.Index)) e._E
            = (e.KnownVarsFromStatic) <WrapVar s.Mode e.Expr>;
        }
        (/* Known vars from static */)
        e.SpecVars
      >
    : (e.KnownVarsFromStatic) e.NewArgOrPattern

    = e.NewArgOrPattern
    : {
        e.STValues (GhostBrackets e.FirstEValue) e.Values
          = e.STValues e.FirstEValue
            <Map
              {
                (GhostBrackets e.Expr) = (Brackets e.Expr);

                t.STValue = t.STValue;
              }
              e.Values
            >;

        e.STValues = e.STValues;
      };
}

WrapVar {
  'e' e.Expr = (GhostBrackets e.Expr);
  s.Mode e.Expr = e.Expr
}

Spec-RenameGenericMatch {
  (e.SpecPattern) (e.StaticMatches) e.VarsFromBody
    = <Map
        {
          (e.Val ':' t.Var) = <ExtractVariables-Expr e.Val>;
        }
        e.StaticMatches
      >
    : e.VarsFromMatch

    = <Unique e.VarsFromMatch> : e.VarsFromMatch^

    = <MapAccum
        {
          (e.VarsFromBody^) (e.CurrentVarName)
            = <NewVarName (e.VarsFromBody) e.CurrentVarName (/* empty suffix */)>
            : (e.VarsFromBody^) e.NewVarName
            = (e.VarsFromBody)
              ((TkVariable e.NewVarName) ':' (e.CurrentVarName))
        }
        (e.VarsFromBody)
        e.VarsFromMatch
      >
    : (e.VarsFromBody^) e.Renames

    = <ApplySubst-Subst (e.Renames) e.StaticMatches>;
}

Spec-PrepareSpecializedFuncBody {
  (e.SpecPattern) (e.StaticMatches) e.Body
    = <ExtractVariables e.Body> : e.BodyVariables

    = <Spec-RenameGenericMatch
        (e.SpecPattern) (e.StaticMatches) e.BodyVariables
      >
    : e.StaticMatches^

    = <Map (&Spec-PrepareSentence (e.SpecPattern) (e.StaticMatches)) e.Body>;
}

Spec-PrepareSentence {
  (e.SpecPattern) (e.CallStaticMatches)
  ((e.Pattern) e.Conditions (e.Result))
    = <GenericMatch-Wrapper (e.Pattern) (e.SpecPattern)>
    : Clear (e.PatternStaticMatches) (e.PatternDynamicMatches)

    = <MapGenericMatches (e.CallStaticMatches) (e.PatternStaticMatches)>
    : e.StaticSubstitutions

    = <ApplySubst-Subst (e.StaticSubstitutions) e.PatternDynamicMatches>
    : e.PatternDynamicMatches^

    = <Spec-PrepareArgOrPattern
        (e.CallStaticMatches) (e.PatternDynamicMatches) e.SpecPattern
      >
    : e.Pattern^

    = <Spec-PrepareConditions (e.StaticSubstitutions) e.Conditions>
    : e.Conditions^

    = <ApplySubst-Expr (e.StaticSubstitutions) e.Result> : e.Result^

    = ((e.Pattern) e.Conditions (e.Result));
}

Spec-PrepareConditions {
  (e.StaticSubstitutions) e.Conditions
    = <Map
        {
          (Condition (e.Name) (e.ConditionResult) (e.ConditionPattern))
            = (Condition
                (e.Name)
                (<ApplySubst-Expr (e.StaticSubstitutions) e.ConditionResult>)
                (<ApplySubst-Expr (e.StaticSubstitutions) e.ConditionPattern>)
              );
        }
        e.Conditions
      >
}

/**
  <OptTree-Spec-CleanupColdFunctions e.AST> == e.AST^
*/
$ENTRY OptTree-Spec-CleanupColdFunctions {
  e.AST
    = <Map
        {
          (ColdFunction s.ScopeClass (e.Name) e.Body)
            = (Function s.ScopeClass (e.Name) e.Body);

          t.OtherItem = t.OtherItem;
        }
        e.AST
      >;
}

/*
  Вспомогательные функции модуля
*/

GenericMatch-Wrapper {
  (e.Expr) (e.HardExpr)
    = <GenericMatch (e.Expr) (e.HardExpr)>
    : {
        Clear e.VarsMatches
          = <MapAccum
              {
                (e.StaticMatches) (e.Val ':' (e.Var))
                  , e.Var : s.Mode e.Index
                  , <IsSpecStaticVar (e.Var)> : True
                  = (e.StaticMatches (e.Val ':' (TkVariable e.Var)))
                    /* пусто */;

                (e.StaticMatches) (e.Val ':' (e.Var))
                  = (e.StaticMatches)
                    (e.Val ':' (TkVariable e.Var));
              }
              (/* for statics */)
              e.VarsMatches
            >
          : (e.StaticMatches) e.DynamicMatches
          = Clear (e.StaticMatches) (e.DynamicMatches);

        s.OtherResult e.ResultInfo
          = s.OtherResult e.ResultInfo;
      };
}

IsSpecStaticVar {
  (s.Mode s.FirstSymbol e.Index)
    , <Type s.FirstSymbol>
    : {
        'Lu' s._ = True;
        e._ = False;
      };
}

MapGenericMatches {
  (e.ArgStaticMatches) (e.PatternStaticMatches)
    = <Reduce
        {
          (
            (e.ArgStaticMatches-B (e.ArgVal ':' t.SpecVar) e.ArgStaticMatches-E)
            (e.MappedMatches)
          )
          ((TkVariable s.Mode e.Index) ':' t.SpecVar)
            = (
                (
                  e.ArgStaticMatches-B (e.ArgVal ':' t.SpecVar)
                  e.ArgStaticMatches-E
                )
                (e.MappedMatches (e.ArgVal ':' (s.Mode e.Index)))
              );
        }
        ((e.ArgStaticMatches) (/* for result */))
        e.PatternStaticMatches
      >
    : ((e.ArgStaticMatches) (e.ResultMatches))
    = e.ResultMatches;
}
