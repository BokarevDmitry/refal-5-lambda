$INCLUDE "LibraryEx";

*$FROM DisplayName
$EXTERN DisplayName;

*$FROM OptTree-AutoMarkup-Common
$EXTERN OptTree-AutoMarkup-Contains,
        OptTree-AutoMarkup-GetElemByKey;

/**
  <OptTree-AutoMarkup-ExtractGraph e.AST> == e.FunctionCallsGraph
*/

$ENTRY OptTree-AutoMarkup-ExtractFunctionCallsGraph {
  e.AST
    = <Map &OptTree-AutoMarkup-GetFuncs e.AST> 
      : e.ExtractedFuncs
    = <Map &OptTree-AutoMarkup-GetMetatables e.AST> 
      : e.ExtractedMetaTables
    = <OptTree-AutoMarkup-InlineFuncCallsWithMetatable 
        (e.ExtractedFuncs) 
        (e.ExtractedMetaTables)
      >
      : e.InlinedGraph
    = <Map &OptTree-AutoMarkup-GetEntryPoints e.AST>
      : e.EntryPoints
    = <OptTree-AutoMarkup-GetClearedByEntryPointsGraph 
        (e.InlinedGraph)
        (e.EntryPoints)
      >
      : e.Res
    = <Unique e.Res>;
}

OptTree-AutoMarkup-GetEntryPoints {
  (Function GN-Entry (e.FuncName) Sentences e.Body)
    = (e.FuncName);

  (Function s.Scope (e.FuncName) Sentences e.Body)
    ,<OneOf (e.FuncName) (INIT) (FINAL)> : True
    = (e.FuncName);

  e.Smth
    = ;
}

OptTree-AutoMarkup-GetClearedByEntryPointsGraph {
  (e.Graph) (e.EntryPoints)
    = <OptTree-AutoMarkup-GetClearedByEntryPointsGraph
        (e.Graph)
        ()
        (e.EntryPoints)
      >;

  (e.Graph) (e.ProccessedNodes) (e.EntryPoints)
    = <MapAccum
        {
          ((e.ProcessedNodes) (e.Result) (e.Graph^))
          (e.EntryPoint)
            , <OptTree-AutoMarkup-Contains
                (e.EntryPoint)
                (e.ProcessedNodes)
              > : False
            = (e.ProcessedNodes (e.EntryPoint))
              : (e.NewProcessedNodes)
            = <OptTree-AutoMarkup-GetElemByKey
                (e.EntryPoint)
                (e.Graph)
              >
              : e.Node
            = e.Node
              : {
                  Func (e.FuncName) Children (e.Children)
                    = <OptTree-AutoMarkup-GetClearedByEntryPointsGraph
                        (e.Graph)
                        (e.NewProcessedNodes)
                        (e.Children)
                      >
                      : e.SubTreeResult
                    = (
                        (e.NewProcessedNodes)
                        (
                          e.Result
                          (Func (e.FuncName) Children (e.Children))
                          e.SubTreeResult
                        )
                        (e.Graph)
                      );

                  e._
                    = (
                        (e.NewProcessedNodes)
                        (e.Result)
                        (e.Graph)
                      );
                };


          ((e.ProcessedNodes) (e.Result) (e.Graph^)) e.Other
            = ((e.ProcessedNodes) (e.Result) (e.Graph));
        }
        ((e.ProccessedNodes) (/*result*/) (e.Graph)) e.EntryPoints
      >
      : ((e.ProccessedNodes^) (e.Result) (e.Graph^))
    = e.Result
}

OptTree-AutoMarkup-GetMetatables {
  (Function s.ScopeClass (e.Name) Metatable e.Metatable)
    = <Map 
        &OptTree-AutoMarkup-ExtractFunctionCallsFromMetatable
        e.Metatable
      > 
      : e.FunctionCalls
    = (e.Name (<Unique e.FunctionCalls>));

  e.Smth 
    = ;
}

OptTree-AutoMarkup-GetFuncs {
  (Function s.ScopeClass (e.Name) Sentences e.Body)
    = <Map 
        &OptTree-AutoMarkup-ExtractFunctionCallsFromSentencesBody
        e.Body
      > 
      : e.FunctionCalls
    = <Unique e.FunctionCalls> : e.UniqueFunctionCalls
    = (Func (e.Name) Children (e.UniqueFunctionCalls));

  e.Smth 
    = ;
}

OptTree-AutoMarkup-ExtractFunctionCallsFromMetatable {
  ((Symbol Identifier e.Ident) (Symbol Name e.Name))
    = (e.Name);
}

OptTree-AutoMarkup-ExtractFunctionCallsFromSentencesBody {
  ((e.Pattern) e.Conditions (e.Result))
    = <OptTree-AutoMarkup-ExtractExpressionName e.Pattern> 
      : e.PatternNames
    = <Map
        {
          (Condition (e.Name) (e.Result^) (e.Pattern^))
            = <OptTree-AutoMarkup-ExtractExpressionName e.Result>
              <OptTree-AutoMarkup-ExtractExpressionName e.Pattern>;
        }
        e.Conditions
      > 
      : e.ConditionNames
    = <OptTree-AutoMarkup-ExtractExpressionName e.Result> : e.ResultNames
    = e.PatternNames e.ConditionNames e.ResultNames;
}

OptTree-AutoMarkup-ExtractExpressionName {
  e.Expr 
    = <Map
        {
          (Symbol Name e.Name) 
            = (e.Name);

          (Brackets e.Nested) 
            = <OptTree-AutoMarkup-ExtractExpressionName e.Nested>;

          (ADT-Brackets (e.Name) e.Nested) 
            = <OptTree-AutoMarkup-ExtractExpressionName e.Nested>;

          (CallBrackets e.Nested) 
            = <OptTree-AutoMarkup-ExtractExpressionName e.Nested>;

          (ClosureBrackets e.Nested) 
            = <OptTree-AutoMarkup-ExtractExpressionName e.Nested>;

          (t.Marker e.Smth)
            = ;
        } 
        e.Expr
      >
}

OptTree-AutoMarkup-InlineFuncCallsWithMetatable {
  (e.ExtractedFuncs) (e.ExtractedMetaTables)
    = <Map 
        {
          e.Elem
            = <OptTree-AutoMarkup-InlineOneFuncChildrenWithMetatable 
                e.Elem 
                (e.ExtractedMetaTables)
              >;
        } 
        e.ExtractedFuncs
      >;
}

OptTree-AutoMarkup-InlineOneFuncChildrenWithMetatable {
  (Func (e.Name) Children (e.UniqueFunctionCalls)) (e.ExtractedMetaTables)
      = <Map 
          {
            e.Elem 
              = <OptTree-AutoMarkup-GetCallsFromMetaTables 
                  e.Elem 
                  (e.ExtractedMetaTables)
                >;
          } 
          e.UniqueFunctionCalls
        > 
        : e.ReplacedChildren
      = <Unique e.ReplacedChildren> : e.UniqueReplacedChildren
      = (Func (e.Name) Children (e.UniqueReplacedChildren));
}

OptTree-AutoMarkup-GetCallsFromMetaTables {
  (e.FuncName) (e.ExtractedMetaTables)
    = (<Map 
        {
          (e.Key (e.Value))
            , e.Key : e.FuncName 
            = e.Value;

          (e.Other)
            = ;
        }
        e.ExtractedMetaTables
      >)
      : e.ReplaceValue
    = <Fetch 
        e.ReplaceValue
        {
          ()
            = (e.FuncName);

          (e.FuncSet) 
            = e.FuncSet;
        } 
      >;
}