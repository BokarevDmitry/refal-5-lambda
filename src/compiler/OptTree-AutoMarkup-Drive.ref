$INCLUDE "LibraryEx";

/**
  <OptTree-AutoMarkup-Drive e.AST>
    == e.FunctionCallsGraph (e.RootSet)

  e.RootSet ::= (e.FuncName)*
*/

$ENTRY OptTree-AutoMarkup-Drive {
  e.AST
    = <ForbiddenToDriveFunctions e.AST> : (e.Forbidden) e.AST^
    = <SeparateMetatables e.AST> : (e.Metatables) e.Functions
    = <Map &MetatableReferences e.Metatables> : e.MetatablesRef
    = <Map &FunctionReferences e.Functions> : e.FunctionsRef

    = <InlineMetatableReferences e.FunctionsRef (e.MetatablesRef)>
    : e.FunctionsRef^

    = <SeparateIndirects e.FunctionsRef> : (e.Indirects) e.FunctionsRef^
    = <InlineIndirects e.FunctionsRef (e.Indirects)> : e.FunctionsRef^

    = <PrepareGraphFormat e.FunctionsRef> : (e.EntryPoints) e.Graph

    = <Unique e.EntryPoints e.Indirects> : e.Roots
    = <BasicVertexes e.Graph (e.Roots)>
    : (ToDrive e.ToDrive) (Basics e.Basics) (Unreachable e.Unreachable)
    = <SetDifference e.ToDrive (e.Forbidden)> : e.ToDrive^
    = <UpdateAST e.AST (e.ToDrive) (e.Basics)>
}

ForbiddenToDriveFunctions {
  e.AST
    = <MapAccum
        {
          (e.Forbidden) (s.Label e.Name)
            , Drive Inline Intrinsic : e._ s.Label e._
            = (e.Forbidden (e.Name)) (s.Label e.Name);

          (e.Forbidden) (Function s.Scope (e.FuncName) Sentences e.Body)
            , (e.FuncName) : (e.Head '*' s.Num e.Tail)
            = (e.Forbidden (e.FuncName))
              (Function s.Scope (e.FuncName) Sentences e.Body);

          (e.Forbidden) (Function s.Scope (e.FuncName) Sentences e.Body)
            , <Lenw e.Body> : s.SentencesCount e.Body^
            , <Compare s.SentencesCount 20> : '+'
            = (e.Forbidden (e.FuncName))
              (Function s.Scope (e.FuncName) Sentences e.Body);

          (e.Forbidden) t.Other = (e.Forbidden) t.Other;
        }
        (/* forbidden list */) e.AST
      >
}

SeparateMetatables {
  e.AST
    = <MapAccum
        {
          (e.Metatables) t.Function
            , t.Function : (Function s._ (e._) Metatable e._)
            = (e.Metatables t.Function) /* пусто */;

          (e.Metatables) t.Function
            , t.Function : (Function s._ (e._) Sentences e._)
            = (e.Metatables) t.Function;

          (e.Metatables) t._ = (e.Metatables) /* пропускаем */;
        }
        (/* metatables */)
        e.AST
      >
}

MetatableReferences {
  (Function s.ScopeClass (e.MetatableName) Metatable e.Metatable)
    = <Map
        {
          (t.FuncName-Word (Symbol Name e.Name)) = (Call e.Name);
        }
        e.Metatable
      >
    : e.References
    = ((e.MetatableName) s.ScopeClass e.References (INDIRECT));
}

FunctionReferences {
  (Function s.ScopeClass (e.Name) Sentences e.Sentences)
    = ((e.Name) s.ScopeClass <References-Body e.Sentences>)
}

References-Body {
  e.Sentences
    = <Map
        {
          ((e.Pattern) e.Conditions (e.Result))
            = <Unique
                <References-Expr e.Pattern>
                <Map
                  {
                    (Condition (e._) (e.CondResult) (e.CondPattern))
                      = <References-Expr e.CondResult>
                        <References-Expr e.CondPattern>
                  }
                >
                <References-Expr e.Result>
              >
        }
        e.Sentences
      >;
}

References-Expr {
  e.Expression = <Map &References-Term e.Expression>
}

References-Term {
  (CallBrackets (Symbol Name e.Name) e.Expr)
    = (Call e.Name) <References-Expr e.Expr>;

  (CallBrackets e.Expr) = (INDIRECT) <References-Expr e.Expr>;

  (Symbol Name e.Name) = (Pointer e.Name);

  (ADT-Brackets (e.Name) e.Expr) = <References-Expr e.Expr>;

  (s.Brackets e.Expr)
    , Brackets ClosureBrackets : e._ s.Brackets e._
    = <References-Expr e.Expr>;

  t.AnyOtherTerm = /* ничего интересного */;
}

InlineMetatableReferences {
  e.Functions (e.Metatables)
    = <Reduce
        {
          (e.Functions^) t.Metatable
            = (<InlineOneMetatable e.Functions t.Metatable>)
        }
        (e.Functions) e.Metatables
      >
    : (e.Functions^)
    = e.Functions;
}

InlineOneMetatable {
  e.Functions-B
  (
    (e.Name) s.ScopeClass
    e.References-B (Pointer e.MetatableName) e.References-E
  )
  e.Functions-E
  t.Metatable
    , t.Metatable : ((e.MetatableName) s._ e.MetatableReferences)
    = e.Functions-B
      (
        (e.Name) s.ScopeClass
        e.References-B e.MetatableReferences e.References-E
      )
      <InlineOneMetatable e.Functions-E t.Metatable>;

  e.Functions t.Metatable = e.Functions;
}

SeparateIndirects {
  e.Functions
    = <MapAccum
        {
          (e.Indirects)
          ((e.Name) s.ScopeClass e.References)

            = <SeparateIndirects-References e.References>
            : (e.FunctionIndirects) e.References^

            = (e.Indirects e.FunctionIndirects)
              ((e.Name) s.ScopeClass <Unique e.References>);
        }
        (/* indirects */)
        e.Functions
      >
    : (e.Indirects) e.Functions^
    = (<Unique e.Indirects>) e.Functions;
}

SeparateIndirects-References {
  e.References
    = <MapAccum
        {
          (e.Indirects) (Call e.Name) = (e.Indirects) (e.Name);
          (e.Indirects) (Pointer e.Name) = (e.Indirects (e.Name)) /* удаляем */;
          (e.Indirects) (INDIRECT) = (e.Indirects) INDIRECT;
        }
        (/* indirects */) e.References
      >
}

InlineIndirects {
  e.Functions-B
  ((e.Name) s.ScopeClass e.Children-B INDIRECT e.Children-E)
  e.Functions-E
  (e.Indirects)
    = e.Functions-B
      ((e.Name) s.ScopeClass <Unique e.Children-B e.Indirects e.Children-E>)
      <InlineIndirects e.Functions-E (e.Indirects)>;

  e.Functions (e.Indirects) = e.Functions;
}

PrepareGraphFormat {
  e.Functions
    = <MapAccum
        {
          (e.EntryPoints) ((e.Name) s.ScopeClass e.Children)
            = e.Name s.ScopeClass
            : {
                e._ GN-Entry = (e.Name);
                e._ s._, ('INIT') ('FINAL') : e._ (e.Name) e._ = (e.Name);
                e._ s._ = /* пропускаем */;
              }
            : e.NewEntryName
            = (e.EntryPoints e.NewEntryName)
              (Func (e.Name) Children (e.Children));
        }
        (/* entry points */) e.Functions
      >
}

/*
  <BasicVertexes e.Graph (e.Roots)>
    == (ToDrive e.FuncNames) (Basics e.FuncNames) (Unreachable e.FuncNames)
  e.FuncNames ::= (e.Name)*
*/
BasicVertexes {
  e.Graph (e.Roots)
    = <DoBasicVertexes
        <MarkChildren e.Roots> (e.Graph) (/* to drive */) (/* basic */)
      >;
}

MarkChildren {
  e.FuncNames = <Map { (e.Name) = (Child e.Name) } e.FuncNames>
}

/*
  <DoBasicVertexes e.Stack (e.Graph) (e.ToDrive) (e.Basics)>

  e.ToDrive, e.Basics ::= (e.Name)*
  e.Stack ::= t.StackItem*
  t.StackItem ::= (Child e.Name) | (Func e.Name)

  Функция совершает обход графа в глубину.

  На стек кладутся потомки функции, а также имя самой функции. Когда со стека
  снимается потомок, и эта функция ещё не сканирована (есть в графе),
  на стек кладутся потомки потомка и имя самого потомка. Когда все потомки
  функции просканированы, на верхушке остаётся имя самой функции, которое
  можно снять. Для алгоритма обхода в чистом виде имена функций на стеке
  не так уж и важны, они нужны для маркировки прогоняемых и базисных функций.

  Интересно получается с базисными вершинами. Базисная вершина — это вершина,
  в которую ведёт стрелка от потомка. Поэтому если на стеке есть имя функции,
  совпадающей с очередным потомком, эта функция базисная. Вырезаем её
  из стека и запоминаем как базисную. Если на вершине стека обнаружилось
  имя функции, это значит, что ссылки из потомков на неё не было, она
  не является базисной и пригодна для прогонки.

  В графе находятся только функции с предложениями. Все имена функций из графа,
  достижимые из корней, кладутся на стек (включая корни). Любое имя, оказавшееся
  на стеке, либо переносится в карман базисных, либо прогоняемых. Функции,
  оставшиеся в графе, являются недостижимыми. Таким образом, множество функций
  из графа разбивается на три подмножества: базисные, прогоняемые
  и недостижимые.
*/
DoBasicVertexes {
* Базисная вершина, удаляем пометку функции со стека.
  (Child e.BasicName) e.Stack-B (Func e.BasicName) e.Stack-E
  (e.Graph) (e.ToDrive) (e.Basics)
    = <DoBasicVertexes
        e.Stack-B e.Stack-E (e.Graph) (e.ToDrive) (e.Basics (e.BasicName))
      >;

* Обычная вершина.
  (Child e.FuncName) e.Stack
  (e.Graph-B (Func (e.FuncName) Children (e.Children)) e.Graph-E)
  (e.ToDrive) (e.Basics)
    = <DoBasicVertexes
        <MarkChildren e.Children> (Func e.FuncName) e.Stack
        (e.Graph-B e.Graph-E) (e.ToDrive) (e.Basics)
      >;

* Уже просканированная вершина или вызов внешней функции.
  (Child e._) e.Stack (e.Graph) (e.ToDrive) (e.Basics)
    = <DoBasicVertexes e.Stack (e.Graph) (e.ToDrive) (e.Basics)>;

* Всех детей функции просканировали.
* Если сама метка функции не удалена со стека, значит она не была базисной.
  (Func e.FuncName) e.Stack (e.Graph) (e.ToDrive) (e.Basics)
    = <DoBasicVertexes e.Stack (e.Graph) (e.ToDrive (e.FuncName)) (e.Basics)>;

* Все функции просканировали.
  /* пустой стек */ (e.Graph) (e.ToDrive) (e.Basics)
    = (ToDrive e.ToDrive)
      (Basics e.Basics)
      (Unreachable
        <Map
          {
            (Func (e.Name) Children (e._)) = (e.Name)
          }
          e.Graph
        >
      );
}

SetDifference {
  e.Set1-B t.Common e.Set1-E (e.Set2-B t.Common e.Set2-E)
    = e.Set1-B <SetDifference e.Set1-E (e.Set2-B t.Common e.Set2-E)>;

  e.Set1 (e.Set2) = e.Set1;
}

UpdateAST {
  e.AST (e.FunctionsToDrive) (e.BasisVertexes)
    = <Map
        {
          (Drive e.Name)
            , e.BasisVertexes : e._ (e.Name) e._
            = /* пропускаем */;

          t.Other = t.Other;
        }
        e.AST
      >
      <Map
        {
          (e.FuncName) = (Drive e.FuncName);
        }
        e.FunctionsToDrive
      >
}
