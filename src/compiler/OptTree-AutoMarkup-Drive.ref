$INCLUDE "LibraryEx";

*$FROM TreeUtils
$EXTERN HashName;


/**
  <OptTree-AutoMarkup-Drive e.AST> == e.AST

  e.RootSet ::= (e.FuncName)*
*/

$ENTRY OptTree-AutoMarkup-Drive {
  e.AST
    = <MetaInfo e.AST> : ((e.Forbidden) (e.Inlines) (e.UserdefDrives)) e.AST^

    = <BuldCallGraph e.AST (e.Inlines)> : (e.EntryPoints) (e.Indirects) e.Graph

    = <Unique e.EntryPoints e.Indirects> : e.Roots
    = <BasicVertexes e.Graph (e.Roots)>
    : (ToDrive e.ToDrive) (Basics e.Basics) (Unreachable e.Unreachable)
    = <SetDifference e.ToDrive (e.Forbidden e.UserdefDrives)> : e.ToDrive^
    = <UpdateAST e.AST (e.ToDrive) (e.Basics)>
}

BuldCallGraph {
  e.AST (e.Inlines)
    = <SeparateMetatables e.AST> : (e.Metatables) e.Functions
    = <Map &MetatableGraphNodes e.Metatables> : e.Metatables^
    = <Map &FunctionGraphNodes e.Functions> : e.Functions^

    = <InlineMetatableGraphNodes e.Functions (e.Metatables)> : e.Functions^

    = <SeparateIndirects e.Functions> : (e.Indirects) e.Functions^
    = <InlineIndirects e.Functions (e.Indirects)> : e.Functions^

    = <SeparateInlineGraphNodes e.Functions (e.Inlines)>
    : (e.InlinesRef) e.Functions^
    = <InlineInlineReferences e.Functions (e.InlinesRef)> : e.Functions^
    = <PrepareGraphFormat e.Functions> : (e.EntryPoints) e.Graph
    = (e.EntryPoints) (e.Indirects) e.Graph;
}

MetaInfo {
  e.AST
    = <MapAccum
        {
          ((e.Forbidden) (e.Inlines) (e.Drives))
          (Inline e.Name)
            = ((e.Forbidden (e.Name)) (e.Inlines (e.Name)) (e.Drives))
              (Inline e.Name);

          ((e.Forbidden) (e.Inlines) (e.Drives))
          (Drive e.Name)
            = ((e.Forbidden) (e.Inlines) (e.Drives (e.Name)))
              (Drive e.Name);

          ((e.Forbidden) (e.Inlines) (e.Drives))
          (Intrinsic e.Name)
            = ((e.Forbidden (e.Name)) (e.Inlines) (e.Drives))
              (Intrinsic e.Name);

          ((e.Forbidden) (e.Inlines) (e.Drives))
          (Function s.Scope (e.FuncName) Sentences e.Body)
            , <Lenw e.Body> : s.SentencesCount e.Body^
            , <Compare s.SentencesCount 20> : '+'
            = ((e.Forbidden (e.FuncName)) (e.Inlines) (e.Drives))
              (Function s.Scope (e.FuncName) Sentences e.Body);

          ((e.Forbidden) (e.Inlines) (e.Drives)) t.Other
            = ((e.Forbidden) (e.Inlines) (e.Drives)) t.Other;
        }
        ((/* forbidden list */) (/* inlines */) (/* drives */)) e.AST
      >
}

SeparateMetatables {
  e.AST
    = <MapAccum
        {
          (e.Metatables) t.Function
            , t.Function : (Function s._ (e._) Metatable e._)
            = (e.Metatables t.Function) /* пусто */;

          (e.Metatables) t.Function
            , t.Function : (Function s._ (e._) Sentences e._)
            = (e.Metatables) t.Function;

          (e.Metatables) t._ = (e.Metatables) /* пропускаем */;
        }
        (/* metatables */)
        e.AST
      >
}

MetatableGraphNodes {
  (Function s.ScopeClass (e.MetatableName) Metatable e.Metatable)
    = <Map
        {
          (t.FuncName-Word (Symbol Name e.Name)) = (Call e.Name);
        }
        e.Metatable
      >
    : e.Children
    = (Func (e.MetatableName) s.ScopeClass Children (e.Children (INDIRECT)));
}

FunctionGraphNodes {
  (Function s.ScopeClass (e.Name) Sentences e.Sentences)
    = (Func (e.Name) s.ScopeClass Children (<Children-Body e.Sentences>))
}

Children-Body {
  e.Sentences
    = <Map
        {
          ((e.Pattern) e.Conditions (e.Result))
            = <Unique
                <Children-Expr e.Pattern>
                <Map
                  {
                    (Condition (e._) (e.CondResult) (e.CondPattern))
                      = <Children-Expr e.CondResult>
                        <Children-Expr e.CondPattern>
                  }
                >
                <Children-Expr e.Result>
              >
        }
        e.Sentences
      >;
}

Children-Expr {
  e.Expression = <Map &Children-Term e.Expression>
}

Children-Term {
  (CallBrackets (Symbol Name e.Name) e.Expr)
    = (Call e.Name) <Children-Expr e.Expr>;

  (CallBrackets (ClosureBrackets (Symbol Name e.Name) e.Context) e.Expr)
    = (Call e.Name) <Children-Expr e.Context> <Children-Expr e.Expr>;

  (CallBrackets e.Expr) = (INDIRECT) <Children-Expr e.Expr>;

  (Symbol Name e.Name) = (Pointer e.Name);

  (ADT-Brackets (e.Name) e.Expr) = <Children-Expr e.Expr>;

  (s.Brackets e.Expr)
    , Brackets ClosureBrackets : e._ s.Brackets e._
    = <Children-Expr e.Expr>;

  t.AnyOtherTerm = /* ничего интересного */;
}

InlineMetatableGraphNodes {
  e.Functions (e.Metatables)
    = <Reduce
        {
          (e.Functions^) t.Metatable
            = (<InlineOneMetatable e.Functions t.Metatable>)
        }
        (e.Functions) e.Metatables
      >
    : (e.Functions^)
    = e.Functions;
}

InlineOneMetatable {
  e.Functions-B
  (Func
    (e.Name) s.ScopeClass
    Children (e.Children-B (Pointer e.MetatableName) e.Children-E)
  )
  e.Functions-E
  t.Metatable
    , t.Metatable : (Func (e.MetatableName) s._ Children (e.MetatableNodes))
    = e.Functions-B
      (Func
        (e.Name) s.ScopeClass
        Children (e.Children-B e.MetatableNodes e.Children-E)
      )
      <InlineOneMetatable e.Functions-E t.Metatable>;

  e.Functions t.Metatable = e.Functions;
}

SeparateInlineGraphNodes {
  e.Functions (e.Inlines)
    = <MapAccum
        {
          (e.InlinesRef) t.GraphNode
            , t.GraphNode
            : (Func (e.Name) s.ScopeClass Children (e.Children))
            , e.Inlines : e._ (e.Name) e._
            = (e.InlinesRef t.GraphNode) t.GraphNode;

          (e.InlinesRef) t.GraphNode = (e.InlinesRef) t.GraphNode;
        }
        (/* inlines references */) e.Functions
      >
}

InlineInlineReferences {
  e.Functions (e.Inlines)
    = <InlineInlineReferences-Pass e.Functions (e.Inlines)>
    : {
        e.Functions /* same */ = e.Functions;

        e.Functions^ = <InlineInlineReferences e.Functions (e.Inlines)>;
      }
}

InlineInlineReferences-Pass {
  e.Functions (e.Inlines)
    = <MapAccum
        {
          (e.Inlines^) (Func (e.Name) s.ScopeClass Children (e.Children))
            = <AugmentReferences e.Children (e.Inlines)>
            : (e.Children^) e.Inlines^
            = (e.Inlines) (Func (e.Name) s.ScopeClass Children (e.Children));
        }
        (e.Inlines) e.Functions
      >
    : (e._) e.Functions^
    = e.Functions;
}

AugmentReferences {
  e.Children (e.Inlines)
    = <MapAccum
        {
          (e.Children-B (e.Name) e.Children-E)
          (Func (e.Name) s.ScopeClass Children (e.InlineChilden))
            = (
                e.Children-B (e.Name) e.Children-E
                <SetDifference
                  e.InlineChilden (e.Children-B (e.Name) e.Children-E)
                >
              )
              (Func (e.Name) s.ScopeClass Children (e.InlineChilden));

          (e.Children^) t.InlineNode = (e.Children) t.InlineNode;
        }
        (e.Children) e.Inlines
      >
}

SeparateIndirects {
  e.Functions
    = <MapAccum
        {
          (e.Indirects)
          (Func (e.Name) s.ScopeClass Children (e.Children))

            = <SeparateIndirects-Children e.Children>
            : (e.FunctionIndirects) e.Children^

            = (e.Indirects e.FunctionIndirects)
              (Func (e.Name) s.ScopeClass Children (<Unique e.Children>));
        }
        (/* indirects */)
        e.Functions
      >
    : (e.Indirects) e.Functions^
    = (<Unique e.Indirects>) e.Functions;
}

SeparateIndirects-Children {
  e.Children
    = <MapAccum
        {
          (e.Indirects) (Call e.Name) = (e.Indirects) (e.Name);
          (e.Indirects) (Pointer e.Name) = (e.Indirects (e.Name)) /* удаляем */;
          (e.Indirects) (INDIRECT) = (e.Indirects) INDIRECT;
        }
        (/* indirects */) e.Children
      >
}

InlineIndirects {
  e.Functions-B
  (Func (e.Name) s.ScopeClass Children (e.Children-B INDIRECT e.Children-E))
  e.Functions-E
  (e.Indirects)
    = e.Functions-B
      (Func
        (e.Name) s.ScopeClass
        Children (<Unique e.Children-B e.Indirects e.Children-E>)
      )
      <InlineIndirects e.Functions-E (e.Indirects)>;

  e.Functions (e.Indirects) = e.Functions;
}

PrepareGraphFormat {
  e.Functions
    = <MapAccum
        {
          (e.EntryPoints) (Func (e.Name) s.ScopeClass Children (e.Children))
            = e.Name s.ScopeClass
            : {
                e._ GN-Entry = (e.Name);
                e._ s._ = /* пропускаем */;
              }
            : e.NewEntryName
            = (e.EntryPoints e.NewEntryName)
              (Func (e.Name) Children (e.Children));
        }
        (/* entry points */ ('__INIT') ('__FINAL')) e.Functions
      >
}

/*
  <BasicVertexes e.Graph (e.Roots)>
    == (ToDrive e.FuncNames) (Basics e.FuncNames) (Unreachable e.FuncNames)
  e.FuncNames ::= (e.Name)*
*/
BasicVertexes {
  e.Graph (e.Roots)
    = <MakeGraphHash e.Graph> : e.GraphHash
    = <DoBasicVertexes
        <MarkChildren e.Roots> (e.GraphHash) (/* to drive */) (/* basic */)
      >;
}

MakeGraphHash {
  e.Graph
    = <Map
        {
          (Func (e.Name) Children (e.Children))
            = <HashName e.Name <BUCKET-SIZE>> : s.Hash
            = (s.Hash Func (e.Name) Children (e.Children));
        }
        e.Graph
      >
    : e.Graph^
    = <MakeGraphHash-Buckets e.Graph>;
}

BUCKET-SIZE { = 101 }

MakeGraphHash-Buckets {
  (s.Hash Func (e.Name) Children (e.Children)) e.Graph
    = <MakeGraphHash-FillBucket
        e.Graph (s.Hash (Func (e.Name) Children (e.Children)))
      >
    : e.Graph^ (e.Bucket)
    = <MakeGraphHash-Buckets e.Graph> (e.Bucket);

  /* граф опустел */ = /* нет корзин */;
}

MakeGraphHash-FillBucket {
  e.Graph-B (s.Hash Func (e.Name) Children (e.Children)) e.Graph-E
  (s.Hash e.Bucket)
    = e.Graph-B
      <MakeGraphHash-FillBucket
        e.Graph-E (s.Hash e.Bucket (Func (e.Name) Children (e.Children)))
      >;

  e.Graph (e.Bucket) = e.Graph (e.Bucket);
}

MarkChildren {
  e.FuncNames
   = (Children
       <Map
         {
           (e.Name) = (<HashName e.Name <BUCKET-SIZE>> e.Name)
         }
         e.FuncNames
       >
     )
}

/*
  <DoBasicVertexes e.Stack (e.GraphHash) (e.ToDrive) (e.Basics)>

  e.ToDrive, e.Basics ::= (e.Name)*
  e.Stack ::= t.StackItem*
  t.StackItem ::= (Children (s.Hash e.Name)*) | (Func s.Hash e.Name)

  Функция совершает обход графа в глубину.

  На стек кладутся потомки функции, а также имя самой функции. Когда со стека
  снимается потомок, и эта функция ещё не сканирована (есть в графе),
  на стек кладутся потомки потомка и имя самого потомка. Когда все потомки
  функции просканированы, на верхушке остаётся имя самой функции, которое
  можно снять. Для алгоритма обхода в чистом виде имена функций на стеке
  не так уж и важны, они нужны для маркировки прогоняемых и базисных функций.

  Интересно получается с базисными вершинами. Базисная вершина — это вершина,
  в которую ведёт стрелка от потомка. Поэтому если на стеке есть имя функции,
  совпадающей с очередным потомком, эта функция базисная. Вырезаем её
  из стека и запоминаем как базисную. Если на вершине стека обнаружилось
  имя функции, это значит, что ссылки из потомков на неё не было, она
  не является базисной и пригодна для прогонки.

  В графе находятся только функции с предложениями. Все имена функций из графа,
  достижимые из корней, кладутся на стек (включая корни). Любое имя, оказавшееся
  на стеке, либо переносится в карман базисных, либо прогоняемых. Функции,
  оставшиеся в графе, являются недостижимыми. Таким образом, множество функций
  из графа разбивается на три подмножества: базисные, прогоняемые
  и недостижимые.
*/
DoBasicVertexes {
* Базисная вершина, удаляем пометку функции со стека.
  (Children (s.Hash e.BasicName) e.Siblings)
  e.Stack-B (Func s.Hash e.BasicName) e.Stack-E
  (e.Graph) (e.ToDrive) (e.Basics)
    = <DoBasicVertexes
        (Children e.Siblings)
        e.Stack-B e.Stack-E (e.Graph) (e.ToDrive) (e.Basics (e.BasicName))
      >;

* Обычная вершина.
  (Children (s.Hash e.FuncName) e.Siblings) e.Stack
  (
    e.Buckets-B
    (s.Hash e.Graph-B (Func (e.FuncName) Children (e.Children)) e.Graph-E)
    e.Buckets-E
  )
  (e.ToDrive) (e.Basics)
    = <DoBasicVertexes
        <MarkChildren e.Children> (Func s.Hash e.FuncName)
        (Children e.Siblings) e.Stack
        (e.Buckets-B <WrapBucket s.Hash e.Graph-B e.Graph-E> e.Buckets-E)
        (e.ToDrive) (e.Basics)
      >;

* Уже просканированная вершина или вызов внешней функции.
  (Children (s._ e._) e.Siblings) e.Stack (e.Graph) (e.ToDrive) (e.Basics)
    = <DoBasicVertexes
        (Children e.Siblings) e.Stack (e.Graph) (e.ToDrive) (e.Basics)
      >;

  (Children /* пусто */) e.Stack (e.Graph) (e.ToDrive) (e.Basics)
    = <DoBasicVertexes e.Stack (e.Graph) (e.ToDrive) (e.Basics)>;

* Всех детей функции просканировали.
* Если сама метка функции не удалена со стека, значит она не была базисной.
  (Func s.Hash e.FuncName) e.Stack (e.Graph) (e.ToDrive) (e.Basics)
    = <DoBasicVertexes e.Stack (e.Graph) (e.ToDrive (e.FuncName)) (e.Basics)>;

* Все функции просканировали.
  /* пустой стек */ (e.Graph) (e.ToDrive) (e.Basics)
    = (ToDrive e.ToDrive)
      (Basics e.Basics)
      (Unreachable
        <Map
          {
            (s.Hash e.Bucket)
              = <Map
                  {
                    (Func (e.Name) Children (e._)) = (e.Name)
                  }
                  e.Bucket
                >
          }
          e.Graph
        >
      );
}

WrapBucket {
  s.Hash /* пусто */ = /* пусто */;
  s.Hash e.Bucket = (s.Hash e.Bucket);
}

SetDifference {
  e.Set1-B t.Common e.Set1-E (e.Set2-B t.Common e.Set2-E)
    = e.Set1-B <SetDifference e.Set1-E (e.Set2-B t.Common e.Set2-E)>;

  e.Set1 (e.Set2) = e.Set1;
}

UpdateAST {
  e.AST (e.FunctionsToDrive) (e.BasisVertexes)
    = <Map
        {
          (Drive e.Name)
            , e.BasisVertexes : e._ (e.Name) e._
            = /* пропускаем */;

          t.Other = t.Other;
        }
        e.AST
      >
      <Map
        {
          (e.FuncName) = (Drive e.FuncName);
        }
        e.FunctionsToDrive
      >
}

/**
  <OptTree-AutoMarkup-CureDrives e.AST> == e.AST
*/
$ENTRY OptTree-AutoMarkup-CureDrives {
  e.AST
    = <MetaInfo e.AST> : ((e.Forbidden) (e.Inlines) (e.UserdefDrives)) e.AST^

    = <BuldCallGraph e.AST (e.Inlines)> : (e.EntryPoints) (e.Indirects) e.Graph

    = <MapAccum
        {
          (e.DrivenNodes) (Func (e.Name) Children (e.Children))
            , e.UserdefDrives : e._ (e.Name) e._
            = (
                e.DrivenNodes
                (Func (e.Name) Children (e.Children))
              )
              /* пусто */;

          (e.DrivenNodes) (Func (e.Name) Children (e.Children))
             = (e.DrivenNodes) e.Children;
        }
        (/* driven nodes */)
        e.Graph
      >
    : (e.DrivenNodes) e.NamesCalledFromUndriven

    = <Unique e.EntryPoints e.Indirects e.NamesCalledFromUndriven> : e.Roots
    = <SetIntersect (e.Roots) (e.UserdefDrives)> : e.Roots^
    = <BasicVertexes e.Graph (e.Roots)>
    : (ToDrive e.ToDrive) (Basics e.Basics) (Unreachable e.Unreachable)

    /* новых функций для прогонки не добавляем */
    = /* пусто */ : e.ToDrive^
    = <UpdateAST e.AST (e.ToDrive) (e.Basics)>
}

SetIntersect {
  (e.Set1-B t.Common e.Set1-E) (e.Set2-B t.Common t.Set2-E)
    = t.Common <SetIntersect (e.Set1-E) (e.Set2-B t.Set2-E)>;

  (e.Set1) (e.Set2) = /* пусто */;
}
