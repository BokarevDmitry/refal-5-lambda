$INCLUDE "LibraryEx";

/**
  <Pass-UnCondition s.MarkupContext t.Unit*> == t.Unit*

  s.MarkupContext ::= MarkupContext | NoMarkupContext
*/
$ENTRY Pass-UnCondition {
  s.MarkupContext e.Units
    = <Map (&Transform-Unit s.MarkupContext) e.Units>;
}

Transform-Unit {
  s.MarkupContext (Function s.Scope (e.Name) Sentences e.Sentences)
    = <UnCondition s.MarkupContext (e.Name) s.Scope e.Sentences>;

  s.MarkupContext t.Other = t.Other;
}

** НАМЕРЕННО ОТКАЗЫВАЕМСЯ ОТ ОТСЛЕЖИВАНИЯ КОПИРОВАНИЯ ПОВТОРНЫХ ПЕРЕМЕННЫХ

/**
  <UnCondition s.MarkupContext (e.Name) s.Scope e.Sentences>
    == e.NewFunctions
*/
UnCondition {
  s.MarkupContext (e.Name) s.Scope e.Sentences
    = 1 : s.SkipNo
    = /* пусто */ : e.RemNames
    = /* пусто */ : e.NewFunctions
    = <MapAccum
        (&UnCondition-Sentence e.Name s.MarkupContext)
        (s.SkipNo e.RemNames (e.NewFunctions))
        e.Sentences
      >
    : (s.SkipNo^ e.RemNames^ (e.NewFunctions^)) e.Sentences^
    = (Function s.Scope (e.Name) Sentences e.Sentences)
      <UnCondition-RemFunctions 1 (e.RemNames) e.Sentences>
      <Map
        {
          (s.Scope^ (e.Name^) e.Sentences^)
            = <UnCondition s.MarkupContext (e.Name) s.Scope e.Sentences>;
        }
        e.NewFunctions
      >;
}

UnCondition-Sentence {
  e.Name s.MarkupContext (s.SkipNo e.RemNames (e.NewFunctions)) (e.Sentence)
    , e.Sentence : (e._) (Condition (e.ConditionName) (e._) (e._)) e._
    = <AddSuffix e.Name ('*' s.SkipNo)> : e.RemName
    = <UnConditionSentence
        s.MarkupContext (e.ConditionName) (e.Sentence) e.RemName
      >
    : (e.Sentence^) e.NewSentenceFunctions
    = (
        <Inc s.SkipNo> e.RemNames (e.RemName)
        (e.NewFunctions e.NewSentenceFunctions)
      )
      (e.Sentence);

  e.Name s.MarkupContext (s.SkipNo e.RemNames (e.NewFunctions)) (e.Sentence)
    = (<Inc s.SkipNo> e.RemNames '-' (e.NewFunctions)) (e.Sentence);
}

AddSuffix {
  e.Name SUF e.Suf (e.NewSuf) = e.Name SUF e.Suf e.NewSuf;
  e.Name (e.NewSuf) = e.Name SUF e.NewSuf;
}

UnCondition-RemFunctions {
  s.SkipNo (t.RemainderName e.RemNames) t.Skip e.Sentences
    = <Fetch
        t.RemainderName
        {
          (e.RemainderName)
            = (Function GN-Local (e.RemainderName) Sentences e.Sentences);

          '-' = /* пусто */;
        }
      >
      <UnCondition-RemFunctions <Inc s.SkipNo> (e.RemNames) e.Sentences>;

  s.SkipNo (/* пусто */) /* пусто */ = /* пусто */;
}

/**
  <UnConditionSentence
    s.MarkupContext (e.ConditionalSentence) e.ContinuationName
  >
    == (e.TransformedSentence) e.NewFunctions
*/
UnConditionSentence {
  s.MarkupContext (e.ConditionName) (e.Sentence) e.ContinuationName
    = (e.ContinuationName) : t.ContName
    = <ConditionSubFunctions
        s.MarkupContext (e.ConditionName) t.ContName e.Sentence
      >
}

/*
  Схема нумерации замыканий:
  ?0 - функция проверки,
  ?1 - функция продолжения (вместо них генерируется *n)
  ?n, n - чётное, - функция forward,
  ?n, n - нечётное, - функция next.
*/

MakeContinuationSentence {
  (e.ContName) (e.Pattern) (e.ContArg)
    = ((e.Pattern) ((CallBrackets (Symbol Name e.ContName) e.ContArg)));
}

PatternSteps {
  (e.UsedVariables) e.Pattern
    = <DoPatternSteps
        (e.UsedVariables) (/* bound variables */) (HOLE e.Pattern)
      >;
}

DoPatternSteps {
  t.UsedVariables (e.BoundEVariables) e.HolesAndItems
    , e.HolesAndItems
    : {
        /* Жёсткие элементы */
        e.HolesAndItems-B (HOLE t.Item e.Pattern) e.HolesAndItems-E
          , <HardItem (e.BoundEVariables) t.Item> : True
          = <DoPatternSteps
              t.UsedVariables (e.BoundEVariables)
              e.HolesAndItems-B t.Item (HOLE e.Pattern) e.HolesAndItems-E
            >;

        e.HolesAndItems-B (HOLE e.Pattern t.Item) e.HolesAndItems-E
          , <HardItem (e.BoundEVariables) t.Item> : True
          = <DoPatternSteps
              t.UsedVariables (e.BoundEVariables)
              e.HolesAndItems-B (HOLE e.Pattern) t.Item e.HolesAndItems-E
            >;

        /* Закрытая e-переменная */
        e.HolesAndItems-B (HOLE (TkVariable 'e' e.Index)) e.HolesAndItems-E
          = <DoPatternSteps
              t.UsedVariables (e.BoundEVariables (e.Index))
              e.HolesAndItems-B (TkVariable 'e' e.Index) e.HolesAndItems-E
            >;

         /* Пустая дырка */
         e.HolesAndItems-B (HOLE /* пусто */) e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables)
               e.HolesAndItems-B e.HolesAndItems-E
             >;

         /* Скобки */
         e.HolesAndItems-B
         (HOLE (Brackets e.InBrackets) e.Pattern)
         e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables)
               e.HolesAndItems-B
               (LeftBracket)
               (HOLE e.InBrackets)
               (RightBracket)
               (HOLE e.Pattern)
               e.HolesAndItems-E
             >;

         e.HolesAndItems-B
         (HOLE e.Pattern (Brackets e.InBrackets))
         e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables)
               e.HolesAndItems-B
               (HOLE e.Pattern)
               (LeftBracket)
               (HOLE e.InBrackets)
               (RightBracket)
               e.HolesAndItems-E
             >;

         e.HolesAndItems-B
         (HOLE (ADT-Brackets (e.Name) e.InBrackets) e.Pattern)
         e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables)
               e.HolesAndItems-B
               (LeftADT e.Name)
               (HOLE e.InBrackets)
               (RightADT)
               (HOLE e.Pattern)
               e.HolesAndItems-E
             >;

         e.HolesAndItems-B
         (HOLE e.Pattern (ADT-Brackets (e.Name) e.InBrackets))
         e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables)
               e.HolesAndItems-B
               (HOLE e.Pattern)
               (LeftADT e.Name)
               (HOLE e.InBrackets)
               (RightADT)
               e.HolesAndItems-E
             >;

         /* Открытая e-переменная */
         e.HolesAndItems-B
         (HOLE (TkVariable 'e' e.Index) e.Pattern)
         e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables (e.Index))
               e.HolesAndItems-B
               (OpenE 'e' e.Index)
               (HOLE e.Pattern)
               e.HolesAndItems-E
             >
             (
               <Map
                 &BindBrackets
                 <T1 t.UsedVariables e.HolesAndItems>
                 <T2 t.UsedVariables e.HolesAndItems>
                 <T3 t.UsedVariables e.HolesAndItems>
                 <T4 t.UsedVariables e.HolesAndItems>
                 <T5 t.UsedVariables e.HolesAndItems>
                 <T5-sub t.UsedVariables e.Index>
                 <T6 t.UsedVariables e.HolesAndItems>
                 <T7 t.UsedVariables e.HolesAndItems>
               >
             );

           /* Конец разбора */
           e.OnlyItems
             = (<BindBrackets <T0 e.OnlyItems>>);
      };
}

HardItem {
  (e.BoundEVariables) (Symbol s.Type e.Info) = True;

  (e.BoundEVariables) (TkVariable 's' e.Index) = True;
  (e.BoundEVariables) (TkVariable 't' e.Index) = True;

  (e.BoundEVariables-B (e.Index) e.BoundEVariables-E)
  (TkVariable 'e' e.Index) = True;

  (e.BoundEVariables) (TkVariable 'e' e.Index) = False;
  (e.BoundEVariables) (Brackets e.Pattern) = False;
  (e.BoundEVariables) (ADT-Brackets (e.Name) e.Pattern) = False;
}

BindBrackets {
  (e.Expr) = (<DoBindBrackets ('$') e.Expr>);
}

DoBindBrackets {
  (t.MultiBracket e.Scanned) (Symbol s.Type e.Info) e.Tail
    = <DoBindBrackets (t.MultiBracket e.Scanned (Symbol s.Type e.Info)) e.Tail>;

  (t.MultiBracket e.Scanned) (TkVariable s.Type e.Index) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (TkVariable s.Type e.Index)) e.Tail
      >;

  (t.MultiBracket e.Scanned) (OpenE s.Type e.Index) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (Brackets (TkVariable s.Type e.Index)))
        e.Tail
      >;

  (t.MultiBracket e.Scanned) (Brackets e.InBrackets) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (Brackets e.InBrackets)) e.Tail
      >;

  (t.MultiBracket e.Scanned) (LeftBracket) e.Tail
    = <DoBindBrackets ((t.MultiBracket e.Scanned)) e.Tail>;

  ((t.MultiBracket e.Scanned) e.InBrackets) (RightBracket) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (Brackets e.InBrackets)) e.Tail
      >;

  (t.MultiBracket e.Scanned) (LeftADT e.Name) e.Tail
    = <DoBindBrackets ((t.MultiBracket e.Scanned) (e.Name)) e.Tail>;

  ((t.MultiBracket e.Scanned) (e.Name) e.InBrackets) (RightADT) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (ADT-Brackets (e.Name) e.InBrackets)) e.Tail
      >;

  ('$' e.Scanned) = e.Scanned;
}

/*
  Смысл функций T1…T7 поясняется в «Подход к преобразованию условий.md».
*/

T1 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarNameSuf t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarNameSuf t.UsedVars1 't' e.Index ('_next')> : t.UsedVars2 e.tX_next
    , <NewVarNameSuf t.UsedVars2 'e' e.Index ('_rest')> : t.UsedVars3 e.eX_rest
    = (
        e.Items
        (Brackets (TkVariable e.eX_fix))
        (TkVariable e.tX_next)
        (TkVariable e.eX_rest)
        <PassiveHoles t.UsedVars3 e.ItemsAndHoles>
      );
}

PassiveHoles {
  t.UsedVariables
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern)
  e.ItemsAndHoles
    , <NewVarNameSuf t.UsedVariables 'e' e.Index ('_rest')>
    : t.NewVars e.eX_rest
    = e.Items
      (TkVariable e.eX_rest)
      <PassiveHoles t.NewVars e.ItemsAndHoles>;

  t.UsedVariables e.Items = e.Items;
}

T2 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarNameSuf t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarNameSuf t.UsedVars1 't' e.Index ('_next')> : t.UsedVars2 e.tX_next
    , <NewVarNameSuf t.UsedVars2 'e' e.Index ('_rest')> : t.UsedVars3 e.eX_rest
    = (
        e.Items
        (Brackets (TkVariable e.eX_fix) (TkVariable e.tX_next))
        (TkVariable e.eX_rest)
        <PassiveHoles t.UsedVars3 e.ItemsAndHoles>
      );
}

T3 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarNameSuf t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    = (
        e.Items
        (Brackets (TkVariable e.eX_fix))
        <PassiveHoles t.UsedVars1 e.ItemsAndHoles>
      );
}

T4 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarNameSuf t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    = (
        e.Items (TkVariable e.eX_fix)
        <PassiveHoles t.UsedVars1 e.ItemsAndHoles>
      );
}

T5 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <T5-sub t.UsedVars e.Index> : (t.SourceVar t.eX_fix t.eX_var)
    = (
        e.Items (Brackets t.eX_fix) t.eX_var
        <Substitute
          e.Pattern <T5-UnHole e.ItemsAndHoles> (t.SourceVar t.eX_fix t.eX_var)
        >
      );
}

T5-UnHole {
  e.Items (HOLE e.Pattern) e.ItemsAndHoles
    = e.Items e.Pattern <T5-UnHole e.ItemsAndHoles>;

  e.Items = e.Items;
}

T5-sub {
  t.UsedVars e.Index
    , <NewVarNameSuf t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarNameSuf t.UsedVars 'e' e.Index ('_var')> : t.UsedVars2 e.eX_var
    = ((TkVariable 'e' e.Index) (TkVariable e.eX_fix) (TkVariable e.eX_var));
}

Substitute {
  (TkVariable s.Type e.Index) e.Tail ((TkVariable s.Type e.Index) e.Expr)
    = e.Expr
      <Substitute e.Tail ((TkVariable s.Type e.Index) e.Expr)>;

  (Brackets e.InBrackets) e.Tail (t.Variable e.Expr)
    = (Brackets <Substitute e.InBrackets (t.Variable e.Expr)>)
      <Substitute e.Tail (t.Variable e.Expr)>;

  (ADT-Brackets (e.Name) e.InBrackets) e.Tail (t.Variable e.Expr)
    = (ADT-Brackets (e.Name) <Substitute e.InBrackets (t.Variable e.Expr)>)
      <Substitute e.Tail (t.Variable e.Expr)>;

  (CallBrackets e.InBrackets) e.Tail (t.Variable e.Expr)
    = (CallBrackets <Substitute e.InBrackets (t.Variable e.Expr)>)
      <Substitute e.Tail (t.Variable e.Expr)>;

  (ClosureBrackets e.InBrackets) e.Tail (t.Variable e.Expr)
    = (ClosureBrackets <Substitute e.InBrackets (t.Variable e.Expr)>)
      <Substitute e.Tail (t.Variable e.Expr)>;

  t.OtherItem e.Tail (t.Variable e.Expr)
    = t.OtherItem <Substitute e.Tail (t.Variable e.Expr)>;

  /* пусто */ (t.Variable e.Expr)
    = /* пусто */;
}

T6 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarNameSuf t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarNameSuf t.UsedVars1 'e' e.Index ('_rest')> : t.UsedVars2 e.eX_rest
    = (
        e.Items
        (Brackets (TkVariable e.eX_fix))
        (TkVariable e.eX_rest)
        <PassiveHoles t.UsedVars2 e.ItemsAndHoles>
      );
}

T7 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarNameSuf t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarNameSuf t.UsedVars1 'e' e.Index ('_rest')> : t.UsedVars2 e.eX_rest
    = (
        e.Items
        (TkVariable e.eX_fix) (TkVariable e.eX_rest)
        <PassiveHoles t.UsedVars2 e.ItemsAndHoles>
      );
}

T0 {
  e.Items = (<DoT0 e.Items>);
}

DoT0 {
  (OpenE 'e' e.Index) e.Tail
    = (Brackets (TkVariable 'e' e.Index)) <DoT0 e.Tail>;

  (Brackets e.InBrackets) e.Tail = (Brackets <DoT0 e.InBrackets>) <DoT0 e.Tail>;
  (ADT-Brackets (e.Name) e.InBrackets) e.Tail
    = (ADT-Brackets (e.Name) <DoT0 e.InBrackets>) <DoT0 e.Tail>;

  t.OtherItem e.Tail = t.OtherItem <DoT0 e.Tail>;

  /* пусто */ = /* пусто */;
}

/**
  <ConditionSubFunctions
    s.MarkupContext (e.ConditionName) t.ContName e.Sentence
  >
    == (e.CallCheckSentence) e.SubFunctions
*/
ConditionSubFunctions {
  s.MarkupContext (e.ConditionName) t.ContName e.Sentence
    , e.Sentence
    : (e.Pattern)
      (Condition (e.ConditionName) (e.CondResult) (e.CondPattern))
      e.SentenceTail
    , e.ConditionName '?' 0 : e.CheckFunction
    , <ExtractVariables (e.Sentence)> : e.SentenceVariables
    , <ConditionContext s.MarkupContext e.Pattern> : e.PatternVarsAsExpr
    , <PatternSteps (e.SentenceVariables) e.Pattern> : e.PatternSteps
    , <OpenEChain
        (e.ConditionName) (e.SentenceVariables) t.ContName (e.CheckFunction)
        (e.PatternVarsAsExpr) (e.CondResult)
        e.PatternSteps
      >
    : (e.ContSentence) e.OpenEFunctions
    , (
        GN-Local (e.CheckFunction)
        ((e.PatternVarsAsExpr e.CondPattern) e.SentenceTail)
        e.ContSentence
      )
    : t.CheckFunction
    = (
        (e.Pattern)
        (
          (CallBrackets
            (Symbol Name e.CheckFunction) e.PatternVarsAsExpr e.CondResult
          )
        )
      )
      t.CheckFunction e.OpenEFunctions;
}

ConditionContext {
  s.MarkupContext e.Pattern
    = <Map
        (&MakeVariables s.MarkupContext)
        <Unique <ExtractVariables-Expr e.Pattern>>
      >;
}

MakeVariables {
  MarkupContext ('e' e.Index)
    = (Symbol Identifier VAR 'e' e.Index) (Brackets (TkVariable 'e' e.Index));
  MarkupContext (s.VarType e.Index)
    = (Symbol Identifier VAR s.VarType e.Index) (TkVariable s.VarType e.Index);

  NoMarkupContext ('e' e.Index) = (Brackets (TkVariable 'e' e.Index));
  NoMarkupContext (s.VarType e.Index) = (TkVariable s.VarType e.Index);
}

OpenEChain {
  (e.ConditionName) (e.VarNames) (e.ContName)
  (e.CheckFunction) (e.PatternVarsAsExpr) (e.CondResult)
  ((e.T0)) /* пусто */
    , <NewVarNameSuf (e.VarNames) 'e' 0 ('Other')> : (e.NewVarNames) e.eOther
    = (
        (
          (e.PatternVarsAsExpr (TkVariable e.eOther))
          ((CallBrackets (Symbol Name e.ContName) e.T0))
        )
      )
      /* пусто */;

  (e.ConditionName) (e.VarNames) t.ContName
  (e.CheckFunction) (e.PatternVarsAsExpr) (e.CondResult)
  ((e.T0)) e.Templates
    , e.ConditionName '?' 2 : e.NextForward
    , <DoOpenEChain
        (e.ConditionName) 2 (e.NextForward) t.ContName
        (e.CheckFunction) (e.PatternVarsAsExpr e.CondResult)
        (/* generated */) e.Templates
      >
    : e.NewFunctions
    , <NewVarNameSuf (e.VarNames) 'e' 0 ('Other')> : (e.NewVarNames) e.eOther
    = (
        (
          (e.PatternVarsAsExpr (TkVariable e.eOther))
          ((CallBrackets (Symbol Name e.NextForward) e.T0))
        )
      )
      e.NewFunctions;
}

DoOpenEChain {
  (e.ConditionName) s.CurrentForwardId (e.CurrentForward) t.ContName
  (e.CheckFunction) (e.CheckFunctionArg)
  (e.GeneratedFunctions) (e.TemplateSet) /* пусто */
    , <MakeOpenE-ForwardNext
        (e.ConditionName) s.CurrentForwardId (e.CurrentForward) t.ContName
        (e.CheckFunction) (e.CheckFunctionArg)
        e.TemplateSet
      >
    : e.NewFunctions
    = e.GeneratedFunctions e.NewFunctions;

  (e.ConditionName) s.CurrentForwardId (e.CurrentForward) t.ContName
  (e.CheckFunction) (e.CheckFunctionArg)
  (e.GeneratedFunctions) (e.TemplateSet) e.TemplateSets
    , <+ 2 s.CurrentForwardId> : s.NextForwardId
    , e.ConditionName '?' s.NextForwardId : e.NextForward
    , <MakeOpenE-ForwardNext
        (e.ConditionName) s.CurrentForwardId (e.CurrentForward) (e.NextForward)
        (e.CheckFunction) (e.CheckFunctionArg)
        e.TemplateSet
      >
    : e.NewFunctions
    = <DoOpenEChain
        (e.ConditionName) s.NextForwardId (e.NextForward) t.ContName
        (e.CheckFunction) (e.CheckFunctionArg)
        (e.GeneratedFunctions e.NewFunctions) e.TemplateSets
      >;
}

MakeOpenE-ForwardNext {
  (e.ConditionName) s.CurrentForwardId (e.CurrentForwardName) t.ContName
  (e.CheckFunction) (e.CheckFunctionArg)
  (e.T1) (e.T2) (e.T3) (e.T4) (e.T5) (e.T5-sub) (e.T6) (e.T7)
    , e.ConditionName '?' <+ 1 s.CurrentForwardId> : e.NextName
    , <Substitute e.CheckFunctionArg (e.T5-sub)> : e.CheckFuncArgSubst
    = (
        GN-Local (e.CurrentForwardName)
        ((e.T1) ((CallBrackets (Symbol Name e.NextName) e.T2)))
        <MakeContinuationSentence t.ContName (e.T3) (e.T4)>
      )
      (
        GN-Local (e.NextName)
        (
          (e.T5)
          ((CallBrackets (Symbol Name e.CheckFunction) e.CheckFuncArgSubst))
        )
        <MakeContinuationSentence t.ContName (e.T6) (e.T7)>
      );
}


/**
  <ExtractVariables e.Sentences> == e.Variables

  e.Variables ::= (s.Mode e.Index s.Depth)*
*/
$ENTRY ExtractVariables {
  e.Sentences = <Unique <ExtractVariables-Sentences e.Sentences>>;
}

ExtractVariables-Sentences {
  ((e.Pattern) e.Tail) e.Sentences
    = <ExtractVariables-Expr e.Pattern>
      <ExtractVariables-Tail e.Tail>
      <ExtractVariables-Sentences e.Sentences>;

  /* пусто */ = /* пусто */;
}

ExtractVariables-Tail {
  (Condition (e.ConditionName) (e.Result) (e.Pattern)) e.Tail
    = <ExtractVariables-Expr e.Result>
      <ExtractVariables-Expr e.Pattern>
      <ExtractVariables-Tail e.Tail>;

  (e.Result) = <ExtractVariables-Expr e.Result>;
}

$ENTRY ExtractVariables-Expr {
  (TkVariable s.VarType e.Index) e.Terms
    = (s.VarType e.Index) <ExtractVariables-Expr e.Terms>;

  (Brackets e.Inner) e.Terms = <ExtractVariables-Expr e.Inner e.Terms>;
  (ADT-Brackets (e.Name) e.Inner) e.Terms
    = <ExtractVariables-Expr e.Inner e.Terms>;

  (CallBrackets e.Inner) e.Terms = <ExtractVariables-Expr e.Inner e.Terms>;
  (ClosureBrackets e.Inner) e.Terms = <ExtractVariables-Expr e.Inner e.Terms>;

  t.Other e.Terms = <ExtractVariables-Expr e.Terms>;

  /* пусто */ = /* пусто */;
}


/**
  <NewVarNameSuf (e.Variables) s.Mode e.Prefix s.Depth (e.Suffix)>
    == (e.Variables^) s.Mode e.NewIndex s.Depth
*/
$ENTRY NewVarNameSuf {
  (e.Variables) s.Mode e.Prefix s.Depth (e.Suffix)
    = <NewVarName (e.Variables) s.Mode e.Prefix e.Suffix s.Depth>;
}

/**
  <NewVarName (e.Variables) e.Variable> == (e.Variables^) e.Variable^

  e.Variable ::= s.Mode e.Index s.Depth
*/
$ENTRY NewVarName {
  (e.Vars-B (e.Variable) e.Vars-E) e.Variable
    = <DoNewVarName ((e.Variable) e.Vars-B e.Vars-E) e.Variable>;

  (e.Vars) e.Variable = ((e.Variable) e.Vars) e.Variable;
}

DoNewVarName {
  (e.Vars) e.Variable
    = e.Variable : s.Mode e.Index s.Depth
    = <IncName e.Index> : e.NewIndex
    = s.Mode e.NewIndex s.Depth : e.NewVar
    , e.Vars
    : {
        e.Vars-B (e.NewVar) e.Vars-E
          = <DoNewVarName ((e.NewVar) e.Vars-B e.Vars-E) e.NewVar>;

        e.Vars^ = ((e.NewVar) e.Vars) e.NewVar;
      };
}

IncName {
  e.Name s.Digit, '0123456789' : e._B s.Digit s.Next e._E = e.Name s.Next;
  e.Name '9' = <IncName e.Name> '0';
  e.Name = e.Name '0';
}
