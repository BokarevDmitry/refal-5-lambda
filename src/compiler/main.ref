$INCLUDE "LibraryEx";

*$FROM ParseCmdLine
$EXTERN ParseCommandLine;

*$FROM Config
$EXTERN Config-GetLogFile,
  Config-GetTargetFileName, Config-SetTargetFileName, Config-GetErrorFile,
  Config-GetCppCompiler, Config-GetGrammarCheck, Config-GetTargetSuffix,
  Config-GetSearchFolders, Config-GetTargetMode, Config-GetPrefix,
  Config-GetChmodXCommand, Config-GetReferences, Config-GetIncorporateds,
  Config-GetTempDir, Config-GetKeepRasls, Config-GetOverwriteExistRasls,
  Config-GetNoSources;

*$FROM Log
$EXTERN Log-Init, Log-Final;

*$FROM Error
$EXTERN PrintErr;

*$FROM FindFile
$EXTERN FindFiles;

*$FROM Engine
$EXTERN CompileFile, GrammarCheck;

*$FROM Library
$EXTERN Open-Auto, Close, FSeek, FTell, WriteBytes, RenameFile;

*$FROM Generator-RASL
$EXTERN PutBlockStart, PutBlockReference, PutBlockIncorporated;

*$FROM Platform
$EXTERN DirectorySeparator, IsDirectorySeparator;


$ENTRY Go {
  /* пусто */
    = <Main <ArgList>>
}

Main {
  (e.ProgName) ('@' e.Config)
    = <Main-SwValidCommandLine
        (e.Config) <ParseCommandLine <LoadFile e.Config>>
      >;

  (e.ProgName) e.Arguments
    = <Main-SwValidCommandLine
        CommandLine <ParseCommandLine e.Arguments>
      >;
}

Main-SwValidCommandLine {
  t.CommandLineSource Success t.Config /* файлов нет */
    , <Config-GetNoSources t.Config> : False
    = <ReportErrors
        t.CommandLineSource t.Config (1 'no source files in command line')
      >;

  t.CommandLineSource Success t.Config e.Files
    = <Log-Init <Config-GetLogFile t.Config>>
      <Main-SwFoundFiles
        t.CommandLineSource t.Config
        <LookupSourceFiles t.Config e.Files>
      >
      <Log-Final>;

  t.CommandLineSource Fails e.Errors
    = <ReportErrors t.CommandLineSource NoConfig e.Errors>;
}

ReportErrors {
  t.CommandLineSource t.Config e.Errors
    = <ReportMessages (&OnErrors 'Error') t.CommandLineSource t.Config e.Errors>;
}

OnErrors {
  t.Config
    = <CreateErrorFileMark t.Config>
      <Exit 1>;
}

ReportWarnings {
  t.CommandLineSource t.Config e.Warnings
    = <ReportMessages
        (&OnWarnings 'Warning') t.CommandLineSource t.Config e.Warnings
      >;
}

OnWarnings {
  t.Config = /* пусто */;
}

ReportMessages {
  (s.FnAfterMessages e.Banner) t.CommandLineSource t.Config e.Messages
    = t.CommandLineSource
    : {
        (e.ConfigFile) = e.ConfigFile ':';
        CommandLine = 'Command line argument ';
      }
    : e.Prefix
    = <Map
        {
          (s.Pos e.Message)
            = <PrintErr e.Prefix <Symb s.Pos> ': ' e.Banner ': ' e.Message>;
        }
        e.Messages
      >
      <s.FnAfterMessages t.Config>;
}

CreateErrorFileMark {
  /*
    Вызывается также при ошибке в командной строке, когда t.Config
    не удалось построить, поэтому NoConfig
  */
  NoConfig = /* ничего */;

  t.Config = <CreateErrorFileMark-SwFile <Config-GetErrorFile t.Config>>;
}

CreateErrorFileMark-SwFile {
  NoErrorFile = /* ничего */;
  ErrorFile e.FileName = <SaveFile (e.FileName)>;
}

Main-SwFoundFiles {
  t.CommandLineSource t.Config
  e.Files-B (s.Pos NotFound e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        <Map
          {
            (s.Pos^ NotFound e.FileName^)
              = (s.Pos 'file ' e.FileName ' is not found');

            (s.Pos^ Source (s.Dialect e.Source) e.Output) = /* пусто */;
            (s.Pos^ Output e.Output) = /* пусто */;
            (s.Pos^ OutputWithNative (e.Output) e.NativeOutput) = /* пусто */;
          }
          (s.Pos NotFound e.FileName) e.Files-E
        >
      >;

  t.CommandLineSource t.Config e.Files
    = <CorrectTargetFileName t.CommandLineSource t.Config e.Files> : t.Config^
    = <Main-SwRenamedTargets
        t.CommandLineSource t.Config <RenameTargets t.Config e.Files>
      >;
}

CorrectTargetFileName {
  t.CommandLineSource t.Config t.FirstFile e.Files
    , <Config-GetTargetFileName t.Config>
    : {
        DefaultTargetFileName
          = t.FirstFile
          : {
              (s.Pos Source (s.Dialect e.Source) e.Output) = e.Output;
              (s.Pos Output e.Output) = e.Output;
              (s.Pos OutputWithNative (e.Output) e.NativeOutput) = e.Output
            }
          : e.Output

          = <GetBaseName e.Output> : e.LastPartName
          = <Lower e.LastPartName> : e.LowerBaseName '.rasl'    /* assert */
          = e.LastPartName : e.BaseName '.' s.R s.A s.S s.L
          = FromFirstFile e.BaseName;

        e.TargetFileName = FromCommandLine e.TargetFileName;
      }
    : s.Origin e.TargetFileName
    = <Config-SetTargetFileName t.Config s.Origin e.TargetFileName>
    : Success t.Config^
    = t.Config;

  t.CommandLineSource t.Config /* no files */
    , <Config-GetTargetFileName t.Config>
    : {
        DefaultTargetFileName
          = <ReportErrors
              t.CommandLineSource t.Config
              (1 'Option --no-sources require option -o (--target-file)')
            >;

        e.TargetFileName
          = <Config-SetTargetFileName t.Config FromCommandLine e.TargetFileName>
          : Success t.Config^
          = t.Config;
      };
}

Main-SwRenamedTargets {
  t.CommandLineSource
  t.Config
  e.Files-B (s.Pos Collision e.Collision) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        <Map
          {
            (s.Pos^ Collision (e.FirstTarget) e.SecondTarget)
              = (
                  s.Pos
                  'files ' e.FirstTarget ' and ' e.SecondTarget ' have same name'
                );

            (s.Pos^ Source (s.Dialect e.Source) e.Output) = /* пусто */;
            (s.Pos^ Output e.Output t.Native) = /* пусто */;
          }
          (s.Pos Collision e.Collision) e.Files-E
        >
      >;

  t.CommandLineSource
  t.Config
  e.Files
    = <Config-GetGrammarCheck t.Config> : s.GrammarCheck
    = s.GrammarCheck <CompileFiles t.Config s.GrammarCheck e.Files>
    : {
        s.GrammarCheck^ e.Outputs-B Fails e.Outputs-E
          = <CreateErrorFileMark t.Config>
            <Exit 1>;

        NormalRun e.Outputs
          = <Link t.CommandLineSource t.Config e.Outputs>;

        GrammarCheck e.Outputs
          = <Prout '** No syntax errors found **'>;
      };
}

/*----------------------------------------------------------------------------*/

CalcTargetFileName {
  s.TargetMode t.Config e.OutputFiles
    = <Config-GetTargetFileName t.Config>
    : {
        FromFirstFile e.BaseName
          = e.BaseName <Config-GetTargetSuffix t.Config s.TargetMode>;

        FromCommandLine e.TargetFileName = e.TargetFileName;
      };
}

LookupSourceFiles {
  t.Config e.Files
    = <Config-GetTargetMode t.Config> : s.TargetMode
    = <Config-GetSearchFolders t.Config> : e.SearchFolders
    = <Map
        {
          (s.Pos e.FileName)
            = <FindFiles s.TargetMode (e.SearchFolders) (e.FileName)>
            : {
                (s.ResultTag e.Info) = (s.Pos s.ResultTag e.Info);
              };
        }
        e.Files
      >;
}

RenameTargets {
  t.Config e.Files
    = <Config-GetTempDir t.Config> : e.TempDir
    = <ScanCollisions t.Config <Map (&GetFileName e.TempDir) e.Files>>;
}

GetFileName {
  e.TempDir (s.Pos Output e.FileName)
    = (
        (<GetBaseNameLowerCaseNoExt e.FileName>)
        (s.Pos Output e.FileName NoNative)
      );

  e.TempDir (s.Pos OutputWithNative (e.FileName) e.NativeFileName)
    = (
        (<GetBaseNameLowerCaseNoExt e.FileName>)
        (s.Pos Output e.FileName (e.NativeFileName))
      );

  e.TempDir (s.Pos Source (s.Dialect e.Source) e.Output)
    = <GetBaseName e.Output> : e.Output^
    = <GlueNames (e.TempDir) (e.Output)> : e.Output^
    = (
        (<GetBaseNameLowerCaseNoExt e.Output>)
        (s.Pos Source (s.Dialect e.Source) e.Output)
      );
}

ScanCollisions {
  t.Config
  ((e.BaseName) e.Locations1)
  e.Files-B ((e.BaseName) e.Locations2) e.Files-E
    = <ScanCollisions
        t.Config
        e.Files-B ((e.BaseName) e.Locations1 e.Locations2) e.Files-E
      >;

  t.Config
  ((e.BaseName) e.Locations) e.Files
    = <RenameLocations t.Config e.Locations> <ScanCollisions t.Config e.Files>;

  t.Config /* нет файлов */ = /* всё */;
}

RenameLocations {
  t.Config
  e.Locations-B (s.Pos1 Output e.FirstTarget t.FirstNative)
  e.Locations-M (s.Pos2 Output e.SecondTarget t.SecondNative)
  e.Locations-E
    = (s.Pos2 Collision (e.FirstTarget) e.SecondTarget);

  t.Config
  e.Locations-B (s.Pos Output e.Target t.Native) e.Locations-E
    = <RenameLocations-Aux
        t.Config 1 e.Locations-B (s.Pos Output e.Target t.Native) e.Locations-E
      >;

  t.Config e.Locations = <RenameLocations-Aux t.Config 0 e.Locations>;
}

RenameLocations-Aux {
  t.Config s.InitNumber e.Locations
    = <Config-GetOverwriteExistRasls t.Config> : s.Overwrite
    = <MapAccum
        {
          s.Num (s.Pos Source (s.Dialect e.Source) e.Output '.rasl')
            , s.Overwrite : False
            = <FindFreeName s.Num e.Output> : s.Num^ e.NewName
            = <Inc s.Num>
              (s.Pos Source (s.Dialect e.Source) e.NewName '.rasl');

          s.Num (s.Pos Source (s.Dialect e.Source) e.Output '.rasl')
            = <AddNumSuffix s.Num e.Output> : e.NewName
            = <Inc s.Num>
              (s.Pos Source (s.Dialect e.Source) e.NewName '.rasl');

          s.Num (s.Pos Output e.Output t.Native)
            = s.Num (s.Pos Output e.Output t.Native);
        }
        s.InitNumber e.Locations
      >
    : s.Num e.NewLocations
    = e.NewLocations;
}

$INLINE AddNumSuffix;

AddNumSuffix {
  0 e.Output = e.Output;
  s.Num e.Output = e.Output '@' <Symb s.Num>;
}

FindFreeName {
  s.Num e.Output
    = <AddNumSuffix s.Num e.Output> : e.NewName
    = <ExistFile e.NewName '.rasl'> <ExistFile e.NewName '.cpp'>
    : {
        e._B True e._E = <FindFreeName <Inc s.Num> e.Output>;

        False False = s.Num e.NewName;
      }
}

CompileFiles {
  t.Config NormalRun e.Files
    = <Map
        {
          (s.Pos Output e.OutputName NoNative)
            = <Prout '+Linking ' e.OutputName>
              (RASL Given e.OutputName);

          (s.Pos Output e.OutputName (e.NativeName))
            = <Prout '+Linking (+ natives) ' e.OutputName>
              (RASL Given e.OutputName) (Native Given e.NativeName);

          (s.Pos Source (s.Dialect e.Source) e.OutputName)
            = <Prout '*Compiling ' e.Source ':'> : /* пусто */
            = <CompileFile t.Config (s.Dialect e.Source) e.OutputName>
            : {
                Success e.OutputName^ NoNative = (RASL Generated e.OutputName);

                Success e.OutputName^ (e.NativeOutputName)
                  = <Prout '   ... natives generated'>
                    (RASL Generated e.OutputName)
                    (Native Generated e.NativeOutputName);

                Fails = Fails;
              };
        }
        e.Files
      >;

  t.Config GrammarCheck e.Files
    = <Map
        {
          (s.Pos Output e.OutputName)
            = <Prout '+Skipping native file ' e.OutputName> (e.OutputName);

          (s.Pos Source (s.Dialect e.Source) e.OutputName)
            = <Prout '*Grammar checking ' e.Source ':'>
              <GrammarCheck t.Config s.Dialect e.Source>;
        }
        e.Files
      >;
}

Link {
  t.CommandLineSource t.Config e.Files
    = <Config-GetTargetMode t.Config>
    : {
        EXE
          = <Link-Exe
              t.CommandLineSource t.Config
              (<Config-GetCppCompiler t.Config EXE>)
              (<Config-GetPrefix t.Config>)
              e.Files
            >;

        LIB
          = <Link-Lib
              t.CommandLineSource t.Config
              (<Config-GetCppCompiler t.Config LIB>)
              (<Config-GetPrefix t.Config>)
              e.Files
            >;

        R = <Link-R t.CommandLineSource t.Config e.Files>;

        CompileOnly = /* ничего не делаем */;
      };
}

Link-Exe {
  t.CommandLineSource t.Config
  (NoCppCompiler) (/* нет префикса */) e.Files
    = <ReportErrors
        t.CommandLineSource t.Config
        (
          1
          'option -x (or --exe) require option '
          '--cpp-command-exe with nonempty value'
        )
      >;

  t.CommandLineSource t.Config
  ((e.CommandLine) e.Flags (e.CommandLineSuf)) (/* нет префикса */) e.Files
    = <Link-CppCompile
        t.Config ((e.CommandLine) e.Flags (e.CommandLineSuf)) e.Files
      >;

  t.CommandLineSource t.Config
  (e.AnyCommandLine) (e.Prefix)
  e.Files-B (Native e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        (
          1
          'unexpected native file ' e.FileName ' while compilation runs '
          'with prefix'
        )
      >;

  t.CommandLineSource t.Config
  (e.AnyCommandLine) (e.Prefix) e.Files
    = <FindPrefix t.Config e.Prefix>
    : {
        Success e.PrefixFileName
          = <Link-WithPrefix (e.PrefixFileName) t.Config e.Files>;

        Fails e.ExpectedPrefixName
          = <ReportErrors
              t.CommandLineSource t.Config
              (1 'Can\'t find prefix ' e.ExpectedPrefixName)
            >;
      };
}

Link-Lib {
  t.CommandLineSource t.Config
  (NoCppCompiler) (/* нет префикса */)
  e.Files-B (Native e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        (
          1
          'option -l (or --lib) with native code require option '
          '--cpp-command-lib with nonempty value'
        )
      >;

  t.CommandLineSource t.Config
  (NoCppCompiler) (/* нет префикса */) e.Files
    = <ReportWarnings
        t.CommandLineSource t.Config
        (
          1
          'prefix name or C++ command line is not found, '
          'create library without prefix'
        )
      >
      <Link-R t.CommandLineSource t.Config e.Files>;

  t.CommandLineSource t.Config
  ((e.CommandLine) e.Flags (e.CommandLineSuf)) (/* нет префикса */) e.Files
    = <Link-CppCompile
        t.Config ((e.CommandLine) e.Flags (e.CommandLineSuf)) e.Files
      >;

  t.CommandLineSource t.Config
  (e.AnyCommandLine) (e.Prefix)
  e.Files-B (Native e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        (
          1
          'unexpected native file ' e.FileName ' while compilation runs '
          'with prefix'
        )
      >;

  t.CommandLineSource t.Config
  (e.AnyCommandLine) (e.Prefix) e.Files
    = <FindPrefix t.Config e.Prefix>
    : {
        Success e.PrefixFileName
          = <Link-WithPrefix (e.PrefixFileName) t.Config e.Files>;

        Fails e.ExpectedPrefixName
          = <ReportWarnings
              t.CommandLineSource t.Config
              (
                1
                'Can\'t find prefix ' e.ExpectedPrefixName ', create module '
                'without prefix (R module)'
              )
            >
            <Link-R t.CommandLineSource t.Config e.Files>;
      };
}

Link-R {
  t.CommandLineSource t.Config
  e.Files-B (Native e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        (1 'unexpected native file ' e.FileName ' while creating R module')
      >;

  t.CommandLineSource t.Config e.Files
    = <Link-Aux
        R
        {
          e.IntermediateName = /* ничего не делаем */;
        }
        t.Config e.Files
      >;
}

Link-WithPrefix {
  (e.PrefixFileName) t.Config e.Files
    = <Link-Aux
        <Config-GetTargetMode t.Config>
        {
          e.IntermediateName
            = <CopyPrefix (e.PrefixFileName) (e.IntermediateName)>
              <Chmod-X-Prefix t.Config e.IntermediateName>;
        }
        t.Config e.Files
      >;
}

Chmod-X-Prefix {
  t.Config e.IntermediateName
    = <Config-GetChmodXCommand t.Config>
    : {
        /* пусто */ = /* ничего не делаем */;

        e.ChmodXCommand
          = <System e.ChmodXCommand ' "' e.IntermediateName '"'>
          : e.RetCode
          = <CheckReturnCode t.Config (e.RetCode) 'chmod'>;
      };
}

CheckReturnCode {
  t.Config (0) e.Component = /* пусто */;

  t.Config (e.RetCode) e.Component
    = <LinkError
        t.Config
        e.Component ' finished with return code ' <Symb e.RetCode>
      >;
}

Link-CppCompile {
  t.Config ((e.CommandLine) e.Flags (e.CommandLineSuf)) e.Files
    = e.CommandLineSuf
    : {
        /* пусто */ = /* пусто */;
        e.CommandLineSuf^ = ' "' e.CommandLineSuf '"';
      }
    : e.CommandLineSuf^
    = <Link-Aux
        <Config-GetTargetMode t.Config>
        {
          e.IntermediateName
            = <System
                e.CommandLine
                e.IntermediateName
                e.Flags
                <Map
                  {
                    (RASL s.Origin e.FileName) = /* пусто */;
                    (Native s.Origin e.FileName) = ' "' e.FileName '"';
                  }
                  e.Files
                >
                e.CommandLineSuf
              >
            : e.RetCode
            = <CheckReturnCode t.Config (e.RetCode) 'C++ compiler'>
              <CheckCppCompilationSuccessed t.Config e.IntermediateName>
              <EnsureAligned4096 e.IntermediateName>;
        }
        t.Config e.Files
      >;
}

Link-Aux {
  s.TargetMode s.FnCreatePrefix t.Config e.Files
    = <CalcTargetFileName s.TargetMode t.Config e.Files> : e.TargetFileName
    = e.TargetFileName '.partial' : e.IntermediateName
    = <Config-GetReferences t.Config> : e.References
    = <Config-GetIncorporateds t.Config> : e.IncorporatedLibNames
    = <PreLinkCleanupTemporary t.Config e.IntermediateName>
      <s.FnCreatePrefix e.IntermediateName>
      <AppendRASLToBinary (e.IntermediateName) e.Files>
      <AppendReferencesToBinary (e.IntermediateName) e.References>
      <AppendIncorporatedToBinary (e.IntermediateName) e.IncorporatedLibNames>
      <PostLinkRename t.Config (e.IntermediateName) (e.TargetFileName)>
      <CleanupIntermediateFiles t.Config e.Files>
}

PreLinkCleanupTemporary {
  t.Config e.Temporary
    = <ExistFile e.Temporary>
    : {
        False = /* ничего не делаем */;

        True
          = <RemoveFile e.Temporary>
          : {
              True ()
                = <PrintErr 'Lost temporary file ' e.Temporary ' is removed'>;

              False (e.ErrorMessage)
                = <LinkError
                    t.Config
                    'Can\'t remove file ' e.Temporary ': ' e.ErrorMessage
                  >;
            };
      };
}

CheckCppCompilationSuccessed {
  t.Config e.TemporaryName
    = <ExistFile e.TemporaryName>
    : {
        False = <LinkError t.Config 'C++ compilation is failed'>;
        True = /* ничего не делаем */;
      };
}

EnsureAligned4096 {
  e.BinaryName
    = <Open-Auto ('ab') e.BinaryName> : s.FileHandle
    = <AlignToPage s.FileHandle>
      <Close s.FileHandle>;
}

AlignToPage {
  s.FileHandle
    = <FSeek s.FileHandle END '-' 0> : /* пусто */
    = <Mod <FTell s.FileHandle> 4096>
    : {
        0 = /* ничего не делаем */;

        s.Other =
          <WriteBytes s.FileHandle '@'>
          <AlignToPage s.FileHandle>;
      };
}

AppendRASLToBinary {
  (e.BinaryName) /* no files */
    = <AppendSimpleBlock &PutBlockStart (e.BinaryName) ()>;

  (e.BinaryName) e.Files
    = <Open-Auto ('ab') e.BinaryName> : s.FileHandle
    = <Map
        {
          (RASL s.Origin e.OutputName)
            = <WriteBytes s.FileHandle <LoadBytes e.OutputName>>;

          (Native s.Origin e.NativeName) = /* ничего не делаем */;
        }
        e.Files
      >
      <Close s.FileHandle>;
}

AppendReferencesToBinary {
  (e.BinaryName) e.References
    = <AppendSimpleBlock &PutBlockReference (e.BinaryName) e.References>;
}

AppendIncorporatedToBinary {
  (e.BinaryName) e.LibNames
    = <AppendSimpleBlock &PutBlockIncorporated (e.BinaryName) e.LibNames>;
}

AppendSimpleBlock {
  s.FnAdder (e.BinaryName) e.BlockItems
    = <Open-Auto ('ab') e.BinaryName> : s.FileHandle
    = <Map
        {
          (e.BlockItem) = <WriteBytes s.FileHandle <s.FnAdder e.BlockItem>>;
        }
        e.BlockItems
      >
      <Close s.FileHandle>;
}

PostLinkRename {
  t.Config (e.TemporaryName) (e.TargetFileName)
    = <ExistFile e.TargetFileName>
    : {
        True = <CheckedRemoveFile t.Config e.TargetFileName>;

        False = /* ничего не делаем */;
      }
    : /* пусто */
    = <RenameFile (e.TemporaryName) (e.TargetFileName)>
    : {
        True = <Prout '** Compilation succeeded **'>;

        False
          = <LinkError
              t.Config
              'Can\'t rename from ' e.TemporaryName ' to ' e.TargetFileName
            >;
      };
}

CheckedRemoveFile {
  t.Config e.FileName
    = <RemoveFile e.FileName>
    : {
        True () = /* ничего не делаем */;

        False (e.ErrorMessage)
          = <LinkError
              t.Config 'Can\'t remove file ' e.FileName ', ' e.ErrorMessage
            >;
       };
}

CleanupIntermediateFiles {
  t.Config e.Files, <Config-GetKeepRasls t.Config> : True
    = /* ничего не делаем */;

  t.Config e.Files
    = <Map
        {
          (s.FileType Given e.FileName) = /* пропускаем, он был до нас */;

          (s.FileType Generated e.FileName)
            = <CheckedRemoveFile t.Config e.FileName>;
        }
        e.Files
      >;
}

FindPrefix {
  t.Config e.Prefix
    = <Config-GetTargetMode t.Config>
    : {
        EXE = '.exe-prefix';
        LIB = '.lib-prefix';
      }
    : e.PrefixExt
    = <DoFindPrefix
        (e.Prefix e.PrefixExt) (Current) <Config-GetSearchFolders t.Config>
      >;
}

DoFindPrefix {
  (e.PrefixName) (e.NextFolder) e.Folders
    = <GlueNames (e.NextFolder) (e.PrefixName)> : e.PrefixFileName
    = <ExistFile e.PrefixFileName>
    : {
        True = Success e.PrefixFileName;
        False = <DoFindPrefix (e.PrefixName) e.Folders>;
      };

  /* В переменной среды REF5RSL префикс не ищем */
  (e.PrefixName) REF5RSL e.Folders
    = <DoFindPrefix (e.PrefixName) e.Folders>;

  (e.PrefixName) /* кончились папки */
    = Fails e.PrefixName;
}

GlueNames {
  (Current) (e.FileName) = e.FileName;
  (e.Folder) (e.FileName) = e.Folder <DirectorySeparator> e.FileName;
}

CopyPrefix {
  (e.OriginalPrefixName) (e.NewExeName)
    = <SaveBytes (e.NewExeName) <LoadBytes e.OriginalPrefixName>>;
}

LinkError {
  t.Config e.Message
    = <PrintErr 'LINK ERROR: ' e.Message>
      <CreateErrorFileMark t.Config>
      <Exit 1>;
}

GetBaseNameLowerCaseNoExt {
  e.FileName '.rasl' = <Lower <GetBaseName e.FileName>>;
}

GetBaseName {
  e.Folder s.Sep e.RestOfPath
    , <IsDirectorySeparator s.Sep> : True
    = <GetBaseName e.RestOfPath>;

  e.BaseName = e.BaseName;
}
