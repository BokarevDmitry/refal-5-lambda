$INCLUDE "LibraryEx";

*$FROM Desugaring-UnCondition
$EXTERN Pass-UnCondition, NewVarName;


$ENTRY Desugar {
  s.MarkupContext s.ConditionsMode e.AST =
    <Fetch
      e.AST
      <Pipe
        &Pass-RemovePos
        &Pass-AttachEntries
        &Pass-RemoveRedundantDriveInline
        &Pass-EnumerateVariables
        &Pass-NameNestedFuncs
        &Pass-RemoveBlocksAndAssigns
        (&Pass-FlatNestedFuncs s.MarkupContext)
        <Fetch
          s.ConditionsMode
          {
            Conditions-Native = /* no pass */;

            Conditions-Transform = (&Pass-UnCondition s.MarkupContext);
          }
        >
        &Pass-CleanupRedudandExterns
        &Pass-FoldEnums
      >
    >;
}

Pass-RemovePos {
  e.AST
    = <Map
        {
          (Function t.SrcPos s.ScopeClass (e.Name) e.Body)
            = (Function s.ScopeClass (e.Name) <RemovePos-Body e.Body>);

          (Ident t.SrcPos e.Name)
            = (Ident e.Name);

          (NativeBlock t.SrcPos e.Code)
            = (NativeBlock t.SrcPos e.Code);

          (Spec t.SrcPos (e.Name) e.Pattern)
            = (Spec (e.Name) <RemovePos-Expr e.Pattern>);

          (s.EnumSwapDeclaration t.SrcPos s.ScopeClass e.Name)
            = (s.EnumSwapDeclaration s.ScopeClass e.Name);
        }
        e.AST
      >;
}

RemovePos-Body {
  Sentences e.Sentences =
    Sentences
    <Map
      {
        ((e.Pattern) e.Assigns (e.Result) (e.Blocks)) =
          (
            (<RemovePos-Expr e.Pattern>)
            <Map
              {
                (s.ChainType (e.Result^) (e.Blocks^) (e.Pattern^))
                  = <AssignOrCondition s.ChainType> : /* пусто */
                  = (s.ChainType
                      (<RemovePos-Expr e.Result>)
                      (<RemovePos-Blocks e.Blocks>)
                      (<RemovePos-Expr e.Pattern>)
                    );
              }
              e.Assigns
            >
            (<RemovePos-Expr e.Result>)
            (<RemovePos-Blocks e.Blocks>)
          );
      }
      e.Sentences
    >;

  NativeBody t.SrcPos e.Code = NativeBody t.SrcPos e.Code;
}

AssignOrCondition {
  Assign = ; Condition = ;
}

RemovePos-Blocks {
  e.Blocks
    = <Map
        {
          (e.Body) = (<RemovePos-Body e.Body>);
        }
        e.Blocks
      >;
}

$ENTRY RemovePos-Expr {
  e.Expr =
    <Map
      {
        (TkVariable t.SrcPos s.Mode e.Index) =
          (TkVariable s.Mode e.Index);

        (TkNewVariable t.SrcPos s.Mode e.Index) =
          (TkNewVariable s.Mode e.Index);

        (Symbol Name t.SrcPos e.Name) = (Symbol Name e.Name);

        (Brackets e.InBrackets) =
          (Brackets <RemovePos-Expr e.InBrackets>);

        (ADT-Brackets t.SrcPos (e.Name) e.InBrackets) =
          (ADT-Brackets (e.Name) <RemovePos-Expr e.InBrackets>);

        (CallBrackets e.InBrackets) =
          (CallBrackets <RemovePos-Expr e.InBrackets>);

        (Closure e.Sentences) =
          (Closure <RemovePos-Body e.Sentences>);

        t.OtherTerm = t.OtherTerm;
      }
      e.Expr
    >;
}

Pass-AttachEntries {
  (Entry GN-Entry e.Name)
  e.Items-B (Function s.ScopeClass (e.Name) e.Body) e.Items-E
    = <Pass-AttachEntries
        e.Items-B (Function GN-Entry (e.Name) e.Body) e.Items-E
      >;

  (Entry GN-Entry e.Name)
  e.Items-B (s.EnumSwapDeclaration s.ScopeClass e.Name) e.Items-E
    , <OneOf s.EnumSwapDeclaration Enum Swap Declaration> : True
    = <Pass-AttachEntries
        e.Items-B (s.EnumSwapDeclaration GN-Entry e.Name) e.Items-E
      >;

  (Function s.ScopeClass (e.Name) e.Body)
  e.Items-B (Entry GN-Entry e.Name) e.Items-E
    = <Pass-AttachEntries
        (Function GN-Entry (e.Name) e.Body) e.Items-B e.Items-E
      >;

  (Function s.ScopeClass (e.Name) e.Body) e.Items
    = (Function s.ScopeClass (e.Name) e.Body) <Pass-AttachEntries e.Items>;

  (s.EnumSwapDeclaration s.ScopeClass e.Name)
  e.Items-B (Entry GN-Entry e.Name) e.Items-E
    , <OneOf s.EnumSwapDeclaration Enum Swap Declaration> : True
    = <Pass-AttachEntries
        (s.EnumSwapDeclaration s.ScopeClass e.Name)
      >;

  (s.EnumSwapDeclaration s.ScopeClass e.Name) e.Items
    , <OneOf s.EnumSwapDeclaration Enum Swap Declaration> : True
    = (s.EnumSwapDeclaration s.ScopeClass e.Name)
      <Pass-AttachEntries e.Items>;

  (s.DriveInline s.ScopeClass e.Name) e.Items
    , <OneOf s.DriveInline Inline Drive> : True
    = (s.DriveInline e.Name)
      <Pass-AttachEntries e.Items>;

  (Ident e.Name) e.Items = (Ident e.Name) <Pass-AttachEntries e.Items>;

  (NativeBlock t.SrcPos e.Code) e.Items
    = (NativeBlock t.SrcPos e.Code) <Pass-AttachEntries e.Items>;

  (Spec (e.Name) e.Pattern) e.Items
    = (Spec (e.Name) e.Pattern) <Pass-AttachEntries e.Items>;

  /* empty */ = /* empty */;
}

Pass-RemoveRedundantDriveInline {
    e.B (s.Label e.FuncName) e.M (s.Label e.FuncName) e.E
      , <OneOf s.Label Drive Inline> : True
      = <Pass-RemoveRedundantDriveInline e.B (s.Label e.FuncName) e.M e.E>;

    e.B (Drive e.FuncName) e.M (Inline e.FuncName) e.E
      = <Pass-RemoveRedundantDriveInline e.B (Drive e.FuncName) e.M e.E>;

    e.B (Inline e.FuncName) e.M (Drive e.FuncName) e.E
      = <Pass-RemoveRedundantDriveInline e.B e.M (Drive e.FuncName) e.E>;

    e.AST = e.AST;
}

Pass-EnumerateVariables {
  e.AST =
    <Map
      {
        (Spec t.Name e.Pattern)
          = <EnumerateVars-Expr 0 (/* переменные */) e.Pattern>
          : t.ScopeVars e.EnumeratedPattern
          = (Spec t.Name e.EnumeratedPattern);

        (Function s.ScopeClass (e.Name) e.Body)
          = (Function
              s.ScopeClass (e.Name)
              <EnumerateVars-Body 1 (/* переменные */) e.Body>
            );

        t.OtherProgramElement = t.OtherProgramElement;
      }
      e.AST
    >;
}

EnumerateVars-Body {
  s.Depth (e.ScopeVars) Sentences e.Sentences =
    Sentences
    <Map
      {
        ((e.Pattern) e.Assigns (e.Result) (e.Blocks))
          = <EnumerateVars-Expr s.Depth (e.ScopeVars) e.Pattern>
          : (e.ScopeVars^) e.Pattern^
          = <EnumerateVars-Assignments () s.Depth (e.ScopeVars) e.Assigns>
          : (e.ScopeVars^) s.Depth^ e.Assigns^
          = <EnumerateVars-Expr s.Depth (e.ScopeVars) e.Result>
          : (e.ScopeVars^) e.Result^
          = <EnumerateVars-Blocks <Inc s.Depth> (e.ScopeVars) e.Blocks>
          : e.Blocks^
          = ((e.Pattern) e.Assigns (e.Result) (e.Blocks));
      }
      e.Sentences
    >;

  s.Depth (e.ScopeVars) NativeBody t.SrcPos e.Code =
    NativeBody t.SrcPos e.Code;
}

EnumerateVars-Blocks {
  s.Depth (e.ScopeVars) e.Blocks
    = <Map
        {
          (e.Body) = (<EnumerateVars-Body s.Depth (e.ScopeVars) e.Body>);
        }
        e.Blocks
      >;
}

EnumerateVars-Assignments {
  (e.RAssignments) s.Depth (e.ScopeVars) /* пусто */ =
     (e.ScopeVars) s.Depth e.RAssignments;

  (e.RAssignments) s.Depth (e.ScopeVars)
  (s.ChainType (e.Result) (e.Blocks) (e.Pattern)) e.Assignments
    = <AssignOrCondition s.ChainType> : /* пусто */
    = <EnumerateVars-Expr s.Depth (e.ScopeVars) e.Result>
    : (e.ScopeVars^) e.Result^
    = <Inc s.Depth> : s.Depth^
    = <EnumerateVars-Blocks s.Depth (e.ScopeVars) e.Blocks> : e.Blocks^
    = <EnumerateVars-Expr s.Depth (e.ScopeVars) e.Pattern>
    : (e.ScopeVars^) e.Pattern^
    = <EnumerateVars-Assignments
        (e.RAssignments (s.ChainType (e.Result) (e.Blocks) (e.Pattern)))
        s.Depth (e.ScopeVars) e.Assignments
      >;
}

EnumerateVars-Expr {
  s.Depth (e.OriginScopeVars) e.Expr =
    <MapAccum
      {
        (e.ScopeVars) (TkVariable s.Mode '_' e.Index)
          = <NewVarName
              (e.ScopeVars) s.Mode '_' e.Index s.Depth (/* no suffix */)
            >
          : (e.ScopeVars^) e.NewVar
          = (e.ScopeVars) (TkVariable e.NewVar);

        (e.ScopeVars-B (s.Mode e.Index s.Depth^) e.ScopeVars-E)
        (TkVariable s.Mode e.Index) =
          (e.ScopeVars-B (s.Mode e.Index s.Depth) e.ScopeVars-E)
          (TkVariable s.Mode e.Index s.Depth);

        (e.ScopeVars) (TkVariable s.Mode e.Index) =
          ((s.Mode e.Index s.Depth) e.ScopeVars)
          (TkVariable s.Mode e.Index s.Depth);

        (e.ScopeVars) (TkNewVariable s.Mode e.Index) =
          ((s.Mode e.Index s.Depth) e.ScopeVars)
          (TkVariable s.Mode e.Index s.Depth);

        (e.ScopeVars) (Brackets e.InBrackets) =
          <Fetch
            <EnumerateVars-Expr s.Depth (e.ScopeVars) e.InBrackets>
            {
              (e.ScopeVars^) e.InBrackets^ =
                (e.ScopeVars) (Brackets e.InBrackets);
            }
          >;

        (e.ScopeVars) (ADT-Brackets (e.Name) e.InBrackets) =
          <Fetch
            <EnumerateVars-Expr s.Depth (e.ScopeVars) e.InBrackets>
            {
              (e.ScopeVars^) e.InBrackets^ =
                (e.ScopeVars) (ADT-Brackets (e.Name) e.InBrackets);
            }
          >;

        (e.ScopeVars) (CallBrackets e.InBrackets) =
          <Fetch
            <EnumerateVars-Expr s.Depth (e.ScopeVars) e.InBrackets>
            {
              (e.ScopeVars^) e.InBrackets^ =
                (e.ScopeVars) (CallBrackets e.InBrackets);
            }
          >;

        (e.ScopeVars) (Closure e.Sentences) =
          <Fetch
            <EnumerateVars-Body <Inc s.Depth> (e.ScopeVars) e.Sentences>
            {
              e.Sentences^ =
                (e.ScopeVars) (Closure e.Sentences);
            }
          >;

        (e.ScopeVars) t.OtherTerm = (e.ScopeVars) t.OtherTerm;
      }
      (e.OriginScopeVars) e.Expr
    >;
}

Pass-NameNestedFuncs {
  e.AST =
    <Map
      {
        (Function s.ScopeClass (e.Name) e.Body) =
          (Function
            s.ScopeClass (e.Name)
            <NameNestedBody (e.Name SUF) e.Body>
          );

        t.OtherProgramElement = t.OtherProgramElement;
      }
      e.AST
    >;
}

NameNestedBody {
  (e.MainName) Sentences ((e.Pattern) e.Assigns (e.Result) (e.Blocks))
     = Sentences
        (
          (e.Pattern)
          <NameNestedAssigns (e.MainName) e.Assigns>
          (<NameNestedResult (e.MainName) e.Result>)
          (<NameNestedBlocks (e.MainName) e.Blocks>)
        );

  (e.MainName) Sentences e.Sentences
    = Sentences
      <DelAccumulator
        <MapAccum
          {
            s.SentenceNumber ((e.Pattern) e.Assigns (e.Result) (e.Blocks^))
              = e.MainName '$' s.SentenceNumber: e.MainName^
              = <Inc s.SentenceNumber>
                (
                  (e.Pattern)
                  <NameNestedAssigns (e.MainName) e.Assigns>
                  (<NameNestedResult (e.MainName) e.Result>)
                  (<NameNestedBlocks (e.MainName) e.Blocks>)
                );
          }
          1 e.Sentences
        >
      >;

  (e.MainName) NativeBody t.SrcPos e.Code
    = NativeBody t.SrcPos e.Code;
}

NameNestedBlocks {
  (e.MainName) e.Blocks
    = <MapAccum
        {
          s.BlockNumber (e.Body)
            = e.MainName ':' s.BlockNumber : e.MainName^
            = <Inc s.BlockNumber>
              ((e.MainName) <NameNestedBody (e.MainName) e.Body>);
        }
        1 e.Blocks
      >
    : s.BlockNumber e.Blocks^
    = e.Blocks;
}

NameNestedAssigns {
  (e.MainName) e.Assigns
    = <DelAccumulator
        <MapAccum
          {
            s.AssignId (s.ChainType (e.Result) (e.Blocks) (e.Pattern))
              = <ChainTypeMarker s.ChainType> : s.Marker
              = e.MainName s.Marker s.AssignId : e.MainName^
              = <Inc s.AssignId>
                (s.ChainType
                  (e.MainName)
                  (<NameNestedResult (e.MainName) e.Result>)
                  (<NameNestedBlocks (e.MainName) e.Blocks>)
                  (e.Pattern)
                );
          }
          1
          e.Assigns
        >
      >;
}

ChainTypeMarker {
  Assign = '=';
  Condition = '?';
}

NameNestedResult {
  (e.MainName) e.Result
    = <DelAccumulator <NameNestedResultRec 1 (e.MainName) e.Result>>;
}

NameNestedResultRec {
  s.StartNumber (e.MainName) e.Result
    = <MapAccum
        (&NameNestedResultRec-Term e.MainName)
        s.StartNumber e.Result
      >;
}

NameNestedResultRec-Term {
  e.MainName s.NextNumber (Brackets e.InBrackets)
    = <NameNestedResultRec s.NextNumber (e.MainName) e.InBrackets>
    : s.NextNumber^ e.InBrackets^
    = s.NextNumber (Brackets e.InBrackets);

  e.MainName s.NextNumber (ADT-Brackets (e.Name) e.InBrackets)
    = <NameNestedResultRec s.NextNumber (e.MainName) e.InBrackets>
    : s.NextNumber^ e.InBrackets^
    = s.NextNumber (ADT-Brackets (e.Name) e.InBrackets);

  e.MainName s.NextNumber (CallBrackets e.InBrackets)
    = <NameNestedResultRec s.NextNumber (e.MainName) e.InBrackets>
    : s.NextNumber^ e.InBrackets^
    = s.NextNumber (CallBrackets e.InBrackets);

  e.MainName s.NextNumber (Closure e.Sentences)
    = <Inc s.NextNumber>
      (Closure
        (e.MainName '\\' s.NextNumber)
        <NameNestedBody (e.MainName '\\' s.NextNumber) e.Sentences>
      );

  e.MainName s.NextNumber t.OtherTerm = s.NextNumber t.OtherTerm;
}

Pass-RemoveBlocksAndAssigns {
  e.AST =
    <Map
      {
        (Function s.ScopeClass (e.Name) e.Body) =
          (Function
            s.ScopeClass (e.Name)
            <RemoveAssigns-Sentences e.Body>
          );

        t.OtherProgramElement = t.OtherProgramElement;
      }
      e.AST
    >;
}

RemoveAssigns-Sentences {
  Sentences e.Sentences =
    Sentences
    <Map
      &RemoveAssigns-Sentence
      e.Sentences
    >;

  NativeBody t.SrcPos e.Code =
    NativeBody t.SrcPos e.Code;
}

RemoveAssigns-Sentence {
  /*
    Присваивание есть синтаксический сахар — выражается через блок:
    … = R : { B }… P …  --->  … = R : { B }… : { P … }
  */
  (
    (e.Pattern) e.Conditions
    (Assign (e.AssignName) (e.AssignResult) (e.Blocks) (e.AssignPattern))
    e.SentenceTail
  )
    = <RemoveAssigns-Sentence
        (
          (e.Pattern) e.Conditions
          (e.AssignResult)
          (
            e.Blocks
            ((e.AssignName) Sentences ((e.AssignPattern) e.SentenceTail))
          )
        )
      >;

  /*
    Блоки, в свою очередь — тоже синтаксический сахар, являются замыканиями,
    которые по очереди применяются к результату
  */
  ((e.Pattern) e.Conditions (e.Result) (e.Blocks))
    = <RemoveAssigns-Conditions e.Conditions> : e.Conditions^
    = <RemoveAssigns-WindBlocks (e.Result) e.Blocks> : (e.Result^)
    = <RemoveAssigns-Result e.Result> : e.Result^
    = ((e.Pattern) e.Conditions (e.Result));
}

RemoveAssigns-Conditions {
  e.Conditions
    = <Map
        {
          (Condition
            (e.ConditionName) (e.Result) (e.Blocks) (e.Pattern)
          )
            = <RemoveAssigns-WindBlocks (e.Result) e.Blocks> : (e.Result^)
            = (Condition
                (e.ConditionName)
                (<RemoveAssigns-Result e.Result>)
                (e.Pattern)
              );
        }
        e.Conditions
      >;
}

RemoveAssigns-WindBlocks {
  (e.Result) e.Blocks
    = <Reduce
        {
          (e.Result^) ((e.BlockName) e.Body)
            = ((CallBrackets (Closure (e.BlockName) e.Body) e.Result));
        }
        (e.Result) e.Blocks
      >;
}

RemoveAssigns-Result {
  e.Expr
    = <Map
        {
          (Brackets e.InBrackets)
            = (Brackets <RemoveAssigns-Result e.InBrackets>);

          (ADT-Brackets (e.Name) e.InBrackets)
            = (ADT-Brackets (e.Name) <RemoveAssigns-Result e.InBrackets>);

          (CallBrackets e.InBrackets)
            = (CallBrackets <RemoveAssigns-Result e.InBrackets>);

          (Closure (e.ClosureName) e.Sentences)
            = (Closure (e.ClosureName) <RemoveAssigns-Sentences e.Sentences>);

          t.OtherTerm = t.OtherTerm;
        }
        e.Expr
    >;
}

Pass-FlatNestedFuncs {
  s.MarkupContext e.AST =
    <Map
      {
        (Function s.ScopeClass (e.Name) e.Body)
          = <ExtractNested s.MarkupContext e.Body> : (e.NestedFuncs) e.Body^
          = <Map
              {
                t.Function
                  , t.Function : (Function s._ScopeClass (e.NestedName) e._Body)
                  = (Drive e.NestedName)
                    t.Function
              }
              e.NestedFuncs
            >
            (Function s.ScopeClass (e.Name) e.Body);

        t.OtherProgramElement = t.OtherProgramElement;
      }
      e.AST
    >;
}

ExtractNested {
  s.MarkupContext e.Sentences
    = <ExtractNestedRec
        s.MarkupContext (/* внешних переменных нет */) e.Sentences
      >
    : (/* заимстовованных переменных нет */) (e.NestedFuncs) e.Sentences^
    = (e.NestedFuncs) e.Sentences;
}

ExtractNestedRec {
  s.MarkupContext (e.ScopeVars) Sentences e.Sentences
    = <MapAccum
        (&ExtractNested-Sentence s.MarkupContext e.ScopeVars)
        ((/* вложенные функции */) (/* заимствованные переменные */))
        e.Sentences
      >
    : ((e.NestedFuncs) (e.BorrowedVars)) e.Sentences^
    = (e.BorrowedVars) (e.NestedFuncs) Sentences e.Sentences;

  s.MarkupContext (e.ScopeVars) NativeBody t.SrcPos e.Code =
    (/* нет заимстовованных переменных */) (/* нет вложенных функций */)
    NativeBody t.SrcPos e.Code;
}

ExtractNested-Sentence {
  s.MarkupContext e.ScopeVars ((e.NestedFuncs) (e.BorrowedVars))
  ((e.Pattern) e.Conditions (e.Result))

    = <ExtractNested-Pattern (e.ScopeVars) (e.BorrowedVars) e.Pattern>
    : (e.BorrowedVars^) e.LocalVars

    = <ExtractNested-Conditions
        s.MarkupContext (e.BorrowedVars) (e.ScopeVars) (e.LocalVars)
        e.Conditions
      >
    : (e.ConditionsNestedFuncs) (e.BorrowedVars^) (e.LocalVars^)
      e.Conditions^

    = <ExtractNested-Result
        s.MarkupContext (e.BorrowedVars) (e.ScopeVars) (e.LocalVars) e.Result
      >
    : (e.ResultNestedFuncs) (e.BorrowedVars^) e.Result^

    = (
        (e.NestedFuncs e.ConditionsNestedFuncs e.ResultNestedFuncs)
        (e.BorrowedVars)
      )
      ((e.Pattern) e.Conditions (e.Result));
}

ExtractNested-Conditions {
  s.MarkupContext (e.BorrowedVars) (e.ScopeVars) (e.LocalVars)
  (Condition (e.ConditionName) (e.Result) (e.Pattern)) e.Conditions

    = <ExtractNested-Result
        s.MarkupContext (e.BorrowedVars) (e.ScopeVars) (e.LocalVars) e.Result
      >
    : (e.ResultNestedFuncs) (e.BorrowedVars^) e.Result^

    = <ExtractNested-Pattern (e.ScopeVars) (e.BorrowedVars) e.Pattern>
    : (e.BorrowedVars^) e.PatternLocalVars

    = <Uniq e.LocalVars e.PatternLocalVars> : e.LocalVars^

    = <ExtractNested-Conditions
        s.MarkupContext (e.BorrowedVars) (e.ScopeVars) (e.LocalVars)
        e.Conditions
      >
    : (e.ConditionsNestedFuncs) (e.BorrowedVars^) (e.LocalVars^)
      e.Conditions^

    = (e.ResultNestedFuncs e.ConditionsNestedFuncs) (e.BorrowedVars)
      (e.LocalVars)
      (Condition (e.ConditionName) (e.Result) (e.Pattern)) e.Conditions;

  s.MarkupContext (e.BorrowedVars) (e.ScopeVars) (e.LocalVars) /* пусто */
    = (/* нет вложенных функций */) (e.BorrowedVars) (e.LocalVars) /* пусто */;
}

ExtractNested-Pattern {
  (e.ScopeVars) (e.BorrowedVars) e.Pattern =
    <MapAccum
      (&UpdateBorrowedVars e.ScopeVars)
      (e.BorrowedVars)
      <Uniq
        <ExtractAllVars e.Pattern>
      >
    >;
}

ExtractAllVars {
  (TkVariable s.Mode e.Index) e.Tail =
    (s.Mode e.Index) <ExtractAllVars e.Tail>;

  (Brackets e.Inner) e.Tail = <ExtractAllVars e.Inner e.Tail>;
  (ADT-Brackets e.Inner) e.Tail = <ExtractAllVars e.Inner e.Tail>;

  t.OtherTerm e.Tail = <ExtractAllVars e.Tail>;

  /* пусто */ = /* пусто */;
}

Uniq {
  e.Uniqs t.Repeated e.NotScanned-M t.Repeated e.NotScanned-E =
    e.Uniqs <Uniq e.NotScanned-M t.Repeated e.NotScanned-E>;

  e.Uniqs = e.Uniqs;
}

UpdateBorrowedVars {
  e.ScopeVars
  (e.BorrowedVars-B (s.Mode e.Index) e.BorrowedVars-E)
  (s.Mode e.Index) =
    (e.BorrowedVars-B (s.Mode e.Index) e.BorrowedVars-E);

  e.ScopeVars-B (s.Mode e.Index) e.ScopeVars-E
  (e.BorrowedVars) (s.Mode e.Index) =
    (e.BorrowedVars (s.Mode e.Index));

  e.ScopeVars
  (e.BorrowedVars) (s.Mode e.Index) =
    (e.BorrowedVars) (s.Mode e.Index);
}

ExtractNested-Result {
  s.MarkupContext
  (e.OriginBorrowedVars) (e.ScopeVars) (e.LocalVars) e.OriginResult
    = <MapAccum
        (&ExtractNested-Result-Term s.MarkupContext (e.ScopeVars) (e.LocalVars))
        ((/* nested funcs */) (e.OriginBorrowedVars)) e.OriginResult
      >
    : ((e.NestedFuncs) (e.BorrowedVars)) e.Result
    = (e.NestedFuncs) (e.BorrowedVars) e.Result;
}

ExtractNested-Result-Term {
  s.MarkupContext (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars)) (TkVariable s.Mode e.Index) =
    (
      (e.NestedFuncs)
      <CheckBorrowed (e.ScopeVars) (e.BorrowedVars) (s.Mode e.Index)>
    )
    (TkVariable s.Mode e.Index);

  s.MarkupContext (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars)) (Brackets e.InBrackets)
    = <ExtractNested-Result
        s.MarkupContext
        (e.BorrowedVars) (e.ScopeVars) (e.LocalVars) e.InBrackets
      >
    : (e.InBracketsNestedFuncs) (e.BorrowedVars^) e.InBrackets^
    = ((e.NestedFuncs e.InBracketsNestedFuncs) (e.BorrowedVars))
      (Brackets e.InBrackets);

  s.MarkupContext (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars))
  (ADT-Brackets (e.Name) e.InBrackets)
    = <ExtractNested-Result
        s.MarkupContext
        (e.BorrowedVars) (e.ScopeVars) (e.LocalVars) e.InBrackets
      >
    : (e.InBracketsNestedFuncs) (e.BorrowedVars^) e.InBrackets^
    = ((e.NestedFuncs e.InBracketsNestedFuncs) (e.BorrowedVars))
      (ADT-Brackets (e.Name) e.InBrackets);

  s.MarkupContext (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars))
  (CallBrackets e.InBrackets)
    = <ExtractNested-Result
        s.MarkupContext
        (e.BorrowedVars) (e.ScopeVars) (e.LocalVars) e.InBrackets
      >
    : (e.InBracketsNestedFuncs) (e.BorrowedVars^) e.InBrackets^
    = ((e.NestedFuncs e.InBracketsNestedFuncs) (e.BorrowedVars))
      (CallBrackets e.InBrackets);

  s.MarkupContext (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars))
  (Closure (e.ClosureName) e.Body)
     = <ExtractNestedRec s.MarkupContext (e.ScopeVars e.LocalVars) e.Body>
     : (e.NestedBorrowedVars) (e.NestedNestedFuncs) e.Body^
     = <Fetch
        (e.NestedBorrowedVars) e.Body
        {
          /* Случай функции без контекста, нативной функции в том числе */
          (/* нет захваченных переменных */) e.Body^
            = (Function GN-Local (e.ClosureName) e.Body)
              (e.BorrowedVars)
              (Symbol Name e.ClosureName);

          /* Случай функции с контекстом */
          (e.NestedBorrowedVars) Sentences e.Sentences
            = <CreateContext s.MarkupContext e.NestedBorrowedVars> : e.Context
            = (Function
                GN-Local (e.ClosureName)
                Sentences
                <Map
                  {
                    ((e.Pattern) e.Conditions (e.Result))
                      = ((e.Context e.Pattern) e.Conditions (e.Result));
                  }
                  e.Sentences
                >
              )
              <Reduce
                (&CheckBorrowed (e.ScopeVars))
                (e.BorrowedVars) e.NestedBorrowedVars
              >
              (ClosureBrackets (Symbol Name e.ClosureName) e.Context);
        }
      >
    : t.Function (e.BorrowedVars^) t.ClosureTerm
    = ((e.NestedFuncs e.NestedNestedFuncs t.Function) (e.BorrowedVars))
      t.ClosureTerm;

  s.MarkupContext (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars)) t.OtherTerm =
    ((e.NestedFuncs) (e.BorrowedVars)) t.OtherTerm;
}

CheckBorrowed {
  (e.ScopeVars) (e.BorrowedVars-B (s.Mode e.Index) e.BorrowedVars-E)
  (s.Mode e.Index) =
    (e.BorrowedVars-B (s.Mode e.Index) e.BorrowedVars-E);

  (e.ScopeVars-B (s.Mode e.Index) e.ScopeVars-E) (e.BorrowedVars)
  (s.Mode e.Index) =
    (e.BorrowedVars (s.Mode e.Index));

  (e.ScopeVars) (e.BorrowedVars) (s.Mode e.Index) =
    (e.BorrowedVars);
}

CreateContext {
  MarkupContext e.Context =
    <Map
      {
        ('e' e.Index) =
          (Symbol Identifier VAR 'e' e.Index)
          (Brackets (TkVariable 'e' e.Index));

        (s.Mode e.Index) =
          (Symbol Identifier VAR s.Mode e.Index)
          (TkVariable s.Mode e.Index);
      }
      e.Context
    >;

  NoMarkupContext e.Context =
    <Map
      {
        ('e' e.Index) = (Brackets (TkVariable 'e' e.Index));
        (s.Mode e.Index) = (TkVariable s.Mode e.Index);
      }
      e.Context
    >;
}

Pass-CleanupRedudandExterns {
  /*
    Проход Checker проверил корректность использования $FORWARD’ов
    и $EXTERN’ов, поэтому здесь мы их упрощаем не взирая на область
    видимости.
  */

  e.AST
    = <MapAccum
       {
         (e.DefinedFunctions)
         (Function s.ScopeClass (e.Name) e.Body)
           = (e.DefinedFunctions (e.Name))
             (Function s.ScopeClass (e.Name) e.Body);

         (e.DefinedFunctions) (Enum s.ScopeClass e.Name)
           = (e.DefinedFunctions (e.Name)) (Enum s.ScopeClass e.Name);

         (e.DefinedFunctions) (Swap s.ScopeClass e.Name)
           = (e.DefinedFunctions (e.Name)) (Swap s.ScopeClass e.Name);

         (e.DefinedFunctions) (Inline e.Name)
           = (e.DefinedFunctions (e.Name)) (Inline e.Name);

         (e.DefinedFunctions) (Drive e.Name)
           = (e.DefinedFunctions (e.Name)) (Drive e.Name);

         (e.DefinedFunctions) (Declaration s.ScopeClass e.Name)
           = (e.DefinedFunctions) (Declaration s.ScopeClass e.Name);

         (e.DefinedFunctions) (Ident e.Name)
           = (e.DefinedFunctions) (Ident e.Name);

         (e.DefinedFunctions) (NativeBlock t.SrcPos e.Code)
           = (e.DefinedFunctions) (NativeBlock t.SrcPos e.Code);

         (e.DefinedFunctions) (Spec t.SrcPos t.Name e.Pattern)
           = (e.DefinedFunctions) (Spec t.SrcPos t.Name e.Pattern)
       }
       (/* defined functions */)
       e.AST
      >
    : (e.DefinedFunctions) e.AST^
    = <Map (&FilterDeclarations e.DefinedFunctions) e.AST>;
}

FilterDeclarations {
  e.DefinedFunctions-B (e.Name) e.DefinedFunctions-E
  (Declaration s.ScopeClass e.Name)
    = /* пусто */;

  e.DefinedFunctions t.OtherItem = t.OtherItem;
}

Pass-FoldEnums {
  e.AST
    = <Map
        {
          (Function s.ScopeClass (e.Name) Sentences /* пусто */) =
            (Enum s.ScopeClass e.Name);

          t.Other = t.Other;
        }
        e.AST
      >;
}
