$INCLUDE "LibraryEx";


*$FROM TreeUtils
$EXTERN ExtractVariables;

*$FROM GenericMatch
$EXTERN Solve;

*$FROM Log
$EXTERN Log-PutLine;

*$FROM DisplayName
$EXTERN DisplayName;


/*
  В дерево добавляется узел (DriveInfo e.DriveInfo).

  e.DriveInfo ::= (e.OptFuncNames (e.OptFunctions))
  e.OptFuncNames ::= (e.Name)*
  e.OptFunctions ::= t.OptFunction

  t.OptFunction ::= (s.Label s.ScopeClass (e.Name) e.OptBody)
  e.OptBody ::= Sentences e.Sentences
*/


/**
  <OptTree-Drive-Prepare (s.OptDrive s.OptIntrinsic) e.AST> == e.AST

  s.OptDrive ::= OptDrive | OptInline | NoOpt
  s.OptIntrinsic ::= OptIntrinsic | NoOpt
*/
$ENTRY OptTree-Drive-Prepare {
  (NoOpt NoOpt) e.AST = e.AST;

  (s.OptDrive s.OptIntrinsic)
  e.AST-B (DriveInfo e.DriveInfo) e.AST-E
    = <UpdateDriveInfo s.OptDrive s.OptIntrinsic (e.DriveInfo) e.AST-B e.AST-E>;

  (s.OptDrive s.OptIntrinsic) e.AST
    = (/* no names */) /* no info */ : e.EmptyInfo
    = <UpdateDriveInfo s.OptDrive s.OptIntrinsic (e.EmptyInfo) e.AST>;
}

/* Функция генерирует имена остаточных прогоняемых функций */

GenRemainderFuncNames {
  s.Label e.Name s.End s.End = (s.Label <AddStarSuffix e.Name s.End>);

  s.Label e.Name s.Cur s.End
    = (s.Label <AddStarSuffix e.Name s.Cur>)
      <GenRemainderFuncNames s.Label e.Name <+ 1 s.Cur> s.End>;
}

AddStarSuffix {
  e.Name 0 = e.Name;
  e.Name SUF e.Suffix s.Count = e.Name SUF e.Suffix '*' s.Count;
  e.Name s.Count = e.Name SUF '*' s.Count;
}

BaseName {
  e.Name SUF '*' s.Count = e.Name s.Count;
  e.Name '*' s.Count = e.Name s.Count;
  e.Name /* нет суффикса */ = e.Name 0;
}

UpdateDriveInfo {
  s.OptDrive s.OptIntrinsic ((e.KnownNames) e.KnownFunctions) e.AST
    = <ExtractLabels Drive e.AST> : (e.Drives) e.AST^
    = <ExtractLabels Inline e.AST> : (e.Inlines) e.AST^
    = <ExtractLabels Intrinsic e.AST> : (e.Intrinsics) e.AST^
    = <ExtractMetatableNames e.AST> : (e.Metatables) e.AST^

    = <SetNames-Reject (e.Drives) (e.Intrinsics)> : e.Drives^
    = <SetNames-Reject (e.Inlines) (e.Intrinsics)> : e.Inlines^

    = <SetNames-Reject (e.Drives) (e.KnownNames)> : e.Drives^
    = <SetNames-Reject (e.Inlines) (e.KnownNames)> : e.Inlines^
    = <SetNames-Reject (e.Intrinsics) (e.KnownNames)> : e.Intrinsics^
    = <SetNames-Reject (e.Metatables) (e.KnownNames)> : e.Metatables^

    = <Map
        {
          (s.Label e.Name)
            = '$' <Upper <Explode s.Label>> : e.Label
            = <Log-PutLine 'New ' e.Label ' function: ' <DisplayName e.Name>>;
        }
        e.Drives e.Inlines e.Intrinsics e.Metatables
      >
    : /* пусто */

    = <ExtractBaseNames e.Drives e.Inlines e.Metatables> : e.ExtractedNames
    = <ExtractExtractableFunctions (e.ExtractedNames) e.AST>
    : (e.Extracted) e.AST^

    = <ExtractFuncLengths e.AST> : (e.Lengths) e.AST^
    = <MultiplyRemainderNames (e.Lengths) e.Drives> : e.Drives^
    = <MultiplyRemainderNames (e.Lengths) e.Inlines> : e.Inlines^

    /*
      Функция Func может быть помечена как $INLINE, рассахариватель условий
      извлёк Func*k, авторазметка пометила её как $DRIVE.
      Пометка $INLINE имеет приоритет.
    */
    = <SetNames-Reject (e.Drives) (e.Inlines)> : e.Drives^

    = e.Drives e.Inlines e.Metatables : e.OptNames

    = <FormatOptFunctions (e.OptNames) e.Extracted> : e.OptFunctions

    = <Map
        {
          (Intrinsic e.Name) = (Intrinsic GN-Local (e.Name) Intrinsic e.Name);
        }
        e.Intrinsics
      >
    : e.OptIntrinsicFuncs

    = (DriveInfo
        (e.KnownNames e.OptNames e.Intrinsics)
        e.KnownFunctions e.OptFunctions e.OptIntrinsicFuncs
      )
      e.AST;
}

ExtractLabels {
  s.Label e.AST
    = <DoExtractLabels s.Label (/* метки */) (/* просканировано */) e.AST>;
}

DoExtractLabels {
  s.Label (e.FoundLabels) (e.Scanned) e.AST-B (s.Label e.Name) e.AST-E
    = <DoExtractLabels
        s.Label (e.FoundLabels (s.Label e.Name)) (e.Scanned e.AST-B) e.AST-E
      >;

  s.Label (e.FoundLabels) (e.Scanned) e.AST = (e.FoundLabels) e.Scanned e.AST;
}

ExtractMetatableNames {
  e.AST
    = <MapAccum
        {
          (e.Metatables) (Function s.ScopeClass (e.Name) Metatable e.Body)
            = (e.Metatables (Metatable e.Name))
              (Function s.ScopeClass (e.Name) Metatable e.Body);

          (e.Metatables) t.Other = (e.Metatables) t.Other;
        }
        (/* metatables */) e.AST
      >;
}

SetNames-Reject {
  (e.Minuent-B (s._M e.Name) e.Minuent-E) (e.Subtr-B (s.Label e.Name) e.Subtr-E)
    = e.Minuent-B
      <SetNames-Reject (e.Minuent-E) (e.Subtr-B (s.Label e.Name) e.Subtr-E)>;

  (e.Minuent) (e.Subtrahend) = e.Minuent;
}

ExtractBaseNames {
  e.OptNames
    = <Map
        {
          (s.Label e.Name)
            = <BaseName e.Name> : e.BaseName s.Num
            = (s.Label e.BaseName);
        }
        e.OptNames
      >
    : e.BaseOptNames
    = <Unique e.BaseOptNames>;
}

ExtractExtractableFunctions {
  (e.Names) e.AST
    = <MapAccum
        {
          (e.Extracted) (Function s.ScopeClass (e.Name) e.Body)
            , e.Names : e._ (s._ e.Name) e._
            = (e.Extracted (Function s.ScopeClass (e.Name) e.Body))
              (Function s.ScopeClass (e.Name) e.Body);

          (e.Extracted) t.Other = (e.Extracted) t.Other;
        }
        (/* extracted */) e.AST
      >;
}

ExtractFuncLengths {
  e.AST
    = <MapAccum
        {
          (e.Lengths) (Function s.ScopeClass (e.Name) Sentences e.Sentences)
            = <Lenw e.Sentences> : s.SentencesCount e.Sentences^
            = (e.Lengths (e.Name s.SentencesCount))
              (Function s.ScopeClass (e.Name) Sentences e.Sentences);

          (e.Lengths) t.Other = (e.Lengths) t.Other;
        }
        (/* длины */) e.AST
      >;
}

MultiplyRemainderNames {
  (e.Lengths) e.FuncNames
    = <Map
        {
          (s.Label e.OptName)
            = <BaseName e.OptName> : e.BaseName s.StartNum
            = e.Lengths : e._ (e.BaseName s.SentencesCount) e._
            = <GenRemainderFuncNames
                s.Label e.BaseName s.StartNum s.SentencesCount
              >;
        }
        e.FuncNames
      >
}

FormatOptFunctions {
  (e.OptNames) e.Functions
    = <MapAccum
        {
          (e.Names-B (Metatable e.Name) e.Names-E)
          (Function s.ScopeClass (e.Name) Metatable e.Body)
            = (e.Names-B e.Names-E)
              (Metatable s.ScopeClass (e.Name) Metatable e.Body);

          (e.Names-B (s.Label e.Name) e.Names-E)
          (Function s.ScopeClass (e.Name) Sentences e.Sentences)
            = (e.Names-B e.Names-E)
              (s.Label s.ScopeClass (e.Name) Sentences e.Sentences);
        }
        (<ExtractBaseNames e.OptNames>) e.Functions
      >
    : (e._) e.OptFunctions
    = e.OptFunctions;
}

/**
  <OptTree-Drive (s.OptDrive s.OptIntrinsic) e.AST> == e.AST^
*/
$ENTRY OptTree-Drive {
  (NoOpt NoOpt) e.AST = e.AST;

  (s.OptDrive s.OptIntrinsic) e.AST-B (DriveInfo e.DriveInfo) e.AST-E
    = <DriveInlineOptimizerTick
        (e.DriveInfo) e.AST-B e.AST-E s.OptDrive s.OptIntrinsic
      >
}

OptSwitch {
  OptDrive = Drive;
  OptInline = Inline;
  OptIntrinsic = Intrinsic;
  NoOpt = None
}

/* Осуществляет прогонку или оптимизацию в зависимости от ключа */

DriveInlineOptimizerTick {
  t.OptInfo e.AST s.OptDrive s.OptIntrinsic
    = (<OptSwitch s.OptDrive> <OptSwitch s.OptIntrinsic>) : t.Mode
    = <MapAccum
        {
          t.OptInfo^ (Function s.ScopeClass (e.Name) Sentences e.Sentences)
            = <OptFunction
                (Function s.ScopeClass (e.Name) Sentences e.Sentences)
                t.OptInfo
                t.Mode
              >;

          t.OptInfo^ t.Other = t.OptInfo t.Other
        }
        t.OptInfo
        e.AST
      >
    : (e.OptInfo) e.AST^

    = <MapAccum
        {
          (e.News-B (Function s.ScopeClass (e.Name) e.Body) e.News-E)
          (NewFunction s.ScopeClass (e.Name) e._)
            = (e.News-B (Function s.ScopeClass (e.Name) e.Body) e.News-E)
              /* пропускаем */;

          (e.NewFunctions) (NewFunction s.ScopeClass (e.Name) e.Body)
            = (e.NewFunctions (Function s.ScopeClass (e.Name) e.Body));

          (e.NewFunctions) t.Other = (e.NewFunctions) t.Other;
        }
        (/* new functions */) e.AST
      >
    : (e.NewFunctions) e.AST^

    = <MapAccum
        {
          (e.News-B (Function s.ScopeClass (e.Name) e._) e.News-E)
          (s.Function s.ScopeClass (e.Name) e.Body)
            , <OneOf s.Function Function ColdFunction> : True
            = (e.News-B e.News-E)
              (s.Function s.ScopeClass (e.Name) e.Body);

          (e.NewFunctions^) t.Other = (e.NewFunctions) t.Other;
        }
        (e.NewFunctions) e.AST
      >
    : (e.NewFunctions^) e.AST^

    = (DriveInfo e.OptInfo) e.AST e.NewFunctions;
}

IsPassiveCall {
  e.Expr
    = <Reduce
        {
           True t.Term = <IsPassiveCall-Aux t.Term>;
           False t.Term = False;
        }
        True
        e.Expr
      >

}

IsPassiveCall-Aux {
  (Brackets e.Expr) = <IsPassiveCall e.Expr>;
  (ADT-Brackets e.Expr) = <IsPassiveCall e.Expr>;

  (CallBrackets e.Expr) = False;
  (ColdCallBrackets e.Expr) = False;

  t.Other = True;
}

IsLexpr {
  e.Expr
    , <IsLexpr-Aux e.Expr>
    : {
        e.Res-B OpenE e.Res-E = False;
        e.Res-B (s.Mode e.Index) e.Res-M (s.Mode e.Index) e.Res-E = False;
        e.Other = True;
      }
}

/*
  <IsLexpr-Aux e.Expr> == t.IsLexpr-Aux-Item*

  t.IsLexpr-Aux-Item ::= OpenE | ('e' e.Index) | ('t' e.Index)
*/
IsLexpr-Aux {
  e.Expr-B (TkVariable 'e' e.Index1) e.Expr-M (TkVariable 'e' e.Index2) e.Expr-E
    = OpenE;

  e.Expr
    = <Map
        {
          (TkVariable 'e' e.Index) = ('e' e.Index);
          (TkVariable 't' e.Index) = ('t' e.Index);

          (Brackets e.InBrackets) = <IsLexpr-Aux e.InBrackets>;
          (ADT-Brackets (e.Name) e.InBrackets) = <IsLexpr-Aux e.InBrackets>;

          t.Other = /* пропускаем */;
        }
        e.Expr
      >;
}

/*
  Осуществляет попытку прогонки или встраивания в функции
  <OptFunction t.Function t.DriveInfo s.Mode>
    == t.DriveInfo t.OptimizedFunction t.Function*

  Возвращает модифицированную функцию
  и порожденные из прогонки или встраивания
*/

OptFunction {
  (Function s.ScopeClass (e.Name) Sentences e.Sentences)
  t.OptInfo t.Mode
    = <Reduce
        {
          (t.OptInfo^ (e.SntAcc) (e.FunAcc)) t.Sentence
            = <OptSentence t.Sentence t.OptInfo t.Mode>
            : t.OptInfo^ (e.NewFunctions) e.NewSentences
            = (t.OptInfo (e.SntAcc e.NewSentences) (e.FunAcc e.NewFunctions));
        }
        (t.OptInfo (/*sentences*/) (/*functions*/))
        e.Sentences
      >
    : (t.OptInfo^ (e.Sentences^) (e.NewFunctions))
    = t.OptInfo
      (Function s.ScopeClass (e.Name) Sentences e.Sentences) e.NewFunctions;
}

/*
   <OptSentence t.Sentence t.OptInfo s.Mode>
   == t.OptInfo (t.Func?) t.Sentence*
*/

OptSentence {
  /* Оптимизируем только предложения вида Pat = Res */
  ((e.Left) (e.Right)) ((e.OptFuncNames) e.OptFuncs) t.Mode
     = <FindOptimizedCall (e.OptFuncNames) e.Right>
     : {
         (e.OptFuncNames^ None) e.Right^
           = ((e.OptFuncNames) e.OptFuncs) () ((e.Left) (e.Right));

         (e.OptFuncNames^ t.Call) e.Right^
           = <OptSentence-Aux t.Mode ((e.Left) (e.Right)) t.Call e.OptFuncs>
           : (e.OptFuncs^) (e.NewFunctions) e.NewSentences
           = ((e.OptFuncNames) e.OptFuncs) (e.NewFunctions) e.NewSentences
       };

  t.Sentence t.OptInfo t.Mode = t.OptInfo () t.Sentence
}

OptSentence-Aux {
  (s.DriveMode s.IntrinsicMode)
  ((e.Left) (e.Right))
  (CallBrackets (Symbol Name e.Name) e.Args)
  e.OptFuncs

    /* Поиск информации для прогонки */
    = <FindOptInfo e.OptFuncs (e.Name)> : e.OptFuncs^ t.FunctionForDrive
    = s.IntrinsicMode
    : {
        Intrinsic = <FindMetatables e.OptFuncs>;
        s._ = () e.OptFuncs;
      }
    : t.Metatables e.OptFuncs^
    = <OptSentence-MakeSubstitutions
        (s.DriveMode s.IntrinsicMode) ((e.Left) (e.Right))
        (e.Args) t.FunctionForDrive t.Metatables
      >
    : e.SubstitutionPacks

    = (e.OptFuncs)
      <MapAccum
        {
          (e.NewFunctions) (e.Substitutions (e.NewFunction))
            = (e.NewFunctions e.NewFunction)
              <ApplySolutions ((e.Left) (e.Right)) e.Substitutions>;
        }
        (/* new functions */)
        e.SubstitutionPacks
      >;
}

DoOptSentence-MakeSubstitutions-Intrinsic {
  t.IntrinsicFunction t.Metatables (e.Args) '__Meta_Mu'
    = <Intrinsic-Mu e.Args t.Metatables>
    : {
        Ok e.Result = ((<eDRIVEN> ':' e.Result) (/* нет новых функций */));
        MakeColdCall = <MakeColdSolution t.IntrinsicFunction e.Args>;
      };

  t.IntrinsicFunction t.Metatables (e.Args) e.BehaviorName
    = e.BehaviorName
    : {
        'Add' = &Intrinsic-Add;
        'Sub' = &Intrinsic-Sub;
        'Mul' = &Intrinsic-Mul;
        'Div' = &Intrinsic-Div;
        'Mod' = &Intrinsic-Mod;
        'Divmod' = &Intrinsic-Divmod;
        'Compare' = &Intrinsic-Compare;
        'Chr' = &Intrinsic-Chr;
        'Ord' = &Intrinsic-Ord;
        'Upper' = &Intrinsic-Upper;
        'Lower' = &Intrinsic-Lower;
        'Numb' = &Intrinsic-Numb;
        'Symb' = &Intrinsic-Symb;
        'Implode' = &Intrinsic-Implode;
        'Implode_Ext' = &Intrinsic-Implode_Ext;
        'Explode' = &Intrinsic-Explode;
        'Explode_Ext' = &Intrinsic-Explode;
        'Type' = &Intrinsic-Type;
        'Lenw' = &Intrinsic-Lenw;
        'First' = &Intrinsic-First;
        'Last' = &Intrinsic-Last;

        e._ = { e._ = MakeColdCall };
      }
    : s.TransformFunction
    = <s.TransformFunction e.Args>
    : {
        Ok e.Result = ((<eDRIVEN> ':' e.Result) (/* нет новых функций */));
        MakeColdCall = <MakeColdSolution t.IntrinsicFunction e.Args>;
      };
}

eDRIVEN {
  = (TkVariable 'e' DRIVEN 0);
}

Intrinsic-Mu {
  e.Args t.Metatables
    , e.Args : t.Function e.MuArg (Symbol Name e.MetatableName)
    = t.Function
    : {
        (Symbol Name e.Name)
          = Ok (CallBrackets (Symbol Name e.Name) e.MuArg);

        (ClosureBrackets e.Body)
          = Ok (CallBrackets (ClosureBrackets e.Body) e.MuArg);

        (Symbol Identifier s.Name)
          , <ArithmeticSymbolToFunction s.Name> : True e.FunctionName
          = Ok (CallBrackets (Symbol Name e.FunctionName) e.MuArg);

        (Symbol Char s.Name)
          , <ArithmeticSymbolToFunction s.Name> : True e.FunctionName
          = Ok (CallBrackets (Symbol Name e.FunctionName) e.MuArg);

        (Symbol Identifier e.Name)
          = <MakeSubstitution-FromMetatables
              t.Metatables (e.MetatableName) (e.MuArg) e.Name
            >;

        (Brackets e.Chars)
          , <AllChars e.Chars> : Ok e.Name
          = <MakeSubstitution-FromMetatables
              t.Metatables (e.MetatableName) (e.MuArg) e.Name
            >;

        t._ = MakeColdCall;
      };

  e._ = MakeColdCall;
}

ArithmeticSymbolToFunction {
  '+' = True 'Add';
  '-' = True 'Sub';
  '/' = True 'Div';
  '*' = True 'Mul';
  '%' = True 'Mod';
  '?' = True 'Residue';

  s._ = False;
}

AllChars {
  e.Terms = <DoAllChars () e.Terms>;
}

DoAllChars {
  (e.Chars) (Symbol Char s.Char) e.Rest = <DoAllChars (e.Chars s.Char) e.Rest>;
  (e.Chars) /* empty */ = Ok e.Chars;
  (e.Chars) e.Rest = Fails;
}

MakeSubstitution-FromMetatables {
  t.Metatables (e.MetatableName) (e.MuArg) e.Name
    = t.Metatables
    : {
        (e._ (Metatable s._ (e.MetatableName) Metatable e.Map) e._)
          = e.Map
          : {
              e._ ((Symbol Identifier e.Name) t.Pointer) e._
                = Ok (CallBrackets t.Pointer e.MuArg);

              e.Other = MakeColdCall;
            };

        e.Other = MakeColdCall;
      }
}

Intrinsic-Add {
  e.Args
    = <ArithmArgs e.Args>
    : {
        Ok (Const e.Left) (Const e.Right)
          = Ok <NumberToSymbols <Add (e.Left) e.Right>>;

        Ok (Const 0) (ArithmResult t.ArithmCall) = Ok t.ArithmCall;
        Ok (ArithmResult t.ArithmCall) (Const 0) = Ok t.ArithmCall;

        e._ = MakeColdCall;
      };
}

ArithmArgs {
  (Brackets e.Left) e.Right
    , <ArithmOneArg e.Left> : Ok e.Left^
    , <ArithmOneArg e.Right> : Ok e.Right^
    = Ok (e.Left) (e.Right);

  (Symbol Char s.Sign) (Symbol Number s.Left) e.Right
    , <ArithmOneArg e.Right> : Ok e.Right^
    = Ok (Const s.Sign s.Left) (e.Right);

  (Symbol Number s.Left) e.Right
    , <ArithmOneArg e.Right> : Ok e.Right^
    = Ok (Const s.Left) (e.Right);

  e._ = Fails;
}

ArithmOneArg {
  (ColdCallBrackets (Symbol Name e.Name) e.Arg)
    , <ArithmeticFunctions> : e._ (e.Name) e._
    = Ok ArithmResult (ColdCallBrackets (Symbol Name e.Name) e.Arg);

  e.Number, <Number-Check e.Number> : True
    = Ok Const <Add 0 <SymbolsToNumber e.Number>>;

  e._ = Fails;
}

Number-Check {
  (Symbol Char '+') e.Rest = <Number-Check-AllNumbers e.Rest>;
  (Symbol Char '-') e.Rest = <Number-Check-AllNumbers e.Rest>;

  e.Rest = <Number-Check-AllNumbers e.Rest>;
}

Number-Check-AllNumbers {
  (Symbol Number s._) = True;
  (Symbol Number s._) e.Rest = <Number-Check-AllNumbers e.Rest>;
  e._ = False;
}

SymbolsToNumber {
  e.Symbols
    = <Map
        {
          (Symbol Char '-') = '-';
          (Symbol Char '+') = '+';
          (Symbol Number s.n) = s.n
        }
        e.Symbols
      >
}

NumberToSymbols {
  e.Number
    = <Map
        {
          '-' = (Symbol Char '-');
          '+' = (Symbol Char '+');
          s.n = (Symbol Number s.n)
        }
        e.Number
      >
}

ArithmeticFunctions {
  = ('Add') ('Div') ('Divmod') ('Mod') ('Mul') ('Sub') ('Numb');
}

Intrinsic-Sub {
  e.Args
    = <ArithmArgs e.Args>
    : {
        Ok (Const e.Left) (Const e.Right)
          = Ok <NumberToSymbols <Sub (e.Left) e.Right>>;

        Ok (ArithmResult t.ArithmCall) (Const 0) = Ok t.ArithmCall;

        e._ = MakeColdCall;
      };
}

Intrinsic-Mul {
  e.Args
    = <ArithmArgs e.Args>
    : {
        Ok (Const e.Left) (Const e.Right)
          = Ok <NumberToSymbols <Mul (e.Left) e.Right>>;

        Ok (Const 1) (ArithmResult t.ArithmCall) = Ok t.ArithmCall;
        Ok (ArithmResult t.ArithmCall) (Const 1) = Ok t.ArithmCall;

        e._ = MakeColdCall;
      };
}

Intrinsic-Div {
  e.Args
    = <ArithmArgs e.Args>
    : {
        Ok (e._) (Const 0) = MakeColdCall;

        Ok (Const e.Left) (Const e.Right)
          = Ok <NumberToSymbols <Div (e.Left) e.Right>>;

        Ok (ArithmResult t.ArithmCall) (Const 1) = Ok t.ArithmCall;

        e._ = MakeColdCall;
      };
}

Intrinsic-Mod {
  e.Args
    = <ArithmArgs e.Args>
    : {
        Ok (e._) (Const 0) = MakeColdCall;

        Ok (Const e.Left) (Const e.Right)
          = Ok <NumberToSymbols <Mod (e.Left) e.Right>>;

        e._ = MakeColdCall;
      };
}

Intrinsic-Divmod {
  e.Args
    = <ArithmArgs e.Args>
    : {
        Ok (e._) (Const 0) = MakeColdCall;

        Ok (Const e.Left) (Const e.Right)
          = <Divmod (e.Left) e.Right> : (e.Q) e.R
          = Ok (Brackets <NumberToSymbols e.Q>) <NumberToSymbols e.R>;

        Ok (ArithmResult t.ArithmCall) (Const 1)
          = Ok (Brackets t.ArithmCall) (Symbol Number 0);

        e._ = MakeColdCall;
      };
}

Intrinsic-Compare {
  e.Args
    , <ArithmArgs e.Args> : Ok (Const e.Left) (Const e.Right)
    = Ok (Symbol Char <Compare (e.Left) e.Right>);

  e._ = MakeColdCall;
}

/*
  TODO: уточнить семантику функций Chr, Ord, Upper, Lower.

  Функции не должны увеличивать число шагов рефал-машины.

  Сейчас:
  <Chr 48 e.X 48 <F> 48> → '@' <Chr e.X> '@' <Chr <F>> '@'
  А должно быть:
  <Chr 48 e.X 48 <F> 48> → '@' <Chr e.X 48 <F>> '@'

  Кроме того, нужно поддерживать спуск внутрь структурных скобок
  (сейчас не поддерживается).
*/
Intrinsic-Chr {
  e.Args
    , <CheckArgs-Intrinsic-StaticSubstitution (e.Args) Number> : True
    = <StaticSubstitution (e.Args) ('Chr') &Chr Number Char> : e.Substitution
    = Ok e.Substitution;

  e.Args = MakeColdCall;
}

CheckArgs-Intrinsic-StaticSubstitution {
  (e.Args) s.SymbolName
    = e.Args
    : {
        (Symbol s.SymbolName e.Name) e.Rest
          = <CheckArgs-Intrinsic-StaticSubstitution (e.Rest) s.SymbolName>;

        (TkVariable e.Var) e.Rest
          = <CheckArgs-Intrinsic-StaticSubstitution (e.Rest) s.SymbolName>;

        (ColdCallBrackets e.Body) e.Rest
          = <CheckArgs-Intrinsic-StaticSubstitution (e.Rest) s.SymbolName>;

        t.Other e.Rest = False;

        /* пусто */ = True;
      }
}

StaticSubstitution {
  (e.Args) (e.FuncName) s.Func s.SymbolFrom s.SymbolTo
    = <Map
        {
          (Symbol s.SymbolFrom s.n)
            = (Symbol s.SymbolTo <s.Func s.n>);

          (TkVariable e.Var)
            = (ColdCallBrackets (Symbol Name e.FuncName) (TkVariable e.Var));

          (ColdCallBrackets e.Body)
            = (ColdCallBrackets
                (Symbol Name e.FuncName) (ColdCallBrackets e.Body)
              );
        }
        e.Args
      >
}

Intrinsic-Ord {
  e.Args
    , <CheckArgs-Intrinsic-StaticSubstitution (e.Args) Char> : True
    = <StaticSubstitution (e.Args) ('Ord') &Ord Char Number> : e.Substitution
    = Ok e.Substitution;

  e.Args = MakeColdCall;
}

Intrinsic-Upper {
  e.Args
    , <CheckArgs-Intrinsic-StaticSubstitution (e.Args) Char> : True
    = <StaticSubstitution (e.Args) ('Upper') &Upper Char Char> : e.Substitution
    = Ok e.Substitution;

  e.Args = MakeColdCall;
}

Intrinsic-Lower {
  e.Args
    , <CheckArgs-Intrinsic-StaticSubstitution (e.Args) Char> : True
    = <StaticSubstitution (e.Args) ('Lower') &Lower Char Char> : e.Substitution
    = Ok e.Substitution;

  e.Args = MakeColdCall;
}

Intrinsic-Numb {
  e.Args
    , <AllChars e.Args> : Ok e.Chars
    = <NumberToSymbols <Numb e.Chars>> : e.Result
    = Ok e.Result;

  e.Args = MakeColdCall;
}

Intrinsic-Symb {
  e.Args
    , <ArithmOneArg e.Args> : Ok Const e._
    = <Symb <SymbolsToNumber e.Args>> : e.Numbers
    = <CharToNode e.Numbers> : e.Result
    = Ok e.Result;

  e.Args = MakeColdCall;
}

CharToNode {
  e.Char = <Map { s.a = (Symbol Char s.a) } e.Char>
}

Intrinsic-Implode {
  e.Args
    , <AllChars e.Args> : Ok e.Chars
    = <Implode e.Chars> : s.Ident e.NonIdent
    = s.Ident
    : {
        0 = (Symbol Number 0);
        e._ = (Symbol Identifier <Explode s.Ident>)
      }
    : e.Result
    = Ok e.Result <CharToNode e.NonIdent>;

  e.Args = MakeColdCall;
}

Intrinsic-Implode_Ext {
  e.Args, <AllChars e.Args> : Ok e.Chars = Ok (Symbol Identifier e.Chars);

  e.Args = MakeColdCall;
}

Intrinsic-Explode {
  (Symbol Identifier e.Name) = Ok <CharToNode e.Name>;

  e._ = MakeColdCall;
}

Intrinsic-Type {
  (CallBrackets e._) e._ = MakeColdCall;
  (ColdCallBrackets e._) e._ = MakeColdCall;
  (TkVariable e._) e._ = MakeColdCall;

  t.Term e.Rest
    = t.Term
    : {
        (Symbol Number s._) = 'N0';
        (Symbol Char s.Char) = <Type s.Char>;
        (Symbol Identifier e.Name) = <Type <Implode_Ext e.Name>>;
        (Symbol Name e._) = 'Fg';
        (ClosureBrackets e._) = 'Fc';
        (Brackets e._) = 'B0';
        (ADT-Brackets (e._) e._) = 'Ba';
      }
    : s.Type s.SubType e._
    = Ok (Symbol Char s.Type) (Symbol Char s.SubType) t.Term e.Rest;

  /* empty */ = Ok (Symbol Char '*') (Symbol Char '0');
}

Intrinsic-Lenw {
  e.Args
    , <FixedLength e.Args> : True
    = <Lenw e.Args> : s.Len e.Args^
    = Ok (Symbol Number s.Len) e.Args;

  e._ = MakeColdCall;
}

FixedLength {
  e._ (TkVariable 'e' e._) e._ = False;
  e._ (CallBrackets e._) e._ = False;

  e._ = True;
}

Intrinsic-First {
  (Symbol Number s.N) e.Expr
    , <First s.N e.Expr> : (e.Prefix) e.Suffix
    , <FixedLength e.Prefix> : True
    = Ok (Brackets e.Prefix) e.Suffix;

  e._ = MakeColdCall;
}

Intrinsic-Last {
  (Symbol Number s.N) e.Expr
    , <Last s.N e.Expr> : (e.Prefix) e.Suffix
    , <FixedLength e.Suffix> : True
    = Ok (Brackets e.Prefix) e.Suffix;

  e._ = MakeColdCall;
}

/*
  <OptSentence-MakeSubstitutions
    t.Mode (e.OriginSentence) (e.CallArgs) t.OptFunction t.Metatables
  >
    == (e.Substitutions)*
  e.Substitutions ::= e.Contractions

  e.Contractions включают в себя сужение e.DRIVEN#0 для подстановки
  правой части.
*/
OptSentence-MakeSubstitutions {
  (s.DriveMode Intrinsic)
  ((e.Left) (e.Expr)) (e.Args)
  t.IntrinsicFunction t.Metatables
    , t.IntrinsicFunction : (Intrinsic s._ (e._) Intrinsic e.BehaviorName)
    = <DoOptSentence-MakeSubstitutions-Intrinsic
        t.IntrinsicFunction t.Metatables (e.Args) e.BehaviorName
      >;

  t.Mode
  ((e.Left) (e.Expr)) (e.Args)
  t.Function t.Metatables
    /* Активные вызовы игнорируем */
    , <IsPassiveCall e.Args> : False

    = <MakeColdSolution t.Function e.Args>;

  (s.DriveMode s.IntrinsicMode)
  ((e.Left) (e.Expr)) (e.Args)
  (s.FuncMode s.ScopeClass (e.Name) Sentences e.Body) t.Metatables
    , <OneOf s.DriveMode Drive Inline> : True

    /* Если левая часть не L-выражение, допускаем только встраивание */
    = <IsLexpr e.Left>
    : {
        True = s.DriveMode;
        False = Inline;
      }
    : s.DriveMode^

    = <ExtractVariables ((e.Left) (e.Expr))> : e.SentenceVars
    = <DecreaseMode s.DriveMode s.FuncMode> : s.DriveMode^

    = <DoOptSentence-MakeSubstitutions
        s.DriveMode (e.SentenceVars) (e.Args)
        (/* substitutions */)
        (Function s.ScopeClass (e.Name) Sentences e.Body)
      >;

  t.Mode
  ((e.Left) (e.Expr)) (e.Args)
  t.Function t.Metatables
    = <MakeColdSolution t.Function e.Args>;
}

MakeColdSolution {
  (s.FuncMode s.ScopeClass (e.Name) s.BodyLabel e.Body) e.Args
    , e.Name : e.Prefix '*' s.Num
    = (
        (<eDRIVEN> ':' (ColdCallBrackets (Symbol Name e.Name) e.Args))
        ((NewFunction s.ScopeClass (e.Name) s.BodyLabel e.Body))
      );

  (s.FuncMode s.ScopeClass (e.Name) s.BodyLabel e.Body) e.Args
    = (
        (<eDRIVEN> ':' (ColdCallBrackets (Symbol Name e.Name) e.Args))
        (/* нет новых функций */)
      );
}

DecreaseMode {
  Inline s.Mode = Inline;
  Drive s.Mode = s.Mode;
}

DoOptSentence-MakeSubstitutions {
  s.Mode (e.SentenceVars) (e.Args) (e.Substitutions)
  (Function s.ScopeClass (e.Name) Sentences ((e.LS) (e.RS)) e.Rest)
    = <Solve (e.SentenceVars) ((e.Args) ':' (e.LS))>
    : {
        /*
          В случае решения без сужений просто применяем замены.
        */
        Success (() (e.Assigns))
          = <ApplyAssigns e.RS (e.Assigns)> : e.CallReplacer
          = e.Substitutions
            ((<eDRIVEN> ':' e.CallReplacer) (/* нет новых функций */));

        /*
          «Грязное» решение допускаем только в случае прогонки.
        */
        Success e.M
          , s.Mode : Drive
          = <Map
              {
                ((e.Contrs) (e.Assigns))
                  = <ApplyAssigns e.RS (e.Assigns)> : e.CallReplacer
                  = e.Contrs (<eDRIVEN> ':' e.CallReplacer) : e.Contrs^
                  = (e.Contrs (/* нет новых функций */));
              }
              e.M
            >
          : e.NewSubsts
          = <DoOptSentence-MakeSubstitutions
              s.Mode (e.SentenceVars) (e.Args) (e.Substitutions e.NewSubsts)
              (Function
                GN-Local (<RemainderFuncIncName e.Name>) Sentences e.Rest
              )
            >;

        /*
          При неудаче переходим к следующему предложению, к подстановкам
          ничего не добавляем.
        */
        Failure
          = <DoOptSentence-MakeSubstitutions
              s.Mode (e.SentenceVars) (e.Args) (e.Substitutions)
              (Function
                GN-Local (<RemainderFuncIncName e.Name>) Sentences e.Rest
              )
            >;

        /*
          Здесь либо Undefined, либо грязное решение в режиме встраивания,
          в обоих случаях добавляем холодный вызов остаточной функции.
        */
        e.Other
          = e.Substitutions
            <MakeColdSolution
              (Function s.ScopeClass (e.Name) Sentences ((e.LS) (e.RS)) e.Rest)
              e.Args
            >;
      };

  s.Mode (e.SentenceVars) (e.Args) (e.Substitutions) t.RestFunction
    = e.Substitutions <MakeColdSolution t.RestFunction e.Args>;
}

DropLeft {
  e.List 0 =  e.List;
  t.Head e.Tail s.N = <DropLeft e.Tail <Sub s.N 1>>
}

/*
  <FindOptInfo e.OptFuncs (e.Name)> == e.OptFuncs t.Function
  t.Function ::= (s.Mode s.ScopeClass (e.Name) e.Body)
*/
FindOptInfo {
  e.OptFuncs (e.Name)
    = e.Name
    : {
        e.Prefix '*' s.N = <CutSUF e.Prefix> s.N;
        e.Name^ = e.Name 0;
      }
    : e.LookupName s.Drop
    = <FindOptInfo-Aux e.OptFuncs (e.Name) (e.LookupName) s.Drop>;
}

FindOptInfo-Aux {
  e.OptFuncs-B (Intrinsic s.ScopeClass (e.LookupName) e.Body) e.OptFuncs-E
  (e.Name) (e.LookupName) s._
  = e.OptFuncs-B (Intrinsic s.ScopeClass (e.LookupName) e.Body) e.OptFuncs-E
    (Intrinsic s.ScopeClass (e.Name) e.Body);

  e.OptFuncs-B (s.Mode s.ScopeClass (e.LookupName) e.Body) e.OptFuncs-E
  (e.Name) (e.LookupName) s.Drop
    = e.Body : Sentences e.Sentences
    = e.OptFuncs-B (s.Mode s.ScopeClass (e.LookupName) e.Body) e.OptFuncs-E
      (s.Mode s.ScopeClass (e.Name) Sentences <DropLeft e.Sentences s.Drop>);

  e.Other = ()
}

$DRIVE CutSUF;

CutSUF {
  e.Prefix SUF = e.Prefix;
  e.Prefix = e.Prefix;
}

FindMetatables {
  e.OptFuncs
    = <MapAccum
        {
          (e.Result) (Metatable e.Body)
             = (e.Result (Metatable e.Body)) (Metatable e.Body);

          (e.Result) t.Other = (e.Result) t.Other;
        }
        () e.OptFuncs
      >
}

/*
  <FindOptimizedCall (e.OptFuncNames) e.Expr>
    == (e.OptFuncNames t.Found) e.Expr

  t.Found ::= None | (CallBrackets e.Arg)
*/

FindOptimizedCall {
  (e.OptFuncNames) e.Expr
    = <MapAccum &FindOptimizedCall-Term (e.OptFuncNames None) e.Expr>;
}

FindOptimizedCall-Term {
  (e.OptFuncNames None) (Brackets e.Expr)
    = <FindOptimizedCall (e.OptFuncNames) e.Expr>
    : (e.OptFuncNames^ t.Found) e.Expr^
    = (e.OptFuncNames t.Found) (Brackets e.Expr);

  (e.OptFuncNames None) (ADT-Brackets (e.Name) e.Expr)
    = <FindOptimizedCall (e.OptFuncNames) e.Expr>
    : (e.OptFuncNames^ t.Found) e.Expr^
    = (e.OptFuncNames t.Found)
      (ADT-Brackets (e.Name) e.Expr);

  (e.OptFuncNames None) (CallBrackets (Symbol Name e.Name) e.Arg)
    = <FindOptimizedCall (e.OptFuncNames) e.Arg>
    : {
*       Вызов оптимизируемой функции, извлекаем его наружу
        (e.OptFuncNames-B (s.Label e.Name) e.OptFuncNames-E None) e.Arg^
          = (
              e.OptFuncNames-B (s.Label e.Name) e.OptFuncNames-E
              (CallBrackets (Symbol Name e.Name) e.Arg)
            )
            <eDRIVEN>;

*       Функция, не подлежащая оптимизации. Остужаем вызов.
        (e.OptFuncNames^ None) e.Arg^
          = e.Name : {
            '__Step-Drop' = (e.OptFuncNames None);
            e._ = (e.OptFuncNames None)
            (ColdCallBrackets (Symbol Name e.Name) e.Arg);
          };

*       Внутри аргумента найден оптимизируемый вызов
        (e.OptFuncNames^ t.Found) e.Arg^
          = (e.OptFuncNames t.Found)
            (CallBrackets (Symbol Name e.Name) e.Arg);
      };

  (e.OptFuncNames None) (CallBrackets e.Expr)
    = <FindOptimizedCall (e.OptFuncNames) e.Expr>
    : (e.OptFuncNames^ t.Found) e.Expr^
    = (e.OptFuncNames t.Found) (CallBrackets e.Expr);

  (e.OptFuncNames t.Found) t.AnyTerm
    = (e.OptFuncNames t.Found) t.AnyTerm;
}

/*
  <ApplySolutions ((e.Left) (e.Right)) e.Contractions>
    == t.Sentence* t.FunctionInfo
*/

ApplySolutions {
  ((e.Left) (e.Right)) e.Contractions
    = (
        (<ApplyContractions e.Left (e.Contractions)>)
        (<ApplyContractions e.Right (e.Contractions)>)
      );
}

/*
  <ApplyAssigns e.Expr (e.Assigns)> == e.Expr^
*/

ApplyAssigns {
  e.Expr (e.Assigns)
    = <Map
        {
          t.T = <ApplyAssigns-Term t.T (e.Assigns)>
        }
        e.Expr
      >
}

ApplyAssigns-Term {
  (Brackets e.Expr) (e.Assigns) = (Brackets <ApplyAssigns e.Expr (e.Assigns)>);

  (CallBrackets e.Args) (e.Assigns)
    = (CallBrackets <ApplyAssigns e.Args (e.Assigns)>);

  (ColdCallBrackets e.Args) (e.Assigns)
    = (ColdCallBrackets <ApplyAssigns e.Args (e.Assigns)>);

  (ClosureBrackets e.Args) (e.Assigns)
    = (ClosureBrackets <ApplyAssigns e.Args (e.Assigns)>);

  (ADT-Brackets (e.Name) e.Expr) (e.Assigns)
    = (ADT-Brackets (e.Name) <ApplyAssigns e.Expr (e.Assigns)>);

  t.T (e.B (e.Asgn ':' t.T) e.E)
    =  e.Asgn;

  t.T (e.Assigns) = t.T;
}

/*
  <ApplyContractions (e.Expr) (e.Contrs) == e.Expr^
*/
ApplyContractions {
  e.Expr (e.Contrs)
    = <Map
        {
          t.T = <ApplyContractions-Term t.T (e.Contrs)>
        }
        e.Expr
      >;
}

ApplyContractions-Term {
  (Brackets e.Expr) (e.Contrs)
    = (Brackets <ApplyContractions e.Expr (e.Contrs)>);

  (CallBrackets e.Args) (e.Contrs)
    = (CallBrackets <ApplyContractions e.Args (e.Contrs)>);

  (ColdCallBrackets e.OriginArgs) (e.Contrs)
    = <ApplyContractions e.OriginArgs (e.Contrs)>
    : {
*       Содержимое холодных скобок не изменилось, оставляем их холодными
        e.OriginArgs = (ColdCallBrackets e.OriginArgs);

*       Содержимое обновилось, оттаиваем скобки
        e.ChangedArgs = (CallBrackets e.ChangedArgs);
      };

  (ClosureBrackets e.Args) (e.Contrs)
    = (ClosureBrackets <ApplyContractions e.Args (e.Contrs)>);

  (ADT-Brackets (e.Name) e.Expr) (e.Contrs)
    = (ADT-Brackets (e.Name) <ApplyContractions e.Expr (e.Contrs)>);

  t.Term (e.B (t.Term ':' e.Contr) e.E)
    = <ApplyContractions e.Contr (e.B (t.Term ':' e.Contr) e.E)>;

  t.T (e.Contrs) = t.T
}

/*
  <RemainderFuncIncName e.Name> == e.Name
*/

RemainderFuncIncName {
  e.Name SUF e.Suffixes '*' s.N = e.Name SUF e.Suffixes '*' <Add s.N 1>;

  e.Name SUF e.Suffixes = e.Name SUF e.Suffixes '*' 1;

  e.Name = e.Name SUF '*' 1;
}

/**
  <OptTree-Drive-CleanupColdCalls e.AST> == e.AST^
*/
$ENTRY OptTree-Drive-CleanupColdCalls {
  e.AST
    = <Map
        {
          (Function s.ScopeClass (e.Name) Sentences e.Body)
            = (Function
                s.ScopeClass (e.Name) Sentences <CleanupCold-Body e.Body>
              );

          t.OtherItem = t.OtherItem;
        }
        e.AST
      >;
}

CleanupCold-Body {
  e.Sentences = <Map &CleanupCold-Sentence e.Sentences>;
}

CleanupCold-Sentence {
  ((e.Pattern) e.Conditions (e.Result))
    = (
        (e.Pattern)
        <Map
          {
            (Condition (e.Name) (e.Result^) (e.Pattern^))
              = (Condition
                  (e.Name) (<CleanupCold-Result e.Result>) (e.Pattern)
                );
          }
          e.Conditions
        >
        (<CleanupCold-Result e.Result>)
      );
}

CleanupCold-Result {
  e.Result = <Map &CleanupCold-Term e.Result>;
}

CleanupCold-Term {
  (Brackets e.Expr) = (Brackets <CleanupCold-Result e.Expr>);

  (ADT-Brackets (e.Name) e.Expr)
    = (ADT-Brackets (e.Name) <CleanupCold-Result e.Expr>);

  (CallBrackets e.Expr) = (CallBrackets <CleanupCold-Result e.Expr>);
  (ColdCallBrackets e.Expr) = (CallBrackets <CleanupCold-Result e.Expr>);

  t.OtherTerm = t.OtherTerm;
}
