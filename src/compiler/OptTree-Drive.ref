$INCLUDE "LibraryEx";


*$FROM TreeUtils
$EXTERN ExtractVariables;

*$FROM GenericMatch
$EXTERN Solve;

*$FROM Log
$EXTERN Log-PutLine;

*$FROM DisplayName
$EXTERN DisplayName;


/*
  В дерево добавляется узел (DriveInfo e.DriveInfo).

  e.DriveInfo ::= (e.OptFuncNames (e.OptFunctions))
  e.OptFuncNames ::= (e.Name)*
  e.OptFunctions ::= t.OptFunction

  t.OptFunction ::= (s.Label s.ScopeClass (e.Name) e.OptBody)
  e.OptBody ::= Sentences e.Sentences
*/


/**
  <OptTree-Drive-Prepare (s.OptDrive s.OptIntrinsic) e.AST> == e.AST

  s.OptDrive ::= OptDrive | OptInline | NoOpt
  s.OptIntrinsic ::= OptIntrinsic | NoOpt
*/
$ENTRY OptTree-Drive-Prepare {
  (NoOpt NoOpt) e.AST = e.AST;

  (s.OptDrive s.OptIntrinsic)
  e.AST-B (DriveInfo e.DriveInfo) e.AST-E
    = <UpdateDriveInfo s.OptDrive s.OptIntrinsic (e.DriveInfo) e.AST-B e.AST-E>;

  (s.OptDrive s.OptIntrinsic) e.AST
    = (/* no names */) /* no info */ : e.EmptyInfo
    = <UpdateDriveInfo s.OptDrive s.OptIntrinsic (e.EmptyInfo) e.AST>;
}

/**
  <OptTree-Drive (s.OptDrive s.OptIntrinsic) e.AST> == e.AST^
*/
$ENTRY OptTree-Drive {
  (NoOpt NoOpt) e.AST = e.AST;

  (s.OptDrive s.OptIntrinsic) e.AST-B (DriveInfo e.DriveInfo) e.AST-E
    = <DriveInlineOptimizerTick
        (e.DriveInfo) e.AST-B e.AST-E s.OptDrive s.OptIntrinsic
      >
}

/* Функция генерирует имена остаточных прогоняемых функций */

GenRemainderFuncNames {
  e.Name 0 = /* пусто */;

  e.Name s.LastCount
    , e.Name
    : {
        e.ProperName SUF e.Suffix = e.Name '*' s.LastCount;
        e.ProperName = e.ProperName SUF '*' s.LastCount;
      }
    : e.NewName
    = <GenRemainderFuncNames e.Name <Dec s.LastCount>> (e.NewName);
}

UpdateDriveInfo {
  s.OptDrive s.OptIntrinsic ((e.KnownNames) e.KnownFunctions) e.AST

    /* Выносим все Drive и Inline из дерева */
    = <MapAccum
        {
          (e.Optimizable) (Drive e.Name) = (e.Optimizable (Drive e.Name));
          (e.Optimizable) (Inline e.Name) = (e.Optimizable (Inline e.Name));
          (e.Optimizable) t.Other = (e.Optimizable) t.Other;
        }
        () e.AST
      >
    : (e.OptNames) e.AST^

    = <SetNames-Reject (e.OptNames) (e.KnownNames)> : e.OptNames^

    /*
      Выделяем тела оптимизируемых функций,
      копировать несколько имён в e.OptimizableNames не страшно

      Используем MapAccum не смотря на то, что достаточно Map:
      избегаем копирования дерева
    */
    = <Map
        {
          (s.Label e.Name)
            = '$' <Upper <Explode s.Label>> : e.Label
            = <Log-PutLine 'New ' e.Label ' function: ' <DisplayName e.Name>>;
        }
        e.OptNames
      >
      <MapAccum
        {
          ((e.OptFunctions) (e.RemNames))
          (Function s.ScopeClass (e.Name) Sentences e.Sentences)
            , e.OptNames : e.B (s.Label e.Name) e.E
            = <Lenw e.Sentences> : s.CountSentences e.Sentences^
            = (
                (
                  e.OptFunctions
                  (s.Label s.ScopeClass (e.Name) Sentences e.Sentences)
                )
                (
                  e.RemNames
                  (e.Name)
                  <GenRemainderFuncNames e.Name s.CountSentences>
                )
              )
              (Function s.ScopeClass (e.Name) Sentences e.Sentences);

          (e.OptInfo) t.Other
            = (e.OptInfo) t.Other;
        }
        (() ()) e.AST
      >
    : ((e.OptFunctions) (e.DrivenNames)) e.AST^

    = (DriveInfo (e.KnownNames e.DrivenNames) e.KnownFunctions e.OptFunctions)
      e.AST;
}

SetNames-Reject {
  (e.Minuent-B (s._M e.Name) e.Minuent-E) (e.Subtr-B (s.Label e.Name) e.Subtr-E)
    = e.Minuent-B
      <SetNames-Reject (e.Minuent-E) (e.Subtr-B (s.Label e.Name) e.Subtr-E)>;

  (e.Minuent) (e.Subtrahend) = e.Minuent;
}

OptSwitch {
  OptDrive = Drive;
  OptInline = Inline;
}

/* Осуществляет прогонку или оптимизацию в зависимости от ключа */

DriveInlineOptimizerTick {
  /* TODO: грязный костыль, ничего не делаем, если s.OptDrive == NoOpt */
  (e.OptInfo) e.AST NoOpt s.OptIntrinsic = (DriveInfo e.OptInfo) e.AST;

  t.OptInfo e.AST s.OptDrive s.OptIntrinsic
    = <OptSwitch s.OptDrive> : s.Mode
    = <MapAccum
        {
          t.OptInfo^ (Function s.ScopeClass (e.Name) Sentences e.Sentences)
            = <OptFunction
                (Function s.ScopeClass (e.Name) Sentences e.Sentences)
                t.OptInfo
                s.Mode
              >;

          t.OptInfo^ t.Other = t.OptInfo t.Other
        }
        t.OptInfo
        e.AST
      >
    : (e.OptInfo) e.AST^
    = (DriveInfo e.OptInfo) <DistinctFuncs e.AST>
}

DistinctFuncs {
  e.AST
    = <DistinctFuncs-Aux ColdFunction e.AST> : e.AST^
    = <DistinctFuncs-Aux Function e.AST>;
}

$SPEC DistinctFuncs-Aux s.TAG e.ast;

DistinctFuncs-Aux {
  s.FunctionTag
  e.AST-B
  (s.FunctionTag s.ScopeClass (e.Name) e.Body1)
  e.AST-M
  (Function s.ScopeClass (e.Name) e.Body2)
  e.AST-E
    = e.AST-B
      <DistinctFuncs-Aux
        s.FunctionTag
        (s.FunctionTag s.ScopeClass (e.Name) e.Body1)
        e.AST-M e.AST-E
      >;

  s.FunctionTag e.AST = e.AST
}

IsPassiveCall {
  e.Expr
    = <Reduce
        {
           True t.Term = <IsPassiveCall-Aux t.Term>;
           False t.Term = False;
        }
        True
        e.Expr
      >

}

IsPassiveCall-Aux {
  (Brackets e.Expr) = <IsPassiveCall e.Expr>;
  (ADT-Brackets e.Expr) = <IsPassiveCall e.Expr>;

  (CallBrackets e.Expr) = False;
  (ColdCallBrackets e.Expr) = False;

  t.Other = True;
}

IsLexpr {
  e.Expr
    , <IsLexpr-Aux e.Expr>
    : {
        e.Res-B OpenE e.Res-E = False;
        e.Res-B (s.Mode e.Index) e.Res-M (s.Mode e.Index) e.Res-E = False;
        e.Other = True;
      }
}

/*
  <IsLexpr-Aux e.Expr> == t.IsLexpr-Aux-Item*

  t.IsLexpr-Aux-Item ::= OpenE | ('e' e.Index) | ('t' e.Index)
*/
IsLexpr-Aux {
  e.Expr-B (TkVariable 'e' e.Index1) e.Expr-M (TkVariable 'e' e.Index2) e.Expr-E
    = OpenE;

  e.Expr
    = <Map
        {
          (TkVariable 'e' e.Index) = ('e' e.Index);
          (TkVariable 't' e.Index) = ('t' e.Index);

          (Brackets e.InBrackets) = <IsLexpr-Aux e.InBrackets>;
          (ADT-Brackets (e.Name) e.InBrackets) = <IsLexpr-Aux e.InBrackets>;

          t.Other = /* пропускаем */;
        }
        e.Expr
      >;
}

/*
  Осуществляет попытку прогонки или встраивания в функции
  <OptFunction t.Function t.DriveInfo s.Mode>
    == t.DriveInfo t.OptimizedFunction t.Function*

  Возвращает модифицированную функцию
  и порожденные из прогонки или встраивания
*/

OptFunction {
  (Function s.ScopeClass (e.Name) Sentences e.Sentences)
  t.OptInfo s.Mode
    = <Reduce
        {
          (t.OptInfo^ (e.SntAcc) (e.FunAcc)) t.Sentence
            = <OptSentence t.Sentence t.OptInfo s.Mode>
            : t.OptInfo^ (e.NewFunctions) e.NewSentences
            = (t.OptInfo (e.SntAcc e.NewSentences) (e.FunAcc e.NewFunctions));
        }
        (t.OptInfo (/*sentences*/) (/*functions*/))
        e.Sentences
      >
    : (t.OptInfo^ (e.Sentences^) (e.NewFunctions))
    = t.OptInfo
      (Function s.ScopeClass (e.Name) Sentences e.Sentences) e.NewFunctions;
}

/*
   <OptSentence t.Sentence t.OptInfo s.Mode>
   == t.OptInfo (t.Func?) t.Sentence*
*/

OptSentence {
  /* Оптимизируем только предложения вида Pat = Res */
  ((e.Left) (e.Right)) ((e.OptFuncNames) e.OptFuncs) s.Mode
     = <FindOptimizedCall (e.OptFuncNames) e.Right>
     : {
         (e.OptFuncNames^ None) e.Right^
           = ((e.OptFuncNames) e.OptFuncs) () ((e.Left) (e.Right));

         (e.OptFuncNames^ t.Call) e.Right^
           = <OptSentence-Aux s.Mode ((e.Left) (e.Right)) t.Call e.OptFuncs>
           : (e.OptFuncs^) (e.NewFunctions) e.NewSentences
           = ((e.OptFuncNames) e.OptFuncs) (e.NewFunctions) e.NewSentences
       };

  t.Sentence t.OptInfo s.Mode = t.OptInfo () t.Sentence
}

OptSentence-Aux {
  s.Mode
  ((e.Left) (e.Right))
  (CallBrackets (Symbol Name e.Name) e.Args)
  e.OptFuncs

    /* Поиск информации для прогонки */
    = <FindOptInfo e.OptFuncs (e.Name)> : e.OptFuncs^ t.FunctionForDrive

    = <OptSentence-MakeSubstitutions
        s.Mode ((e.Left) (e.Right)) (e.Args) t.FunctionForDrive
      >
    : e.SolutionPacks

    = (e.OptFuncs)
      <MapAccum
        {
          (e.NewFunctions) ((e.RS^) e.Solutions^ (e.NewFunction))
            = (e.NewFunctions e.NewFunction)
              <ApplySolutions ((e.Left) (e.Right)) (e.RS) e.Solutions>;
        }
        (/* new functions */)
        e.SolutionPacks
      >;
}

OptSentence-MakeSubstitutions {
  s.Mode
  ((e.Left) (e.Expr)) (e.Args)
  t.Function

    /* Активные вызовы игнорируем */
    , <IsPassiveCall e.Args> : False

    = <MakeColdSolution t.Function e.Args>;

  s.Mode
  ((e.Left) (e.Expr)) (e.Args)
  (s.FuncMode s.ScopeClass (e.Name) Sentences e.Body)

    /* Если левая часть не L-выражение, допускаем только встраивание */
    = <IsLexpr e.Left>
    : {
        True = s.Mode;
        False = Inline;
      }
    : s.Mode^

    = <ExtractVariables ((e.Left) (e.Expr))> : e.SentenceVars
    = <DecreaseMode s.Mode s.FuncMode> : s.Mode^

    = <DoOptSentence-MakeSubstitutions
        s.Mode (e.SentenceVars) (e.Args)
        (/* substitutions */)
        (Function s.ScopeClass (e.Name) Sentences e.Body)
      >;
}

MakeColdSolution {
  (s.FuncMode s.ScopeClass (e.Name) Sentences e.Body) e.Args
    , e.Name : e.Prefix '*' s.Num
    = (
        ((ColdCallBrackets (Symbol Name e.Name) e.Args))
        ((/* нет присваиваний */) (/* нет сужений */))
        ((Function s.ScopeClass (e.Name) Sentences e.Body))
      );

  (s.FuncMode s.ScopeClass (e.Name) Sentences e.Body) e.Args
    = (
        ((ColdCallBrackets (Symbol Name e.Name) e.Args))
        ((/* нет присваиваний */) (/* нет сужений */))
        (/* нет новых функций */)
      );
}

DecreaseMode {
  Inline s.Mode = Inline;
  Drive s.Mode = s.Mode;
}

DoOptSentence-MakeSubstitutions {
  s.Mode (e.SentenceVars) (e.Args) (e.Substitutions)
  (Function s.ScopeClass (e.Name) Sentences ((e.LS) (e.RS)) e.Rest)
    = <Solve (e.SentenceVars) ((e.Args) ':' (e.LS))>
    : {
        /*
          В случае решения без сужений просто применяем замены
        */
        Success (() (e.Assigns))
          = e.Substitutions
            ((e.RS) (() (e.Assigns)) (/* нет новых функций */));

        /*
          «Грязное» решение допускаем только в случае прогонки
        */
        Success e.M
          , s.Mode : Drive
          = <DoOptSentence-MakeSubstitutions
              s.Mode (e.SentenceVars) (e.Args)
              (
                e.Substitutions
                ((e.RS) e.M (/* нет новых функций */))
              )
              (Function
                GN-Local (<RemainderFuncIncName e.Name>) Sentences e.Rest
              )
            >;

        /*
          При неудаче переходим к следующему предложению, к подстановкам
          ничего не добавляем
        */
        Failure
          = <DoOptSentence-MakeSubstitutions
              s.Mode (e.SentenceVars) (e.Args) (e.Substitutions)
              (Function
                GN-Local (<RemainderFuncIncName e.Name>) Sentences e.Rest
              )
            >;

        /*
          Здесь либо Undefined, либо грязное решение в режиме встраивания,
          в обоих случаях добавляем холодный вызов остаточной функции
        */
        e.Other
          = e.Substitutions
            <MakeColdSolution
              (Function s.ScopeClass (e.Name) Sentences ((e.LS) (e.RS)) e.Rest)
              e.Args
            >;
      };

  s.Mode (e.SentenceVars) (e.Args) (e.Substitutions) t.RestFunction
    = e.Substitutions <MakeColdSolution t.RestFunction e.Args>;
}

DropLeft {
  e.List 0 =  e.List;
  t.Head e.Tail s.N = <DropLeft e.Tail <Sub s.N 1>>
}

/*
  <FindOptInfo e.OptFuncs (e.Name)> == e.OptFuncs t.Function
  t.Function ::= (s.Mode s.ScopeClass (e.Name) e.Body)
*/
FindOptInfo {
  e.OptFuncs (e.Name)
    = e.Name
    : {
        e.Prefix '*' s.N = <CutSUF e.Prefix> s.N;
        e.Name^ = e.Name 0;
      }
    : e.LookupName s.Drop
    = <FindOptInfo-Aux e.OptFuncs (e.Name) (e.LookupName) s.Drop>;
}

FindOptInfo-Aux {
  e.OptFuncs-B (s.Mode s.ScopeClass (e.LookupName) e.Body) e.OptFuncs-E
  (e.Name) (e.LookupName) s.Drop
    = e.Body : Sentences e.Sentences
    = e.OptFuncs-B (s.Mode s.ScopeClass (e.LookupName) e.Body) e.OptFuncs-E
      (s.Mode s.ScopeClass (e.Name) Sentences <DropLeft e.Sentences s.Drop>);
}

$DRIVE CutSUF;

CutSUF {
  e.Prefix SUF = e.Prefix;
  e.Prefix = e.Prefix;
}

/*
  <FindOptimizedCall (e.OptFuncNames) e.Expr>
    == (e.OptFuncNames t.Found) e.Expr

  t.Found ::= None | (CallBrackets e.Arg)
*/

FindOptimizedCall {
  (e.OptFuncNames) e.Expr
    = <MapAccum &FindOptimizedCall-Term (e.OptFuncNames None) e.Expr>;
}

FindOptimizedCall-Term {
  (e.OptFuncNames None) (Brackets e.Expr)
    = <FindOptimizedCall (e.OptFuncNames) e.Expr>
    : (e.OptFuncNames^ t.Found) e.Expr^
    = (e.OptFuncNames t.Found) (Brackets e.Expr);

  (e.OptFuncNames None) (ADT-Brackets (e.Name) e.Expr)
    = <FindOptimizedCall (e.OptFuncNames) e.Expr>
    : (e.OptFuncNames^ t.Found) e.Expr^
    = (e.OptFuncNames t.Found)
      (ADT-Brackets (e.Name) e.Expr);

  (e.OptFuncNames None) (CallBrackets (Symbol Name e.Name) e.Arg)
    = <FindOptimizedCall (e.OptFuncNames) e.Arg>
    : {
*       Вызов оптимизируемой функции, извлекаем его наружу
        (e.OptFuncNames-B (e.Name) e.OptFuncNames-E None) e.Arg^
          = (
              e.OptFuncNames-B (e.Name) e.OptFuncNames-E
              (CallBrackets (Symbol Name e.Name) e.Arg)
            )
            (TkVariable 'e' DRIVEN 0);

*       Функция, не подлежащая оптимизации. Остужаем вызов.
        (e.OptFuncNames^ None) e.Arg^
          = (e.OptFuncNames None)
            (ColdCallBrackets (Symbol Name e.Name) e.Arg);

*       Внутри аргумента найден оптимизируемый вызов
        (e.OptFuncNames^ t.Found) e.Arg^
          = (e.OptFuncNames t.Found)
            (CallBrackets (Symbol Name e.Name) e.Arg);
      };

  (e.OptFuncNames None) (CallBrackets e.Expr)
    = <FindOptimizedCall (e.OptFuncNames) e.Expr>
    : (e.OptFuncNames^ t.Found) e.Expr^
    = (e.OptFuncNames t.Found) (CallBrackets e.Expr);

  (e.OptFuncNames t.Found) t.AnyTerm
    = (e.OptFuncNames t.Found) t.AnyTerm;
}

/*
  <ApplySolutions
    ((e.Left) (e.Right)) (e.LS) (e.Solutions)
  > == t.Sentence* t.FunctionInfo
*/

ApplySolutions {
  ((e.Left) (e.Right)) (e.RS) e.Solutions
    = <Map
        {
          t.S = <ApplySolution ((e.Left) (e.Right)) (e.RS) t.S>
        }
        e.Solutions
      >
}

/*
  <ApplySolution
    ((e.Left) (e.Right)) (e.LS) (e.Contrs) (e.Assigns)
  > == t.Sentence
*/

ApplySolution {
  ((e.Left) (e.Right)) (e.RS) ((e.Contrs) (e.Assigns))
    = <ApplyAssigns e.RS (e.Assigns)>: e.CallReplacer
    = e.Contrs ((TkVariable 'e' DRIVEN 0) ':' e.CallReplacer): e.Contrs^
    = ((<ApplyContractions e.Left (e.Contrs)>)
       (<ApplyContractions e.Right (e.Contrs)>));
}

/*
  <ApplyAssigns (e.Expr) (e.Assigns)> == e.Expr^
*/

ApplyAssigns {
  e.Expr (e.Assigns)
    = <Map
        {
          t.T = <ApplyAssigns-Term t.T (e.Assigns)>
        }
        e.Expr
      >
}

ApplyAssigns-Term {
  (Brackets e.Expr) (e.Assigns) = (Brackets <ApplyAssigns e.Expr (e.Assigns)>);

  (CallBrackets e.Args) (e.Assigns)
    = (CallBrackets <ApplyAssigns e.Args (e.Assigns)>);

  (ColdCallBrackets e.Args) (e.Assigns)
    = (ColdCallBrackets <ApplyAssigns e.Args (e.Assigns)>);

  (ClosureBrackets e.Args) (e.Assigns)
    = (ClosureBrackets <ApplyAssigns e.Args (e.Assigns)>);

  (ADT-Brackets (e.Name) e.Expr) (e.Assigns)
    = (ADT-Brackets (e.Name) <ApplyAssigns e.Expr (e.Assigns)>);

  t.T (e.B (e.Asgn ':' t.T) e.E)
    =  e.Asgn;

  t.T (e.Assigns) = t.T;
}

/*
  <ApplyContractions (e.Expr) (e.Contrs) == e.Expr^
*/
ApplyContractions {
  e.Expr (e.Contrs)
    = <Map
        {
          t.T = <ApplyContractions-Term t.T (e.Contrs)>
        }
        e.Expr
      >;
}

ApplyContractions-Term {
  (Brackets e.Expr) (e.Contrs)
    = (Brackets <ApplyContractions e.Expr (e.Contrs)>);

  (CallBrackets e.Args) (e.Contrs)
    = (CallBrackets <ApplyContractions e.Args (e.Contrs)>);

  (ColdCallBrackets e.OriginArgs) (e.Contrs)
    = <ApplyContractions e.OriginArgs (e.Contrs)>
    : {
*       Содержимое холодных скобок не изменилось, оставляем их холодными
        e.OriginArgs = (ColdCallBrackets e.OriginArgs);

*       Содержимое обновилось, оттаиваем скобки
        e.ChangedArgs = (CallBrackets e.ChangedArgs);
      };

  (ClosureBrackets e.Args) (e.Contrs)
    = (ClosureBrackets <ApplyContractions e.Args (e.Contrs)>);

  (ADT-Brackets (e.Name) e.Expr) (e.Contrs)
    = (ADT-Brackets (e.Name) <ApplyContractions e.Expr (e.Contrs)>);

  t.Term (e.B (t.Term ':' e.Contr) e.E)
    = <ApplyContractions e.Contr (e.B (t.Term ':' e.Contr) e.E)>;

  t.T (e.Contrs) = t.T
}

/*
  <RemainderFuncIncName e.Name> == e.Name
*/

RemainderFuncIncName {
  e.Name SUF e.Suffixes '*' s.N = e.Name SUF e.Suffixes '*' <Add s.N 1>;

  e.Name SUF e.Suffixes = e.Name SUF e.Suffixes '*' 1;

  e.Name = e.Name SUF '*' 1;
}

/**
  <OptTree-Drive-CleanupColdCalls e.AST> == e.AST^
*/
$ENTRY OptTree-Drive-CleanupColdCalls {
  e.AST
    = <Map
        {
          (Function s.ScopeClass (e.Name) Sentences e.Body)
            = (Function
                s.ScopeClass (e.Name) Sentences <CleanupCold-Body e.Body>
              );

          t.OtherItem = t.OtherItem;
        }
        e.AST
      >;
}

CleanupCold-Body {
  e.Sentences = <Map &CleanupCold-Sentence e.Sentences>;
}

CleanupCold-Sentence {
  ((e.Pattern) e.Conditions (e.Result))
    = (
        (e.Pattern)
        <Map
          {
            (Condition (e.Name) (e.Result^) (e.Pattern^))
              = (Condition
                  (e.Name) (<CleanupCold-Result e.Result>) (e.Pattern)
                );
          }
          e.Conditions
        >
        (<CleanupCold-Result e.Result>)
      );
}

CleanupCold-Result {
  e.Result = <Map &CleanupCold-Term e.Result>;
}

CleanupCold-Term {
  (Brackets e.Expr) = (Brackets <CleanupCold-Result e.Expr>);

  (ADT-Brackets (e.Name) e.Expr)
    = (ADT-Brackets (e.Name) <CleanupCold-Result e.Expr>);

  (CallBrackets e.Expr) = (CallBrackets <CleanupCold-Result e.Expr>);
  (ColdCallBrackets e.Expr) = (CallBrackets <CleanupCold-Result e.Expr>);

  t.OtherTerm = t.OtherTerm;
}
